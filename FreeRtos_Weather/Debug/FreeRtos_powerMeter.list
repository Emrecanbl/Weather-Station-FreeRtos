
FreeRtos_powerMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dac4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a38  0800dc68  0800dc68  0000ec68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6a0  0800f6a0  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6a0  0800f6a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6a8  0800f6a8  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6a8  0800f6a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f6ac  0800f6ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800f6b0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d64  200001e8  0800f898  000111e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f4c  0800f898  00011f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6c2  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c3  00000000  00000000  0002e8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000145d  00000000  00000000  000345e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac42  00000000  00000000  00035a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dab1  00000000  00000000  00050687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7d99  00000000  00000000  0006e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115ed1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083ec  00000000  00000000  00115f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0011e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc4c 	.word	0x0800dc4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800dc4c 	.word	0x0800dc4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <delay>:
 */
#include"DHT11.h"


void delay (uint16_t time)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <delay+0x30>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001006:	bf00      	nop
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <delay+0x30>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f9      	bcc.n	8001008 <delay+0x14>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000314 	.word	0x20000314

08001028 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f002 fd48 	bl	8003aec <HAL_GPIO_Init>
}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001088:	2301      	movs	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f002 fd2a 	bl	8003aec <HAL_GPIO_Init>
}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <DHT11_Start>:
void DHT11_Start (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  		// set the pin as output
 80010a4:	2102      	movs	r1, #2
 80010a6:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <DHT11_Start+0x34>)
 80010a8:	f7ff ffbe 	bl	8001028 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low as Start Signal.
 80010ac:	2200      	movs	r2, #0
 80010ae:	2102      	movs	r1, #2
 80010b0:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <DHT11_Start+0x34>)
 80010b2:	f002 feb7 	bl	8003e24 <HAL_GPIO_WritePin>
	delay (18000);
 80010b6:	f244 6050 	movw	r0, #18000	@ 0x4650
 80010ba:	f7ff ff9b 	bl	8000ff4 <delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	2102      	movs	r1, #2
 80010c2:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <DHT11_Start+0x34>)
 80010c4:	f002 feae 	bl	8003e24 <HAL_GPIO_WritePin>
	delay (40);
 80010c8:	2028      	movs	r0, #40	@ 0x28
 80010ca:	f7ff ff93 	bl	8000ff4 <delay>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020000 	.word	0x40020000

080010d8 <Check_Response>:
uint8_t Check_Response (void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

	Set_Pin_Input(DHT11_PORT, DHT11_PIN); // Set up GPIO as input for signal reading.
 80010de:	2102      	movs	r1, #2
 80010e0:	4815      	ldr	r0, [pc, #84]	@ (8001138 <Check_Response+0x60>)
 80010e2:	f7ff ffbf 	bl	8001064 <Set_Pin_Input>

	uint8_t Response = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
	delay (50);
 80010ea:	2032      	movs	r0, #50	@ 0x32
 80010ec:	f7ff ff82 	bl	8000ff4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010f0:	2102      	movs	r1, #2
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <Check_Response+0x60>)
 80010f4:	f002 fe7e 	bl	8003df4 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10e      	bne.n	800111c <Check_Response+0x44>
	{
		delay (70);
 80010fe:	2046      	movs	r0, #70	@ 0x46
 8001100:	f7ff ff78 	bl	8000ff4 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001104:	2102      	movs	r1, #2
 8001106:	480c      	ldr	r0, [pc, #48]	@ (8001138 <Check_Response+0x60>)
 8001108:	f002 fe74 	bl	8003df4 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <Check_Response+0x40>
 8001112:	2301      	movs	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e001      	b.n	800111c <Check_Response+0x44>
		else Response = -1;
 8001118:	23ff      	movs	r3, #255	@ 0xff
 800111a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 800111c:	bf00      	nop
 800111e:	2102      	movs	r1, #2
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <Check_Response+0x60>)
 8001122:	f002 fe67 	bl	8003df4 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f8      	bne.n	800111e <Check_Response+0x46>

	return Response;
 800112c:	79fb      	ldrb	r3, [r7, #7]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40020000 	.word	0x40020000

0800113c <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT11_PORT, DHT11_PIN); // Set up GPIO as input for signal reading.
 8001142:	2102      	movs	r1, #2
 8001144:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <DHT11_Read+0x94>)
 8001146:	f7ff ff8d 	bl	8001064 <Set_Pin_Input>

	uint8_t Data_Raw,j;
	for (j=0;j<8;j++)
 800114a:	2300      	movs	r3, #0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	e037      	b.n	80011c0 <DHT11_Read+0x84>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // Get Ready signal
 8001150:	bf00      	nop
 8001152:	2102      	movs	r1, #2
 8001154:	481e      	ldr	r0, [pc, #120]	@ (80011d0 <DHT11_Read+0x94>)
 8001156:	f002 fe4d 	bl	8003df4 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f8      	beq.n	8001152 <DHT11_Read+0x16>
		delay (50);   // wait for 50 us
 8001160:	2032      	movs	r0, #50	@ 0x32
 8001162:	f7ff ff47 	bl	8000ff4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001166:	2102      	movs	r1, #2
 8001168:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <DHT11_Read+0x94>)
 800116a:	f002 fe43 	bl	8003df4 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10e      	bne.n	8001192 <DHT11_Read+0x56>
		{
			Data_Raw&= ~(1<<(7-j));   // write 0
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2201      	movs	r2, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	b25b      	sxtb	r3, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	b25a      	sxtb	r2, r3
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4013      	ands	r3, r2
 800118c:	b25b      	sxtb	r3, r3
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	e00b      	b.n	80011aa <DHT11_Read+0x6e>
		}
		else Data_Raw|= (1<<(7-j));  //  write 1
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	f1c3 0307 	rsb	r3, r3, #7
 8001198:	2201      	movs	r2, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011aa:	bf00      	nop
 80011ac:	2102      	movs	r1, #2
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <DHT11_Read+0x94>)
 80011b0:	f002 fe20 	bl	8003df4 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f8      	bne.n	80011ac <DHT11_Read+0x70>
	for (j=0;j<8;j++)
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	3301      	adds	r3, #1
 80011be:	71bb      	strb	r3, [r7, #6]
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d9c4      	bls.n	8001150 <DHT11_Read+0x14>
	}
	return Data_Raw;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020000 	.word	0x40020000

080011d4 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4604      	mov	r4, r0
 80011dc:	4608      	mov	r0, r1
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4623      	mov	r3, r4
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	4603      	mov	r3, r0
 80011e8:	80bb      	strh	r3, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]
 80011ee:	4613      	mov	r3, r2
 80011f0:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80011f2:	88f8      	ldrh	r0, [r7, #6]
 80011f4:	88b9      	ldrh	r1, [r7, #4]
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	883c      	ldrh	r4, [r7, #0]
 80011fa:	8b3b      	ldrh	r3, [r7, #24]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4623      	mov	r3, r4
 8001200:	f000 fa88 	bl	8001714 <ST7735_FillRectangle>
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}

0800120c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <fillScreen+0x2c>)
 8001218:	f9b3 2000 	ldrsh.w	r2, [r3]
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <fillScreen+0x30>)
 800121e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	460b      	mov	r3, r1
 8001228:	2100      	movs	r1, #0
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ffd2 	bl	80011d4 <fillRect>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000204 	.word	0x20000204
 800123c:	20000206 	.word	0x20000206

08001240 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2101      	movs	r1, #1
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <ST7735_Select+0x14>)
 800124a:	f002 fdeb 	bl	8003e24 <HAL_GPIO_WritePin>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020400 	.word	0x40020400

08001258 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2101      	movs	r1, #1
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <ST7735_Unselect+0x14>)
 8001262:	f002 fddf 	bl	8003e24 <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020400 	.word	0x40020400

08001270 <ST7735_Reset>:

void ST7735_Reset()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2104      	movs	r1, #4
 8001278:	4806      	ldr	r0, [pc, #24]	@ (8001294 <ST7735_Reset+0x24>)
 800127a:	f002 fdd3 	bl	8003e24 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800127e:	2005      	movs	r0, #5
 8001280:	f001 fb4a 	bl	8002918 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2104      	movs	r1, #4
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <ST7735_Reset+0x24>)
 800128a:	f002 fdcb 	bl	8003e24 <HAL_GPIO_WritePin>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40020400 	.word	0x40020400

08001298 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <ST7735_WriteCommand+0x2c>)
 80012a8:	f002 fdbc 	bl	8003e24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012ac:	1df9      	adds	r1, r7, #7
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	2201      	movs	r2, #1
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <ST7735_WriteCommand+0x30>)
 80012b6:	f003 fafc 	bl	80048b2 <HAL_SPI_Transmit>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020400 	.word	0x40020400
 80012c8:	200002bc 	.word	0x200002bc

080012cc <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2102      	movs	r1, #2
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <ST7735_WriteData+0x2c>)
 80012dc:	f002 fda2 	bl	8003e24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4804      	ldr	r0, [pc, #16]	@ (80012fc <ST7735_WriteData+0x30>)
 80012ec:	f003 fae1 	bl	80048b2 <HAL_SPI_Transmit>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020400 	.word	0x40020400
 80012fc:	200002bc 	.word	0x200002bc

08001300 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001312:	e034      	b.n	800137e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffb9 	bl	8001298 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001330:	7abb      	ldrb	r3, [r7, #10]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001338:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800133a:	7abb      	ldrb	r3, [r7, #10]
 800133c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001340:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001342:	7abb      	ldrb	r3, [r7, #10]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001348:	7abb      	ldrb	r3, [r7, #10]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffbd 	bl	80012cc <ST7735_WriteData>
            addr += numArgs;
 8001352:	7abb      	ldrb	r3, [r7, #10]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800135a:	89bb      	ldrh	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00e      	beq.n	800137e <DisplayInit+0x7e>
            ms = *addr++;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800136a:	89bb      	ldrh	r3, [r7, #12]
 800136c:	2bff      	cmp	r3, #255	@ 0xff
 800136e:	d102      	bne.n	8001376 <DisplayInit+0x76>
 8001370:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001374:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	4618      	mov	r0, r3
 800137a:	f001 facd 	bl	8002918 <HAL_Delay>
    while(numCommands--) {
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	1e5a      	subs	r2, r3, #1
 8001382:	73fa      	strb	r2, [r7, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1c5      	bne.n	8001314 <DisplayInit+0x14>
        }
    }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	4604      	mov	r4, r0
 800139c:	4608      	mov	r0, r1
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	4623      	mov	r3, r4
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	4603      	mov	r3, r0
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	460b      	mov	r3, r1
 80013ac:	717b      	strb	r3, [r7, #5]
 80013ae:	4613      	mov	r3, r2
 80013b0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80013b2:	202a      	movs	r0, #42	@ 0x2a
 80013b4:	f7ff ff70 	bl	8001298 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80013b8:	2300      	movs	r3, #0
 80013ba:	733b      	strb	r3, [r7, #12]
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <ST7735_SetAddressWindow+0x88>)
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	737b      	strb	r3, [r7, #13]
 80013c8:	2300      	movs	r3, #0
 80013ca:	73bb      	strb	r3, [r7, #14]
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <ST7735_SetAddressWindow+0x88>)
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	4413      	add	r3, r2
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2104      	movs	r1, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff74 	bl	80012cc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80013e4:	202b      	movs	r0, #43	@ 0x2b
 80013e6:	f7ff ff57 	bl	8001298 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <ST7735_SetAddressWindow+0x8c>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	4413      	add	r3, r2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <ST7735_SetAddressWindow+0x8c>)
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2104      	movs	r1, #4
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5f 	bl	80012cc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800140e:	202c      	movs	r0, #44	@ 0x2c
 8001410:	f7ff ff42 	bl	8001298 <ST7735_WriteCommand>
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	2000020b 	.word	0x2000020b
 8001420:	2000020c 	.word	0x2000020c

08001424 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800142e:	f7ff ff07 	bl	8001240 <ST7735_Select>
    ST7735_Reset();
 8001432:	f7ff ff1d 	bl	8001270 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001436:	480c      	ldr	r0, [pc, #48]	@ (8001468 <ST7735_Init+0x44>)
 8001438:	f7ff ff62 	bl	8001300 <DisplayInit>
    DisplayInit(init_cmds2);
 800143c:	480b      	ldr	r0, [pc, #44]	@ (800146c <ST7735_Init+0x48>)
 800143e:	f7ff ff5f 	bl	8001300 <DisplayInit>
    DisplayInit(init_cmds3);
 8001442:	480b      	ldr	r0, [pc, #44]	@ (8001470 <ST7735_Init+0x4c>)
 8001444:	f7ff ff5c 	bl	8001300 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <ST7735_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <ST7735_Init+0x54>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f810 	bl	800147c <ST7735_SetRotation>
    ST7735_Unselect();
 800145c:	f7ff fefc 	bl	8001258 <ST7735_Unselect>

}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0800dcf0 	.word	0x0800dcf0
 800146c:	0800dd28 	.word	0x0800dd28
 8001470:	0800dd38 	.word	0x0800dd38
 8001474:	20000209 	.word	0x20000209
 8001478:	2000020a 	.word	0x2000020a

0800147c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b33      	ldr	r3, [pc, #204]	@ (8001560 <ST7735_SetRotation+0xe4>)
 8001494:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001496:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <ST7735_SetRotation+0xe4>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d84e      	bhi.n	800153c <ST7735_SetRotation+0xc0>
 800149e:	a201      	add	r2, pc, #4	@ (adr r2, 80014a4 <ST7735_SetRotation+0x28>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014b5 	.word	0x080014b5
 80014a8:	080014d7 	.word	0x080014d7
 80014ac:	080014f9 	.word	0x080014f9
 80014b0:	0800151b 	.word	0x0800151b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80014b4:	23c0      	movs	r3, #192	@ 0xc0
 80014b6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <ST7735_SetRotation+0xe8>)
 80014ba:	22a0      	movs	r2, #160	@ 0xa0
 80014bc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80014be:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <ST7735_SetRotation+0xec>)
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <ST7735_SetRotation+0xf0>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <ST7735_SetRotation+0xf4>)
 80014ca:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80014cc:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <ST7735_SetRotation+0xf8>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <ST7735_SetRotation+0xfc>)
 80014d2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014d4:	e032      	b.n	800153c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80014d6:	23a0      	movs	r3, #160	@ 0xa0
 80014d8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <ST7735_SetRotation+0xec>)
 80014dc:	22a0      	movs	r2, #160	@ 0xa0
 80014de:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <ST7735_SetRotation+0xe8>)
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <ST7735_SetRotation+0xf0>)
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <ST7735_SetRotation+0xfc>)
 80014ec:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <ST7735_SetRotation+0xf8>)
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <ST7735_SetRotation+0xf4>)
 80014f4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014f6:	e021      	b.n	800153c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80014fc:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <ST7735_SetRotation+0xe8>)
 80014fe:	22a0      	movs	r2, #160	@ 0xa0
 8001500:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <ST7735_SetRotation+0xec>)
 8001504:	2280      	movs	r2, #128	@ 0x80
 8001506:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <ST7735_SetRotation+0xf0>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <ST7735_SetRotation+0xf4>)
 800150e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <ST7735_SetRotation+0xf8>)
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <ST7735_SetRotation+0xfc>)
 8001516:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001518:	e010      	b.n	800153c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800151a:	2360      	movs	r3, #96	@ 0x60
 800151c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <ST7735_SetRotation+0xec>)
 8001520:	22a0      	movs	r2, #160	@ 0xa0
 8001522:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <ST7735_SetRotation+0xe8>)
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <ST7735_SetRotation+0xf0>)
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <ST7735_SetRotation+0xfc>)
 8001530:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <ST7735_SetRotation+0xf8>)
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <ST7735_SetRotation+0xf4>)
 8001538:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800153a:	bf00      	nop
  }
  ST7735_Select();
 800153c:	f7ff fe80 	bl	8001240 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001540:	2036      	movs	r0, #54	@ 0x36
 8001542:	f7ff fea9 	bl	8001298 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001546:	f107 030f 	add.w	r3, r7, #15
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff febd 	bl	80012cc <ST7735_WriteData>
  ST7735_Unselect();
 8001552:	f7ff fe81 	bl	8001258 <ST7735_Unselect>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000208 	.word	0x20000208
 8001564:	20000206 	.word	0x20000206
 8001568:	20000204 	.word	0x20000204
 800156c:	20000209 	.word	0x20000209
 8001570:	2000020b 	.word	0x2000020b
 8001574:	2000020a 	.word	0x2000020a
 8001578:	2000020c 	.word	0x2000020c

0800157c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800157c:	b082      	sub	sp, #8
 800157e:	b590      	push	{r4, r7, lr}
 8001580:	b089      	sub	sp, #36	@ 0x24
 8001582:	af00      	add	r7, sp, #0
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	460b      	mov	r3, r1
 800158c:	80bb      	strh	r3, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2d8      	uxtb	r0, r3
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	b2d9      	uxtb	r1, r3
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015a2:	4413      	add	r3, r2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b2dc      	uxtb	r4, r3
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4622      	mov	r2, r4
 80015bc:	f7ff feea 	bl	8001394 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e043      	b.n	800164e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	3b20      	subs	r3, #32
 80015cc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	e029      	b.n	800163c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00e      	beq.n	8001616 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80015f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	743b      	strb	r3, [r7, #16]
 8001602:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001604:	b2db      	uxtb	r3, r3
 8001606:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe5c 	bl	80012cc <ST7735_WriteData>
 8001614:	e00f      	b.n	8001636 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001616:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	733b      	strb	r3, [r7, #12]
 8001622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001626:	b2db      	uxtb	r3, r3
 8001628:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	2102      	movs	r1, #2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe4b 	bl	80012cc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	3301      	adds	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001640:	461a      	mov	r2, r3
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4293      	cmp	r3, r2
 8001646:	d3cf      	bcc.n	80015e8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	3301      	adds	r3, #1
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001652:	461a      	mov	r2, r3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4293      	cmp	r3, r2
 8001658:	d3b5      	bcc.n	80015c6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	3724      	adds	r7, #36	@ 0x24
 8001660:	46bd      	mov	sp, r7
 8001662:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001666:	b002      	add	sp, #8
 8001668:	4770      	bx	lr
	...

0800166c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800166c:	b082      	sub	sp, #8
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af04      	add	r7, sp, #16
 8001674:	603a      	str	r2, [r7, #0]
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	4603      	mov	r3, r0
 800167a:	80fb      	strh	r3, [r7, #6]
 800167c:	460b      	mov	r3, r1
 800167e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001680:	f7ff fdde 	bl	8001240 <ST7735_Select>

    while(*str) {
 8001684:	e033      	b.n	80016ee <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	7d3a      	ldrb	r2, [r7, #20]
 800168a:	4413      	add	r3, r2
 800168c:	4a1f      	ldr	r2, [pc, #124]	@ (800170c <ST7735_WriteString+0xa0>)
 800168e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001692:	4293      	cmp	r3, r2
 8001694:	db16      	blt.n	80016c4 <ST7735_WriteString+0x58>
            x = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800169a:	7d7b      	ldrb	r3, [r7, #21]
 800169c:	461a      	mov	r2, r3
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	7d7a      	ldrb	r2, [r7, #21]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <ST7735_WriteString+0xa4>)
 80016ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016b0:	4293      	cmp	r3, r2
 80016b2:	da21      	bge.n	80016f8 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d103      	bne.n	80016c4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
                continue;
 80016c2:	e014      	b.n	80016ee <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	88b9      	ldrh	r1, [r7, #4]
 80016ca:	88f8      	ldrh	r0, [r7, #6]
 80016cc:	8c3b      	ldrh	r3, [r7, #32]
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	8bbb      	ldrh	r3, [r7, #28]
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f7ff ff4f 	bl	800157c <ST7735_WriteChar>
        x += font.width;
 80016de:	7d3b      	ldrb	r3, [r7, #20]
 80016e0:	461a      	mov	r2, r3
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	4413      	add	r3, r2
 80016e6:	80fb      	strh	r3, [r7, #6]
        str++;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	603b      	str	r3, [r7, #0]
    while(*str) {
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1c7      	bne.n	8001686 <ST7735_WriteString+0x1a>
 80016f6:	e000      	b.n	80016fa <ST7735_WriteString+0x8e>
                break;
 80016f8:	bf00      	nop
    }

    ST7735_Unselect();
 80016fa:	f7ff fdad 	bl	8001258 <ST7735_Unselect>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001708:	b002      	add	sp, #8
 800170a:	4770      	bx	lr
 800170c:	20000204 	.word	0x20000204
 8001710:	20000206 	.word	0x20000206

08001714 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4a37      	ldr	r2, [pc, #220]	@ (8001814 <ST7735_FillRectangle+0x100>)
 8001736:	f9b2 2000 	ldrsh.w	r2, [r2]
 800173a:	4293      	cmp	r3, r2
 800173c:	da66      	bge.n	800180c <ST7735_FillRectangle+0xf8>
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	4a35      	ldr	r2, [pc, #212]	@ (8001818 <ST7735_FillRectangle+0x104>)
 8001742:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001746:	4293      	cmp	r3, r2
 8001748:	da60      	bge.n	800180c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4413      	add	r3, r2
 8001750:	4a30      	ldr	r2, [pc, #192]	@ (8001814 <ST7735_FillRectangle+0x100>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4293      	cmp	r3, r2
 8001758:	dd06      	ble.n	8001768 <ST7735_FillRectangle+0x54>
 800175a:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <ST7735_FillRectangle+0x100>)
 800175c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001760:	b29a      	uxth	r2, r3
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001768:	88ba      	ldrh	r2, [r7, #4]
 800176a:	883b      	ldrh	r3, [r7, #0]
 800176c:	4413      	add	r3, r2
 800176e:	4a2a      	ldr	r2, [pc, #168]	@ (8001818 <ST7735_FillRectangle+0x104>)
 8001770:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001774:	4293      	cmp	r3, r2
 8001776:	dd06      	ble.n	8001786 <ST7735_FillRectangle+0x72>
 8001778:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <ST7735_FillRectangle+0x104>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	b29a      	uxth	r2, r3
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001786:	f7ff fd5b 	bl	8001240 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	b2d8      	uxtb	r0, r3
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	b2d9      	uxtb	r1, r3
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4413      	add	r3, r2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	3b01      	subs	r3, #1
 80017a0:	b2dc      	uxtb	r4, r3
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	883b      	ldrh	r3, [r7, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4622      	mov	r2, r4
 80017b4:	f7ff fdee 	bl	8001394 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017b8:	8c3b      	ldrh	r3, [r7, #32]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	733b      	strb	r3, [r7, #12]
 80017c2:	8c3b      	ldrh	r3, [r7, #32]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2102      	movs	r1, #2
 80017cc:	4813      	ldr	r0, [pc, #76]	@ (800181c <ST7735_FillRectangle+0x108>)
 80017ce:	f002 fb29 	bl	8003e24 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017d2:	883b      	ldrh	r3, [r7, #0]
 80017d4:	80bb      	strh	r3, [r7, #4]
 80017d6:	e013      	b.n	8001800 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	80fb      	strh	r3, [r7, #6]
 80017dc:	e00a      	b.n	80017f4 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80017de:	f107 010c 	add.w	r1, r7, #12
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	2202      	movs	r2, #2
 80017e8:	480d      	ldr	r0, [pc, #52]	@ (8001820 <ST7735_FillRectangle+0x10c>)
 80017ea:	f003 f862 	bl	80048b2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	80fb      	strh	r3, [r7, #6]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f1      	bne.n	80017de <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	80bb      	strh	r3, [r7, #4]
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1e8      	bne.n	80017d8 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8001806:	f7ff fd27 	bl	8001258 <ST7735_Unselect>
 800180a:	e000      	b.n	800180e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800180c:	bf00      	nop
}
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	20000204 	.word	0x20000204
 8001818:	20000206 	.word	0x20000206
 800181c:	40020400 	.word	0x40020400
 8001820:	200002bc 	.word	0x200002bc

08001824 <Dht11_Task>:
xTaskHandle St7735_Task_Hnadler;
xTaskHandle Esp_8266_Task_Hnadler;


void Dht11_Task (void *argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	vTaskDelay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001830:	f006 f994 	bl	8007b5c <vTaskDelay>
	while (1)
	{
		Get_Temp() ;
 8001834:	f000 fc7c 	bl	8002130 <Get_Temp>
		vTaskDelay(1000);
 8001838:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800183c:	f006 f98e 	bl	8007b5c <vTaskDelay>
	{
 8001840:	bf00      	nop
 8001842:	e7f7      	b.n	8001834 <Dht11_Task+0x10>

08001844 <St7735_Task>:
	}
}
*/

void St7735_Task (void *argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af04      	add	r7, sp, #16
 800184a:	6078      	str	r0, [r7, #4]
	ST7735_Init(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f7ff fde9 	bl	8001424 <ST7735_Init>
	vTaskDelay(1000);
 8001852:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001856:	f006 f981 	bl	8007b5c <vTaskDelay>
	LCD_Init();
 800185a:	f000 fc1b 	bl	8002094 <LCD_Init>

	while (1)
	{

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800185e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001862:	4843      	ldr	r0, [pc, #268]	@ (8001970 <St7735_Task+0x12c>)
 8001864:	f002 faf7 	bl	8003e56 <HAL_GPIO_TogglePin>
		char *str = pvPortMalloc(50*sizeof(char));
 8001868:	2032      	movs	r0, #50	@ 0x32
 800186a:	f007 fc87 	bl	800917c <pvPortMalloc>
 800186e:	60f8      	str	r0, [r7, #12]
		sprintf(str, "%dC", Temp);
 8001870:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <St7735_Task+0x130>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4940      	ldr	r1, [pc, #256]	@ (8001978 <St7735_Task+0x134>)
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f008 fd9b 	bl	800a3b4 <siprintf>
		ST7735_WriteString(114, 66, str , Font_11x18,GREEN,BLACK );//color565(48,213,200)
 800187e:	4b3f      	ldr	r3, [pc, #252]	@ (800197c <St7735_Task+0x138>)
 8001880:	2200      	movs	r2, #0
 8001882:	9202      	str	r2, [sp, #8]
 8001884:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001888:	9201      	str	r2, [sp, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	9200      	str	r2, [sp, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	2142      	movs	r1, #66	@ 0x42
 8001894:	2072      	movs	r0, #114	@ 0x72
 8001896:	f7ff fee9 	bl	800166c <ST7735_WriteString>
		sprintf(str, "%d", Hum);
 800189a:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <St7735_Task+0x13c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4938      	ldr	r1, [pc, #224]	@ (8001984 <St7735_Task+0x140>)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f008 fd86 	bl	800a3b4 <siprintf>
		ST7735_WriteString(121, 88, str , Font_11x18,CYAN,BLACK );
 80018a8:	4b34      	ldr	r3, [pc, #208]	@ (800197c <St7735_Task+0x138>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	9202      	str	r2, [sp, #8]
 80018ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80018b2:	9201      	str	r2, [sp, #4]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	2158      	movs	r1, #88	@ 0x58
 80018be:	2079      	movs	r0, #121	@ 0x79
 80018c0:	f7ff fed4 	bl	800166c <ST7735_WriteString>
		ST7735_WriteString(34, 22, Time , Font_11x18,WHITE,BLACK );
 80018c4:	4b2d      	ldr	r3, [pc, #180]	@ (800197c <St7735_Task+0x138>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	9202      	str	r2, [sp, #8]
 80018ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ce:	9201      	str	r2, [sp, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	9200      	str	r2, [sp, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001988 <St7735_Task+0x144>)
 80018d8:	2116      	movs	r1, #22
 80018da:	2022      	movs	r0, #34	@ 0x22
 80018dc:	f7ff fec6 	bl	800166c <ST7735_WriteString>
		ST7735_WriteString(90, 22, AmPm , Font_11x18,WHITE,BLACK);
 80018e0:	4b26      	ldr	r3, [pc, #152]	@ (800197c <St7735_Task+0x138>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	9202      	str	r2, [sp, #8]
 80018e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ea:	9201      	str	r2, [sp, #4]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	9200      	str	r2, [sp, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a26      	ldr	r2, [pc, #152]	@ (800198c <St7735_Task+0x148>)
 80018f4:	2116      	movs	r1, #22
 80018f6:	205a      	movs	r0, #90	@ 0x5a
 80018f8:	f7ff feb8 	bl	800166c <ST7735_WriteString>
		ST7735_WriteString(34, 47, Date , Font_7x10,WHITE,BLACK );
 80018fc:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <St7735_Task+0x14c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	9202      	str	r2, [sp, #8]
 8001902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001906:	9201      	str	r2, [sp, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	9200      	str	r2, [sp, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a21      	ldr	r2, [pc, #132]	@ (8001994 <St7735_Task+0x150>)
 8001910:	212f      	movs	r1, #47	@ 0x2f
 8001912:	2022      	movs	r0, #34	@ 0x22
 8001914:	f7ff feaa 	bl	800166c <ST7735_WriteString>
		sprintf(str, "%d",Light_level );
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <St7735_Task+0x154>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4919      	ldr	r1, [pc, #100]	@ (8001984 <St7735_Task+0x140>)
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f008 fd47 	bl	800a3b4 <siprintf>
		//ST7735_FillRectangle(132, 110, 22, 18, color565(48,213,200));
		ST7735_WriteString(121, 110,str, Font_11x18,YELLOW,BLACK );
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <St7735_Task+0x138>)
 8001928:	2200      	movs	r2, #0
 800192a:	9202      	str	r2, [sp, #8]
 800192c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001930:	9201      	str	r2, [sp, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	9200      	str	r2, [sp, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	216e      	movs	r1, #110	@ 0x6e
 800193c:	2079      	movs	r0, #121	@ 0x79
 800193e:	f7ff fe95 	bl	800166c <ST7735_WriteString>
		ST7735_WriteString(24, 5,  ip, Font_7x10,CYAN,BLACK );
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <St7735_Task+0x14c>)
 8001944:	2200      	movs	r2, #0
 8001946:	9202      	str	r2, [sp, #8]
 8001948:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800194c:	9201      	str	r2, [sp, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <St7735_Task+0x158>)
 8001956:	2105      	movs	r1, #5
 8001958:	2018      	movs	r0, #24
 800195a:	f7ff fe87 	bl	800166c <ST7735_WriteString>
		vPortFree((void*)str);
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f007 fcda 	bl	8009318 <vPortFree>
		vTaskDelay(1000);
 8001964:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001968:	f006 f8f8 	bl	8007b5c <vTaskDelay>
	{
 800196c:	bf00      	nop
 800196e:	e776      	b.n	800185e <St7735_Task+0x1a>
 8001970:	40020800 	.word	0x40020800
 8001974:	20000268 	.word	0x20000268
 8001978:	0800dc74 	.word	0x0800dc74
 800197c:	20000008 	.word	0x20000008
 8001980:	2000026c 	.word	0x2000026c
 8001984:	0800dc78 	.word	0x0800dc78
 8001988:	20000224 	.word	0x20000224
 800198c:	2000022c 	.word	0x2000022c
 8001990:	20000000 	.word	0x20000000
 8001994:	20000230 	.word	0x20000230
 8001998:	20000272 	.word	0x20000272
 800199c:	20000210 	.word	0x20000210

080019a0 <Esp_8266_Task>:
	}
}


void Esp_8266_Task (void *argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	6078      	str	r0, [r7, #4]
	//192.168.1.6Wed:May:202412:56AM
	HAL_UART_Receive_DMA (&huart1, Rx_Byte, 31);
 80019a8:	221f      	movs	r2, #31
 80019aa:	4926      	ldr	r1, [pc, #152]	@ (8001a44 <Esp_8266_Task+0xa4>)
 80019ac:	4826      	ldr	r0, [pc, #152]	@ (8001a48 <Esp_8266_Task+0xa8>)
 80019ae:	f003 ff0e 	bl	80057ce <HAL_UART_Receive_DMA>
	while (1)
	{
		char *str = pvPortMalloc(50*sizeof(char));
 80019b2:	2032      	movs	r0, #50	@ 0x32
 80019b4:	f007 fbe2 	bl	800917c <pvPortMalloc>
 80019b8:	60b8      	str	r0, [r7, #8]
		sprintf(str, "C=%d,H=%d,L=%d ",Temp,Hum,Light_level );
 80019ba:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <Esp_8266_Task+0xac>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <Esp_8266_Task+0xb0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4924      	ldr	r1, [pc, #144]	@ (8001a54 <Esp_8266_Task+0xb4>)
 80019c4:	7809      	ldrb	r1, [r1, #0]
 80019c6:	9100      	str	r1, [sp, #0]
 80019c8:	4923      	ldr	r1, [pc, #140]	@ (8001a58 <Esp_8266_Task+0xb8>)
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f008 fcf2 	bl	800a3b4 <siprintf>
		HAL_UART_Transmit (&huart1, str, 4*sizeof (str), 10);
 80019d0:	230a      	movs	r3, #10
 80019d2:	2210      	movs	r2, #16
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <Esp_8266_Task+0xa8>)
 80019d8:	f003 fe6e 	bl	80056b8 <HAL_UART_Transmit>
		HAL_UART_Transmit (&huart1, "\r\n", sizeof ("\r\n"), 10);
 80019dc:	230a      	movs	r3, #10
 80019de:	2203      	movs	r2, #3
 80019e0:	491e      	ldr	r1, [pc, #120]	@ (8001a5c <Esp_8266_Task+0xbc>)
 80019e2:	4819      	ldr	r0, [pc, #100]	@ (8001a48 <Esp_8266_Task+0xa8>)
 80019e4:	f003 fe68 	bl	80056b8 <HAL_UART_Transmit>
		slice(Rx_Byte, ip, 0, 11);
 80019e8:	230b      	movs	r3, #11
 80019ea:	2200      	movs	r2, #0
 80019ec:	491c      	ldr	r1, [pc, #112]	@ (8001a60 <Esp_8266_Task+0xc0>)
 80019ee:	4815      	ldr	r0, [pc, #84]	@ (8001a44 <Esp_8266_Task+0xa4>)
 80019f0:	f000 fbce 	bl	8002190 <slice>
		slice(Rx_Byte, Date, 11, 23);
 80019f4:	2317      	movs	r3, #23
 80019f6:	220b      	movs	r2, #11
 80019f8:	491a      	ldr	r1, [pc, #104]	@ (8001a64 <Esp_8266_Task+0xc4>)
 80019fa:	4812      	ldr	r0, [pc, #72]	@ (8001a44 <Esp_8266_Task+0xa4>)
 80019fc:	f000 fbc8 	bl	8002190 <slice>
		slice(Rx_Byte, Time, 23, 28);
 8001a00:	231c      	movs	r3, #28
 8001a02:	2217      	movs	r2, #23
 8001a04:	4918      	ldr	r1, [pc, #96]	@ (8001a68 <Esp_8266_Task+0xc8>)
 8001a06:	480f      	ldr	r0, [pc, #60]	@ (8001a44 <Esp_8266_Task+0xa4>)
 8001a08:	f000 fbc2 	bl	8002190 <slice>
		slice(Rx_Byte, AmPm, 28, 31);
 8001a0c:	231f      	movs	r3, #31
 8001a0e:	221c      	movs	r2, #28
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <Esp_8266_Task+0xcc>)
 8001a12:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <Esp_8266_Task+0xa4>)
 8001a14:	f000 fbbc 	bl	8002190 <slice>
		for(int i=0 ; i<=32;i++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e007      	b.n	8001a2e <Esp_8266_Task+0x8e>
				Rx_Byte[i] = 0;
 8001a1e:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <Esp_8266_Task+0xa4>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
		for(int i=0 ; i<=32;i++){
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	ddf4      	ble.n	8001a1e <Esp_8266_Task+0x7e>
			}
		vPortFree((void*)str);
 8001a34:	68b8      	ldr	r0, [r7, #8]
 8001a36:	f007 fc6f 	bl	8009318 <vPortFree>
		vTaskDelay(1000);
 8001a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3e:	f006 f88d 	bl	8007b5c <vTaskDelay>
	{
 8001a42:	e7b6      	b.n	80019b2 <Esp_8266_Task+0x12>
 8001a44:	20000248 	.word	0x20000248
 8001a48:	200003a4 	.word	0x200003a4
 8001a4c:	20000268 	.word	0x20000268
 8001a50:	2000026c 	.word	0x2000026c
 8001a54:	20000272 	.word	0x20000272
 8001a58:	0800dc7c 	.word	0x0800dc7c
 8001a5c:	0800dc8c 	.word	0x0800dc8c
 8001a60:	20000210 	.word	0x20000210
 8001a64:	20000230 	.word	0x20000230
 8001a68:	20000224 	.word	0x20000224
 8001a6c:	2000022c 	.word	0x2000022c

08001a70 <ADC_Task>:
	}
}
void ADC_Task (void *argument)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	while (1)
	{

		HAL_ADC_Start(&hadc1);
 8001a78:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <ADC_Task+0x64>)
 8001a7a:	f000 ffb5 	bl	80029e8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8001a7e:	210a      	movs	r1, #10
 8001a80:	4814      	ldr	r0, [pc, #80]	@ (8001ad4 <ADC_Task+0x64>)
 8001a82:	f001 f898 	bl	8002bb6 <HAL_ADC_PollForConversion>
		ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8001a86:	4813      	ldr	r0, [pc, #76]	@ (8001ad4 <ADC_Task+0x64>)
 8001a88:	f001 f920 	bl	8002ccc <HAL_ADC_GetValue>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <ADC_Task+0x68>)
 8001a92:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8001a94:	480f      	ldr	r0, [pc, #60]	@ (8001ad4 <ADC_Task+0x64>)
 8001a96:	f001 f85b 	bl	8002b50 <HAL_ADC_Stop>
		if (ADC_VAL>1700)
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <ADC_Task+0x68>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d907      	bls.n	8001ab6 <ADC_Task+0x46>
		{
			ADC_VAL = 1700;
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <ADC_Task+0x68>)
 8001aa8:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001aac:	801a      	strh	r2, [r3, #0]
			Light_level = 100;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <ADC_Task+0x6c>)
 8001ab0:	2264      	movs	r2, #100	@ 0x64
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e009      	b.n	8001aca <ADC_Task+0x5a>
		}
		else
		{
			Light_level = (uint8_t)((ADC_VAL/17));
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <ADC_Task+0x68>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <ADC_Task+0x70>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <ADC_Task+0x6c>)
 8001ac8:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelay(1000);
 8001aca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ace:	f006 f845 	bl	8007b5c <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 8001ad2:	e7d1      	b.n	8001a78 <ADC_Task+0x8>
 8001ad4:	20000274 	.word	0x20000274
 8001ad8:	20000270 	.word	0x20000270
 8001adc:	20000272 	.word	0x20000272
 8001ae0:	f0f0f0f1 	.word	0xf0f0f0f1

08001ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aea:	f000 fed3 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aee:	f000 f881 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af2:	f000 fa59 	bl	8001fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001af6:	f000 fa37 	bl	8001f68 <MX_DMA_Init>
  MX_SPI1_Init();
 8001afa:	f000 f937 	bl	8001d6c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001afe:	f000 f96d 	bl	8001ddc <MX_TIM1_Init>
  MX_ADC1_Init();
 8001b02:	f000 f8e1 	bl	8001cc8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b06:	f000 fa05 	bl	8001f14 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001b0a:	f000 f9b7 	bl	8001e7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(Dht11_Task, "Dht11", 128, NULL, 1, &Dht11_Task_Hnadler);
 8001b0e:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <main+0xc8>)
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	4925      	ldr	r1, [pc, #148]	@ (8001bb0 <main+0xcc>)
 8001b1c:	4825      	ldr	r0, [pc, #148]	@ (8001bb4 <main+0xd0>)
 8001b1e:	f005 fed7 	bl	80078d0 <xTaskCreate>
  //xTaskCreate(Time_Task, "Time", 128, NULL, 1, &Dht11_Task_Hnadler);
  xTaskCreate(ADC_Task, "ADC", 128, NULL, 1, &ADC_Task_Hnadler);
 8001b22:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <main+0xd4>)
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	2301      	movs	r3, #1
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	4923      	ldr	r1, [pc, #140]	@ (8001bbc <main+0xd8>)
 8001b30:	4823      	ldr	r0, [pc, #140]	@ (8001bc0 <main+0xdc>)
 8001b32:	f005 fecd 	bl	80078d0 <xTaskCreate>
  xTaskCreate(St7735_Task, "St7735", 128, NULL, 2, &St7735_Task_Hnadler);
 8001b36:	4b23      	ldr	r3, [pc, #140]	@ (8001bc4 <main+0xe0>)
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	4921      	ldr	r1, [pc, #132]	@ (8001bc8 <main+0xe4>)
 8001b44:	4821      	ldr	r0, [pc, #132]	@ (8001bcc <main+0xe8>)
 8001b46:	f005 fec3 	bl	80078d0 <xTaskCreate>
  xTaskCreate(Esp_8266_Task, "Esp_8266", 128, NULL, 1, &Esp_8266_Task_Hnadler);
 8001b4a:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <main+0xec>)
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	2280      	movs	r2, #128	@ 0x80
 8001b56:	491f      	ldr	r1, [pc, #124]	@ (8001bd4 <main+0xf0>)
 8001b58:	481f      	ldr	r0, [pc, #124]	@ (8001bd8 <main+0xf4>)
 8001b5a:	f005 feb9 	bl	80078d0 <xTaskCreate>

  HAL_TIM_Base_Start(&htim1);
 8001b5e:	481f      	ldr	r0, [pc, #124]	@ (8001bdc <main+0xf8>)
 8001b60:	f003 f916 	bl	8004d90 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001b64:	481e      	ldr	r0, [pc, #120]	@ (8001be0 <main+0xfc>)
 8001b66:	f003 f96d 	bl	8004e44 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <main+0x100>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <main+0x100>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0220 	orr.w	r2, r2, #32
 8001b78:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim2,TIM2_IRQn);
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <main+0xfc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <main+0xfc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 021c 	orr.w	r2, r2, #28
 8001b88:	60da      	str	r2, [r3, #12]
  vTaskStartScheduler();
 8001b8a:	f006 f81d 	bl	8007bc8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b8e:	f004 ff65 	bl	8006a5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <main+0x104>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	4815      	ldr	r0, [pc, #84]	@ (8001bec <main+0x108>)
 8001b98:	f004 ffaa 	bl	8006af0 <osThreadNew>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <main+0x10c>)
 8001ba0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ba2:	f004 ff7f 	bl	8006aa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba6:	bf00      	nop
 8001ba8:	e7fd      	b.n	8001ba6 <main+0xc2>
 8001baa:	bf00      	nop
 8001bac:	20000450 	.word	0x20000450
 8001bb0:	0800dc90 	.word	0x0800dc90
 8001bb4:	08001825 	.word	0x08001825
 8001bb8:	20000454 	.word	0x20000454
 8001bbc:	0800dc98 	.word	0x0800dc98
 8001bc0:	08001a71 	.word	0x08001a71
 8001bc4:	20000458 	.word	0x20000458
 8001bc8:	0800dc9c 	.word	0x0800dc9c
 8001bcc:	08001845 	.word	0x08001845
 8001bd0:	2000045c 	.word	0x2000045c
 8001bd4:	0800dca4 	.word	0x0800dca4
 8001bd8:	080019a1 	.word	0x080019a1
 8001bdc:	20000314 	.word	0x20000314
 8001be0:	2000035c 	.word	0x2000035c
 8001be4:	200003a4 	.word	0x200003a4
 8001be8:	0800f22c 	.word	0x0800f22c
 8001bec:	08002201 	.word	0x08002201
 8001bf0:	2000044c 	.word	0x2000044c

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	@ 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2230      	movs	r2, #48	@ 0x30
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f008 fc39 	bl	800a47a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b28      	ldr	r3, [pc, #160]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	4a27      	ldr	r2, [pc, #156]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c28:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <SystemClock_Config+0xd0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c40:	4a20      	ldr	r2, [pc, #128]	@ (8001cc4 <SystemClock_Config+0xd0>)
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <SystemClock_Config+0xd0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c60:	2302      	movs	r3, #2
 8001c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c6c:	2354      	movs	r3, #84	@ 0x54
 8001c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c74:	2304      	movs	r3, #4
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 f905 	bl	8003e8c <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c88:	f000 fad4 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 fb67 	bl	800437c <HAL_RCC_ClockConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cb4:	f000 fabe 	bl	8002234 <Error_Handler>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3750      	adds	r7, #80	@ 0x50
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001cdc:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <MX_ADC1_Init+0x9c>)
 8001cde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001ce2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ce6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d0a:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <MX_ADC1_Init+0xa0>)
 8001d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d28:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d2a:	f000 fe19 	bl	8002960 <HAL_ADC_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d34:	f000 fa7e 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <MX_ADC1_Init+0x98>)
 8001d4a:	f000 ffcd 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d54:	f000 fa6e 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000274 	.word	0x20000274
 8001d64:	40012000 	.word	0x40012000
 8001d68:	0f000001 	.word	0x0f000001

08001d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d72:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <MX_SPI1_Init+0x6c>)
 8001d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d84:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001da2:	2208      	movs	r2, #8
 8001da4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001dba:	220a      	movs	r2, #10
 8001dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MX_SPI1_Init+0x68>)
 8001dc0:	f002 fcee 	bl	80047a0 <HAL_SPI_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001dca:	f000 fa33 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200002bc 	.word	0x200002bc
 8001dd8:	40013000 	.word	0x40013000

08001ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e78 <MX_TIM1_Init+0x9c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e00:	2254      	movs	r2, #84	@ 0x54
 8001e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e24:	4813      	ldr	r0, [pc, #76]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e26:	f002 ff63 	bl	8004cf0 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e30:	f000 fa00 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e42:	f003 f951 	bl	80050e8 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e4c:	f000 f9f2 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <MX_TIM1_Init+0x98>)
 8001e5e:	f003 fb59 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e68:	f000 f9e4 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000314 	.word	0x20000314
 8001e78:	40010000 	.word	0x40010000

08001e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001e9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001ea2:	2253      	movs	r2, #83	@ 0x53
 8001ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001eae:	f06f 0201 	mvn.w	r2, #1
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ec0:	4813      	ldr	r0, [pc, #76]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001ec2:	f002 ff15 	bl	8004cf0 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ecc:	f000 f9b2 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001ede:	f003 f903 	bl	80050e8 <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f000 f9a4 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_TIM2_Init+0x94>)
 8001efa:	f003 fb0b 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f04:	f000 f996 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000035c 	.word	0x2000035c

08001f14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <MX_USART1_UART_Init+0x50>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f4c:	f003 fb64 	bl	8005618 <HAL_UART_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f56:	f000 f96d 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003a4 	.word	0x200003a4
 8001f64:	40011000 	.word	0x40011000

08001f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_DMA_Init+0x3c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <MX_DMA_Init+0x3c>)
 8001f78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_DMA_Init+0x3c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	203a      	movs	r0, #58	@ 0x3a
 8001f90:	f001 f980 	bl	8003294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f94:	203a      	movs	r0, #58	@ 0x3a
 8001f96:	f001 f999 	bl	80032cc <HAL_NVIC_EnableIRQ>

}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b31      	ldr	r3, [pc, #196]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a30      	ldr	r2, [pc, #192]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8001fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b1c      	ldr	r3, [pc, #112]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a1b      	ldr	r2, [pc, #108]	@ (8002088 <MX_GPIO_Init+0xe0>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <MX_GPIO_Init+0xe0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_led_GPIO_Port, Blue_led_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002034:	4815      	ldr	r0, [pc, #84]	@ (800208c <MX_GPIO_Init+0xe4>)
 8002036:	f001 fef5 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	2107      	movs	r1, #7
 800203e:	4814      	ldr	r0, [pc, #80]	@ (8002090 <MX_GPIO_Init+0xe8>)
 8002040:	f001 fef0 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_led_Pin */
  GPIO_InitStruct.Pin = Blue_led_Pin;
 8002044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204a:	2301      	movs	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Blue_led_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	480b      	ldr	r0, [pc, #44]	@ (800208c <MX_GPIO_Init+0xe4>)
 800205e:	f001 fd45 	bl	8003aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002062:	2307      	movs	r3, #7
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	@ (8002090 <MX_GPIO_Init+0xe8>)
 800207a:	f001 fd37 	bl	8003aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	@ 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40020800 	.word	0x40020800
 8002090:	40020400 	.word	0x40020400

08002094 <LCD_Init>:

/* USER CODE BEGIN 4 */
void LCD_Init(){
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af04      	add	r7, sp, #16
	fillScreen(BLACK );
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff f8b6 	bl	800120c <fillScreen>
	ST7735_WriteString(5, 4,  "Ip:", Font_7x10,CYAN,BLACK );
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <LCD_Init+0x84>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	9202      	str	r2, [sp, #8]
 80020a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80020aa:	9201      	str	r2, [sp, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	9200      	str	r2, [sp, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1a      	ldr	r2, [pc, #104]	@ (800211c <LCD_Init+0x88>)
 80020b4:	2104      	movs	r1, #4
 80020b6:	2005      	movs	r0, #5
 80020b8:	f7ff fad8 	bl	800166c <ST7735_WriteString>
	//ST7735_WriteString(5, 22, "Time:", Font_11x18,WHITE,color565(48,213,200) );
	ST7735_WriteString(5, 66, "Temp    :", Font_11x18,GREEN,BLACK );
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <LCD_Init+0x8c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	9202      	str	r2, [sp, #8]
 80020c2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80020c6:	9201      	str	r2, [sp, #4]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	9200      	str	r2, [sp, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a15      	ldr	r2, [pc, #84]	@ (8002124 <LCD_Init+0x90>)
 80020d0:	2142      	movs	r1, #66	@ 0x42
 80020d2:	2005      	movs	r0, #5
 80020d4:	f7ff faca 	bl	800166c <ST7735_WriteString>
	ST7735_WriteString(5, 88, "Humanity:%", Font_11x18,CYAN,BLACK );
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <LCD_Init+0x8c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	9202      	str	r2, [sp, #8]
 80020de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80020e2:	9201      	str	r2, [sp, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	9200      	str	r2, [sp, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <LCD_Init+0x94>)
 80020ec:	2158      	movs	r1, #88	@ 0x58
 80020ee:	2005      	movs	r0, #5
 80020f0:	f7ff fabc 	bl	800166c <ST7735_WriteString>
	ST7735_WriteString(5, 110, "Light   :%", Font_11x18,YELLOW,BLACK );
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <LCD_Init+0x8c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	9202      	str	r2, [sp, #8]
 80020fa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a09      	ldr	r2, [pc, #36]	@ (800212c <LCD_Init+0x98>)
 8002108:	216e      	movs	r1, #110	@ 0x6e
 800210a:	2005      	movs	r0, #5
 800210c:	f7ff faae 	bl	800166c <ST7735_WriteString>
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000
 800211c:	0800dcb0 	.word	0x0800dcb0
 8002120:	20000008 	.word	0x20000008
 8002124:	0800dcb4 	.word	0x0800dcb4
 8002128:	0800dcc0 	.word	0x0800dcc0
 800212c:	0800dccc 	.word	0x0800dccc

08002130 <Get_Temp>:
void Get_Temp()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
	Mesuerement_t *Mes;
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	int16_t SUM, RH, TEMP;
	uint8_t Presence = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	71fb      	strb	r3, [r7, #7]
	DHT11_Start();
 800213a:	f7fe ffb1 	bl	80010a0 <DHT11_Start>
	Presence = Check_Response();
 800213e:	f7fe ffcb 	bl	80010d8 <Check_Response>
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
	Rh_byte1 = DHT11_Read ();
 8002146:	f7fe fff9 	bl	800113c <DHT11_Read>
 800214a:	4603      	mov	r3, r0
 800214c:	71bb      	strb	r3, [r7, #6]
	Rh_byte2 = DHT11_Read ();
 800214e:	f7fe fff5 	bl	800113c <DHT11_Read>
 8002152:	4603      	mov	r3, r0
 8002154:	717b      	strb	r3, [r7, #5]
	Temp_byte1 = DHT11_Read ();
 8002156:	f7fe fff1 	bl	800113c <DHT11_Read>
 800215a:	4603      	mov	r3, r0
 800215c:	713b      	strb	r3, [r7, #4]
	Temp_byte2 = DHT11_Read ();
 800215e:	f7fe ffed 	bl	800113c <DHT11_Read>
 8002162:	4603      	mov	r3, r0
 8002164:	70fb      	strb	r3, [r7, #3]
    SUM = DHT11_Read();
 8002166:	f7fe ffe9 	bl	800113c <DHT11_Read>
 800216a:	4603      	mov	r3, r0
 800216c:	803b      	strh	r3, [r7, #0]
    Temp = Temp_byte1;
 800216e:	793b      	ldrb	r3, [r7, #4]
 8002170:	461a      	mov	r2, r3
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <Get_Temp+0x58>)
 8002174:	601a      	str	r2, [r3, #0]
    Hum = Rh_byte1;
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	461a      	mov	r2, r3
 800217a:	4b04      	ldr	r3, [pc, #16]	@ (800218c <Get_Temp+0x5c>)
 800217c:	601a      	str	r2, [r3, #0]
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000268 	.word	0x20000268
 800218c:	2000026c 	.word	0x2000026c

08002190 <slice>:
	   hour = 0;
	}

}
*/
void slice(const char* str, char* result, size_t start, size_t end) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
    strncpy(result, str + start, end - start);
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	18d1      	adds	r1, r2, r3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	68b8      	ldr	r0, [r7, #8]
 80021ae:	f008 f96c 	bl	800a48a <strncpy>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // toggle PC13
 80021c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c8:	4803      	ldr	r0, [pc, #12]	@ (80021d8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80021ca:	f001 fe44 	bl	8003e56 <HAL_GPIO_TogglePin>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40020800 	.word	0x40020800

080021dc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart1, Rx_Byte, 31);
 80021e4:	221f      	movs	r2, #31
 80021e6:	4904      	ldr	r1, [pc, #16]	@ (80021f8 <HAL_UART_RxCpltCallback+0x1c>)
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <HAL_UART_RxCpltCallback+0x20>)
 80021ea:	f003 faf0 	bl	80057ce <HAL_UART_Receive_DMA>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000248 	.word	0x20000248
 80021fc:	200003a4 	.word	0x200003a4

08002200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002208:	2001      	movs	r0, #1
 800220a:	f004 fd03 	bl	8006c14 <osDelay>
 800220e:	e7fb      	b.n	8002208 <StartDefaultTask+0x8>

08002210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002222:	f000 fb59 	bl	80028d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40014400 	.word	0x40014400

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <Error_Handler+0x8>

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_MspInit+0x54>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a11      	ldr	r2, [pc, #68]	@ (8002294 <HAL_MspInit+0x54>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_MspInit+0x54>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_MspInit+0x54>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <HAL_MspInit+0x54>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_MspInit+0x54>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	210f      	movs	r1, #15
 8002282:	f06f 0001 	mvn.w	r0, #1
 8002286:	f001 f805 	bl	8003294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a17      	ldr	r2, [pc, #92]	@ (8002314 <HAL_ADC_MspInit+0x7c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d127      	bne.n	800230a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <HAL_ADC_MspInit+0x80>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a15      	ldr	r2, [pc, #84]	@ (8002318 <HAL_ADC_MspInit+0x80>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_ADC_MspInit+0x80>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_ADC_MspInit+0x80>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a0e      	ldr	r2, [pc, #56]	@ (8002318 <HAL_ADC_MspInit+0x80>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <HAL_ADC_MspInit+0x80>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f2:	2301      	movs	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f6:	2303      	movs	r3, #3
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	@ (800231c <HAL_ADC_MspInit+0x84>)
 8002306:	f001 fbf1 	bl	8003aec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	@ 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40012000 	.word	0x40012000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	@ (80023a4 <HAL_SPI_MspInit+0x84>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d12b      	bne.n	800239a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <HAL_SPI_MspInit+0x88>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <HAL_SPI_MspInit+0x88>)
 800234c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002350:	6453      	str	r3, [r2, #68]	@ 0x44
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_SPI_MspInit+0x88>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_SPI_MspInit+0x88>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_SPI_MspInit+0x88>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_SPI_MspInit+0x88>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800237a:	23a0      	movs	r3, #160	@ 0xa0
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800238a:	2305      	movs	r3, #5
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	@ (80023ac <HAL_SPI_MspInit+0x8c>)
 8002396:	f001 fba9 	bl	8003aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	@ 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40013000 	.word	0x40013000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000

080023b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a18      	ldr	r2, [pc, #96]	@ (8002420 <HAL_TIM_Base_MspInit+0x70>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d116      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_TIM_Base_MspInit+0x74>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a16      	ldr	r2, [pc, #88]	@ (8002424 <HAL_TIM_Base_MspInit+0x74>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_TIM_Base_MspInit+0x74>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	210f      	movs	r1, #15
 80023e2:	2019      	movs	r0, #25
 80023e4:	f000 ff56 	bl	8003294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023e8:	2019      	movs	r0, #25
 80023ea:	f000 ff6f 	bl	80032cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023ee:	e012      	b.n	8002416 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f8:	d10d      	bne.n	8002416 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_TIM_Base_MspInit+0x74>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a08      	ldr	r2, [pc, #32]	@ (8002424 <HAL_TIM_Base_MspInit+0x74>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_TIM_Base_MspInit+0x74>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40010000 	.word	0x40010000
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a35      	ldr	r2, [pc, #212]	@ (800251c <HAL_UART_MspInit+0xf4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d163      	bne.n	8002512 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b34      	ldr	r3, [pc, #208]	@ (8002520 <HAL_UART_MspInit+0xf8>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	4a33      	ldr	r2, [pc, #204]	@ (8002520 <HAL_UART_MspInit+0xf8>)
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	6453      	str	r3, [r2, #68]	@ 0x44
 800245a:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <HAL_UART_MspInit+0xf8>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <HAL_UART_MspInit+0xf8>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <HAL_UART_MspInit+0xf8>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <HAL_UART_MspInit+0xf8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002482:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002494:	2307      	movs	r3, #7
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	4821      	ldr	r0, [pc, #132]	@ (8002524 <HAL_UART_MspInit+0xfc>)
 80024a0:	f001 fb24 	bl	8003aec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80024a4:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <HAL_UART_MspInit+0x104>)
 80024a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c6:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024da:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024e6:	4810      	ldr	r0, [pc, #64]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024e8:	f000 fefe 	bl	80032e8 <HAL_DMA_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024f2:	f7ff fe9f 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <HAL_UART_MspInit+0x100>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	210f      	movs	r1, #15
 8002506:	2025      	movs	r0, #37	@ 0x25
 8002508:	f000 fec4 	bl	8003294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800250c:	2025      	movs	r0, #37	@ 0x25
 800250e:	f000 fedd 	bl	80032cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3728      	adds	r7, #40	@ 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40011000 	.word	0x40011000
 8002520:	40023800 	.word	0x40023800
 8002524:	40020000 	.word	0x40020000
 8002528:	200003ec 	.word	0x200003ec
 800252c:	40026440 	.word	0x40026440

08002530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	@ 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	4b2e      	ldr	r3, [pc, #184]	@ (8002600 <HAL_InitTick+0xd0>)
 8002546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002548:	4a2d      	ldr	r2, [pc, #180]	@ (8002600 <HAL_InitTick+0xd0>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800254e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002550:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <HAL_InitTick+0xd0>)
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f002 f8e8 	bl	800473c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800256c:	f002 f8d2 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8002570:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	4a23      	ldr	r2, [pc, #140]	@ (8002604 <HAL_InitTick+0xd4>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	3b01      	subs	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002580:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <HAL_InitTick+0xd8>)
 8002582:	4a22      	ldr	r2, [pc, #136]	@ (800260c <HAL_InitTick+0xdc>)
 8002584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_InitTick+0xd8>)
 8002588:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800258c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800258e:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <HAL_InitTick+0xd8>)
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <HAL_InitTick+0xd8>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_InitTick+0xd8>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_InitTick+0xd8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80025a6:	4818      	ldr	r0, [pc, #96]	@ (8002608 <HAL_InitTick+0xd8>)
 80025a8:	f002 fba2 	bl	8004cf0 <HAL_TIM_Base_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80025b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11b      	bne.n	80025f2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80025ba:	4813      	ldr	r0, [pc, #76]	@ (8002608 <HAL_InitTick+0xd8>)
 80025bc:	f002 fc42 	bl	8004e44 <HAL_TIM_Base_Start_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80025c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d111      	bne.n	80025f2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025ce:	2019      	movs	r0, #25
 80025d0:	f000 fe7c 	bl	80032cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	d808      	bhi.n	80025ec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80025da:	2200      	movs	r2, #0
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	2019      	movs	r0, #25
 80025e0:	f000 fe58 	bl	8003294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_InitTick+0xe0>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e002      	b.n	80025f2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3730      	adds	r7, #48	@ 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	431bde83 	.word	0x431bde83
 8002608:	20000460 	.word	0x20000460
 800260c:	40014400 	.word	0x40014400
 8002610:	20000014 	.word	0x20000014

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <NMI_Handler+0x4>

0800261c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <MemManage_Handler+0x4>

0800262c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <BusFault_Handler+0x4>

08002634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <UsageFault_Handler+0x4>

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002650:	4803      	ldr	r0, [pc, #12]	@ (8002660 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002652:	f002 fc59 	bl	8004f08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002656:	4803      	ldr	r0, [pc, #12]	@ (8002664 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002658:	f002 fc56 	bl	8004f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000314 	.word	0x20000314
 8002664:	20000460 	.word	0x20000460

08002668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <USART1_IRQHandler+0x10>)
 800266e:	f003 f8d3 	bl	8005818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //192.168.1.6Sunday, May 19, 20248:35 PM
  /* USER CODE END USART1_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200003a4 	.word	0x200003a4

0800267c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <DMA2_Stream2_IRQHandler+0x10>)
 8002682:	f000 ffc9 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200003ec 	.word	0x200003ec

08002690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_kill>:

int _kill(int pid, int sig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026aa:	f007 ff4b 	bl	800a544 <__errno>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2216      	movs	r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
  return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_exit>:

void _exit (int status)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffe7 	bl	80026a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d2:	bf00      	nop
 80026d4:	e7fd      	b.n	80026d2 <_exit+0x12>

080026d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e00a      	b.n	80026fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e8:	f3af 8000 	nop.w
 80026ec:	4601      	mov	r1, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	60ba      	str	r2, [r7, #8]
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	dbf0      	blt.n	80026e8 <_read+0x12>
  }

  return len;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e009      	b.n	8002736 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbf1      	blt.n	8002722 <_write+0x12>
  }
  return len;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_close>:

int _close(int file)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002770:	605a      	str	r2, [r3, #4]
  return 0;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_isatty>:

int _isatty(int file)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	@ (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f007 feb0 	bl	800a544 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20010000 	.word	0x20010000
 8002810:	00000400 	.word	0x00000400
 8002814:	200004a8 	.word	0x200004a8
 8002818:	20004f50 	.word	0x20004f50

0800281c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002878 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002844:	f7ff ffea 	bl	800281c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	@ (800287c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	@ (8002880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	@ (800288c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f007 fe6f 	bl	800a550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7ff f937 	bl	8001ae4 <main>
  bx  lr    
 8002876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002884:	0800f6b0 	.word	0x0800f6b0
  ldr r2, =_sbss
 8002888:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800288c:	20004f4c 	.word	0x20004f4c

08002890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <HAL_Init+0x40>)
 800289e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <HAL_Init+0x40>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b0:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <HAL_Init+0x40>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 fcde 	bl	800327e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c2:	200f      	movs	r0, #15
 80028c4:	f7ff fe34 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c8:	f7ff fcba 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00

080028d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_IncTick+0x20>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_IncTick+0x24>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <HAL_IncTick+0x24>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000018 	.word	0x20000018
 80028fc:	200004ac 	.word	0x200004ac

08002900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_GetTick+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200004ac 	.word	0x200004ac

08002918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff ffee 	bl	8002900 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d005      	beq.n	800293e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_Delay+0x44>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293e:	bf00      	nop
 8002940:	f7ff ffde 	bl	8002900 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d8f7      	bhi.n	8002940 <HAL_Delay+0x28>
  {
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000018 	.word	0x20000018

08002960 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e033      	b.n	80029de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fc8a 	bl	8002298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029a6:	f023 0302 	bic.w	r3, r3, #2
 80029aa:	f043 0202 	orr.w	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 faba 	bl	8002f2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80029ce:	e001      	b.n	80029d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Start+0x1a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e097      	b.n	8002b32 <HAL_ADC_Start+0x14a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d018      	beq.n	8002a4a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a28:	4b45      	ldr	r3, [pc, #276]	@ (8002b40 <HAL_ADC_Start+0x158>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a45      	ldr	r2, [pc, #276]	@ (8002b44 <HAL_ADC_Start+0x15c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9a      	lsrs	r2, r3, #18
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a3c:	e002      	b.n	8002a44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d15f      	bne.n	8002b18 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	f023 0206 	bic.w	r2, r3, #6
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ab4:	4b24      	ldr	r3, [pc, #144]	@ (8002b48 <HAL_ADC_Start+0x160>)
 8002ab6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d129      	bne.n	8002b30 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e020      	b.n	8002b30 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a16      	ldr	r2, [pc, #88]	@ (8002b4c <HAL_ADC_Start+0x164>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d11b      	bne.n	8002b30 <HAL_ADC_Start+0x148>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d114      	bne.n	8002b30 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	e00b      	b.n	8002b30 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0210 	orr.w	r2, r3, #16
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	f043 0201 	orr.w	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000010 	.word	0x20000010
 8002b44:	431bde83 	.word	0x431bde83
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	40012000 	.word	0x40012000

08002b50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_Stop+0x16>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e021      	b.n	8002baa <HAL_ADC_Stop+0x5a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd2:	d113      	bne.n	8002bfc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e063      	b.n	8002cc4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfc:	f7ff fe80 	bl	8002900 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c02:	e021      	b.n	8002c48 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0a:	d01d      	beq.n	8002c48 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_ADC_PollForConversion+0x6c>
 8002c12:	f7ff fe75 	bl	8002900 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d212      	bcs.n	8002c48 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d00b      	beq.n	8002c48 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e03d      	b.n	8002cc4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d1d6      	bne.n	8002c04 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0212 	mvn.w	r2, #18
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d123      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11f      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d111      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e105      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x228>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d925      	bls.n	8002d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43da      	mvns	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	400a      	ands	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68d9      	ldr	r1, [r3, #12]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4403      	add	r3, r0
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	409a      	lsls	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e022      	b.n	8002da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6919      	ldr	r1, [r3, #16]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	2207      	movs	r2, #7
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	400a      	ands	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6919      	ldr	r1, [r3, #16]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4403      	add	r3, r0
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d824      	bhi.n	8002df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b05      	subs	r3, #5
 8002dc0:	221f      	movs	r2, #31
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	400a      	ands	r2, r1
 8002dce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b05      	subs	r3, #5
 8002dea:	fa00 f203 	lsl.w	r2, r0, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002df6:	e04c      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d824      	bhi.n	8002e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b23      	subs	r3, #35	@ 0x23
 8002e12:	221f      	movs	r2, #31
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	400a      	ands	r2, r1
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b23      	subs	r3, #35	@ 0x23
 8002e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e48:	e023      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b41      	subs	r3, #65	@ 0x41
 8002e5c:	221f      	movs	r2, #31
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b41      	subs	r3, #65	@ 0x41
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <HAL_ADC_ConfigChannel+0x234>)
 8002e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	@ (8002f20 <HAL_ADC_ConfigChannel+0x238>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d109      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b12      	cmp	r3, #18
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <HAL_ADC_ConfigChannel+0x238>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d123      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x21e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d003      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x1e6>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b11      	cmp	r3, #17
 8002ecc:	d11b      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d111      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <HAL_ADC_ConfigChannel+0x23c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a10      	ldr	r2, [pc, #64]	@ (8002f28 <HAL_ADC_ConfigChannel+0x240>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	0c9a      	lsrs	r2, r3, #18
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ef8:	e002      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f9      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	40012000 	.word	0x40012000
 8002f24:	20000010 	.word	0x20000010
 8002f28:	431bde83 	.word	0x431bde83

08002f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f34:	4b79      	ldr	r3, [pc, #484]	@ (800311c <ADC_Init+0x1f0>)
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbe:	4a58      	ldr	r2, [pc, #352]	@ (8003120 <ADC_Init+0x1f4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d022      	beq.n	800300a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6899      	ldr	r1, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	e00f      	b.n	800302a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003028:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0202 	bic.w	r2, r2, #2
 8003038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7e1b      	ldrb	r3, [r3, #24]
 8003044:	005a      	lsls	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003066:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	3b01      	subs	r3, #1
 8003084:	035a      	lsls	r2, r3, #13
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	e007      	b.n	80030a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800309e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80030ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	051a      	lsls	r2, r3, #20
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030e2:	025a      	lsls	r2, r3, #9
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6899      	ldr	r1, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	029a      	lsls	r2, r3, #10
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40012300 	.word	0x40012300
 8003120:	0f000001 	.word	0x0f000001

08003124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003140:	4013      	ands	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800314c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003156:	4a04      	ldr	r2, [pc, #16]	@ (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	60d3      	str	r3, [r2, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <__NVIC_GetPriorityGrouping+0x18>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f003 0307 	and.w	r3, r3, #7
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	2b00      	cmp	r3, #0
 8003198:	db0b      	blt.n	80031b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4907      	ldr	r1, [pc, #28]	@ (80031c0 <__NVIC_EnableIRQ+0x38>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2001      	movs	r0, #1
 80031aa:	fa00 f202 	lsl.w	r2, r0, r2
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db0a      	blt.n	80031ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	490c      	ldr	r1, [pc, #48]	@ (8003210 <__NVIC_SetPriority+0x4c>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	440b      	add	r3, r1
 80031e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ec:	e00a      	b.n	8003204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4908      	ldr	r1, [pc, #32]	@ (8003214 <__NVIC_SetPriority+0x50>)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3b04      	subs	r3, #4
 80031fc:	0112      	lsls	r2, r2, #4
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	440b      	add	r3, r1
 8003202:	761a      	strb	r2, [r3, #24]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000e100 	.word	0xe000e100
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	@ 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf28      	it	cs
 8003236:	2304      	movcs	r3, #4
 8003238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	2b06      	cmp	r3, #6
 8003240:	d902      	bls.n	8003248 <NVIC_EncodePriority+0x30>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3b03      	subs	r3, #3
 8003246:	e000      	b.n	800324a <NVIC_EncodePriority+0x32>
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	401a      	ands	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	43d9      	mvns	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	4313      	orrs	r3, r2
         );
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff4c 	bl	8003124 <__NVIC_SetPriorityGrouping>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a6:	f7ff ff61 	bl	800316c <__NVIC_GetPriorityGrouping>
 80032aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	6978      	ldr	r0, [r7, #20]
 80032b2:	f7ff ffb1 	bl	8003218 <NVIC_EncodePriority>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ff80 	bl	80031c4 <__NVIC_SetPriority>
}
 80032c4:	bf00      	nop
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff54 	bl	8003188 <__NVIC_EnableIRQ>
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff fb04 	bl	8002900 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e099      	b.n	8003438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003324:	e00f      	b.n	8003346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003326:	f7ff faeb 	bl	8002900 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b05      	cmp	r3, #5
 8003332:	d908      	bls.n	8003346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e078      	b.n	8003438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e8      	bne.n	8003326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_DMA_Init+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d117      	bne.n	800340a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fb01 	bl	80039f4 <DMA_CheckFifoParam>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003406:	2301      	movs	r3, #1
 8003408:	e016      	b.n	8003438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fab8 	bl	8003988 <DMA_CalcBaseAndBitshift>
 8003418:	4603      	mov	r3, r0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003420:	223f      	movs	r2, #63	@ 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	f010803f 	.word	0xf010803f

08003444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_DMA_Start_IT+0x26>
 8003466:	2302      	movs	r3, #2
 8003468:	e040      	b.n	80034ec <HAL_DMA_Start_IT+0xa8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d12f      	bne.n	80034de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fa4a 	bl	800392c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0216 	orr.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0208 	orr.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e005      	b.n	80034ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003502:	f7ff f9fd 	bl	8002900 <HAL_GetTick>
 8003506:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2280      	movs	r2, #128	@ 0x80
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e052      	b.n	80035cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0216 	bic.w	r2, r2, #22
 8003534:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003544:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_DMA_Abort+0x62>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0208 	bic.w	r2, r2, #8
 8003564:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003576:	e013      	b.n	80035a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003578:	f7ff f9c2 	bl	8002900 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b05      	cmp	r3, #5
 8003584:	d90c      	bls.n	80035a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e015      	b.n	80035cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e4      	bne.n	8003578 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b2:	223f      	movs	r2, #63	@ 0x3f
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d004      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2280      	movs	r2, #128	@ 0x80
 80035ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00c      	b.n	800360c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2205      	movs	r2, #5
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003624:	4b8e      	ldr	r3, [pc, #568]	@ (8003860 <HAL_DMA_IRQHandler+0x248>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a8e      	ldr	r2, [pc, #568]	@ (8003864 <HAL_DMA_IRQHandler+0x24c>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	2208      	movs	r2, #8
 8003644:	409a      	lsls	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01a      	beq.n	8003684 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	2208      	movs	r2, #8
 8003672:	409a      	lsls	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003688:	2201      	movs	r2, #1
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	2201      	movs	r2, #1
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036be:	2204      	movs	r2, #4
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	2204      	movs	r2, #4
 80036de:	409a      	lsls	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	2210      	movs	r2, #16
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d043      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03c      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003712:	2210      	movs	r2, #16
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d018      	beq.n	800375a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d024      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	e01f      	b.n	8003788 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e016      	b.n	8003788 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0208 	bic.w	r2, r2, #8
 8003776:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	2220      	movs	r2, #32
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 808f 	beq.w	80038b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8087 	beq.w	80038b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	2220      	movs	r2, #32
 80037b0:	409a      	lsls	r2, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d136      	bne.n	8003830 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0216 	bic.w	r2, r2, #22
 80037d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x1da>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0208 	bic.w	r2, r2, #8
 8003800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	223f      	movs	r2, #63	@ 0x3f
 8003808:	409a      	lsls	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	d07e      	beq.n	8003924 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
        }
        return;
 800382e:	e079      	b.n	8003924 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01d      	beq.n	800387a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	2b00      	cmp	r3, #0
 8003852:	d031      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e02c      	b.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
 800385e:	bf00      	nop
 8003860:	20000010 	.word	0x20000010
 8003864:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d023      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
 8003878:	e01e      	b.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0210 	bic.w	r2, r2, #16
 8003896:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d032      	beq.n	8003926 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2205      	movs	r2, #5
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d307      	bcc.n	8003900 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f2      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x2cc>
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003900:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
 8003922:	e000      	b.n	8003926 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003924:	bf00      	nop
    }
  }
}
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003948:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b40      	cmp	r3, #64	@ 0x40
 8003958:	d108      	bne.n	800396c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800396a:	e007      	b.n	800397c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3b10      	subs	r3, #16
 8003998:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <DMA_CalcBaseAndBitshift+0x64>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039a2:	4a13      	ldr	r2, [pc, #76]	@ (80039f0 <DMA_CalcBaseAndBitshift+0x68>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d909      	bls.n	80039ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80039c8:	e007      	b.n	80039da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	aaaaaaab 	.word	0xaaaaaaab
 80039f0:	0800f268 	.word	0x0800f268

080039f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11f      	bne.n	8003a4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d856      	bhi.n	8003ac2 <DMA_CheckFifoParam+0xce>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <DMA_CheckFifoParam+0x28>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3f 	.word	0x08003a3f
 8003a24:	08003a2d 	.word	0x08003a2d
 8003a28:	08003ac3 	.word	0x08003ac3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d046      	beq.n	8003ac6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e043      	b.n	8003ac6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a46:	d140      	bne.n	8003aca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e03d      	b.n	8003aca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a56:	d121      	bne.n	8003a9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d837      	bhi.n	8003ace <DMA_CheckFifoParam+0xda>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <DMA_CheckFifoParam+0x70>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7b 	.word	0x08003a7b
 8003a6c:	08003a75 	.word	0x08003a75
 8003a70:	08003a8d 	.word	0x08003a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e030      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d025      	beq.n	8003ad2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e022      	b.n	8003ad2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a94:	d11f      	bne.n	8003ad6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a9a:	e01c      	b.n	8003ad6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d903      	bls.n	8003aaa <DMA_CheckFifoParam+0xb6>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d003      	beq.n	8003ab0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa8:	e018      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      break;
 8003aae:	e015      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e00b      	b.n	8003ada <DMA_CheckFifoParam+0xe6>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e00a      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e008      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e006      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
    }
  } 
  
  return status; 
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	@ 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e159      	b.n	8003dbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	f040 8148 	bne.w	8003db6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d005      	beq.n	8003b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d130      	bne.n	8003ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 0201 	and.w	r2, r3, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d017      	beq.n	8003bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d123      	bne.n	8003c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3208      	adds	r2, #8
 8003bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	220f      	movs	r2, #15
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	08da      	lsrs	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3208      	adds	r2, #8
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0203 	and.w	r2, r3, #3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a2 	beq.w	8003db6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b57      	ldr	r3, [pc, #348]	@ (8003dd4 <HAL_GPIO_Init+0x2e8>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	4a56      	ldr	r2, [pc, #344]	@ (8003dd4 <HAL_GPIO_Init+0x2e8>)
 8003c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c82:	4b54      	ldr	r3, [pc, #336]	@ (8003dd4 <HAL_GPIO_Init+0x2e8>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8e:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_GPIO_Init+0x2ec>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a49      	ldr	r2, [pc, #292]	@ (8003ddc <HAL_GPIO_Init+0x2f0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x202>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a48      	ldr	r2, [pc, #288]	@ (8003de0 <HAL_GPIO_Init+0x2f4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x1fe>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a47      	ldr	r2, [pc, #284]	@ (8003de4 <HAL_GPIO_Init+0x2f8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x1fa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a46      	ldr	r2, [pc, #280]	@ (8003de8 <HAL_GPIO_Init+0x2fc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x1f6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a45      	ldr	r2, [pc, #276]	@ (8003dec <HAL_GPIO_Init+0x300>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x1f2>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e008      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003cde:	2307      	movs	r3, #7
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e004      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f002 0203 	and.w	r2, r2, #3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4093      	lsls	r3, r2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d00:	4935      	ldr	r1, [pc, #212]	@ (8003dd8 <HAL_GPIO_Init+0x2ec>)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3302      	adds	r3, #2
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0e:	4b38      	ldr	r3, [pc, #224]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d32:	4a2f      	ldr	r2, [pc, #188]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d38:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d5c:	4a24      	ldr	r2, [pc, #144]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d62:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d86:	4a1a      	ldr	r2, [pc, #104]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8c:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db0:	4a0f      	ldr	r2, [pc, #60]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	f67f aea2 	bls.w	8003b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3724      	adds	r7, #36	@ 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40013800 	.word	0x40013800
 8003ddc:	40020000 	.word	0x40020000
 8003de0:	40020400 	.word	0x40020400
 8003de4:	40020800 	.word	0x40020800
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	e001      	b.n	8003e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e40:	e003      	b.n	8003e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	619a      	str	r2, [r3, #24]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e68:	887a      	ldrh	r2, [r7, #2]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	041a      	lsls	r2, r3, #16
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	400b      	ands	r3, r1
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e267      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d075      	beq.n	8003f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eaa:	4b88      	ldr	r3, [pc, #544]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb6:	4b85      	ldr	r3, [pc, #532]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d112      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec2:	4b82      	ldr	r3, [pc, #520]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ece:	d10b      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05b      	beq.n	8003f94 <HAL_RCC_OscConfig+0x108>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d157      	bne.n	8003f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e242      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCC_OscConfig+0x74>
 8003ef2:	4b76      	ldr	r3, [pc, #472]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e01d      	b.n	8003f3c <HAL_RCC_OscConfig+0xb0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x98>
 8003f0a:	4b70      	ldr	r3, [pc, #448]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a6f      	ldr	r2, [pc, #444]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b6d      	ldr	r3, [pc, #436]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a6c      	ldr	r2, [pc, #432]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0xb0>
 8003f24:	4b69      	ldr	r3, [pc, #420]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a68      	ldr	r2, [pc, #416]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b66      	ldr	r3, [pc, #408]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a65      	ldr	r2, [pc, #404]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe fcdc 	bl	8002900 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe fcd8 	bl	8002900 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	@ 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e207      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0xc0>
 8003f6a:	e014      	b.n	8003f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fcc8 	bl	8002900 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fe fcc4 	bl	8002900 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	@ 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e1f3      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f86:	4b51      	ldr	r3, [pc, #324]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0xe8>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d063      	beq.n	800406a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fae:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d11c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b44      	ldr	r3, [pc, #272]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d116      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	4b41      	ldr	r3, [pc, #260]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_RCC_OscConfig+0x152>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e1c7      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fde:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4937      	ldr	r1, [pc, #220]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	e03a      	b.n	800406a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ffc:	4b34      	ldr	r3, [pc, #208]	@ (80040d0 <HAL_RCC_OscConfig+0x244>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fe fc7d 	bl	8002900 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400a:	f7fe fc79 	bl	8002900 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e1a8      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401c:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b28      	ldr	r3, [pc, #160]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4925      	ldr	r1, [pc, #148]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
 800403c:	e015      	b.n	800406a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403e:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <HAL_RCC_OscConfig+0x244>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe fc5c 	bl	8002900 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404c:	f7fe fc58 	bl	8002900 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e187      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d036      	beq.n	80040e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407e:	4b15      	ldr	r3, [pc, #84]	@ (80040d4 <HAL_RCC_OscConfig+0x248>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fe fc3c 	bl	8002900 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408c:	f7fe fc38 	bl	8002900 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e167      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_RCC_OscConfig+0x240>)
 80040a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x200>
 80040aa:	e01b      	b.n	80040e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_RCC_OscConfig+0x248>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b2:	f7fe fc25 	bl	8002900 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b8:	e00e      	b.n	80040d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fe fc21 	bl	8002900 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d907      	bls.n	80040d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e150      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
 80040cc:	40023800 	.word	0x40023800
 80040d0:	42470000 	.word	0x42470000
 80040d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b88      	ldr	r3, [pc, #544]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 80040da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ea      	bne.n	80040ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8097 	beq.w	8004220 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b81      	ldr	r3, [pc, #516]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	4b7d      	ldr	r3, [pc, #500]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	4a7c      	ldr	r2, [pc, #496]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	@ 0x40
 8004112:	4b7a      	ldr	r3, [pc, #488]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4b77      	ldr	r3, [pc, #476]	@ (8004300 <HAL_RCC_OscConfig+0x474>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d118      	bne.n	8004160 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412e:	4b74      	ldr	r3, [pc, #464]	@ (8004300 <HAL_RCC_OscConfig+0x474>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a73      	ldr	r2, [pc, #460]	@ (8004300 <HAL_RCC_OscConfig+0x474>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413a:	f7fe fbe1 	bl	8002900 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004142:	f7fe fbdd 	bl	8002900 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e10c      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b6a      	ldr	r3, [pc, #424]	@ (8004300 <HAL_RCC_OscConfig+0x474>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x2ea>
 8004168:	4b64      	ldr	r3, [pc, #400]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a63      	ldr	r2, [pc, #396]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
 8004174:	e01c      	b.n	80041b0 <HAL_RCC_OscConfig+0x324>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b05      	cmp	r3, #5
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x30c>
 800417e:	4b5f      	ldr	r3, [pc, #380]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004182:	4a5e      	ldr	r2, [pc, #376]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6713      	str	r3, [r2, #112]	@ 0x70
 800418a:	4b5c      	ldr	r3, [pc, #368]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	4a5b      	ldr	r2, [pc, #364]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6713      	str	r3, [r2, #112]	@ 0x70
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0x324>
 8004198:	4b58      	ldr	r3, [pc, #352]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419c:	4a57      	ldr	r2, [pc, #348]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a4:	4b55      	ldr	r3, [pc, #340]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a8:	4a54      	ldr	r2, [pc, #336]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fe fba2 	bl	8002900 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fe fb9e 	bl	8002900 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0cb      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	4b49      	ldr	r3, [pc, #292]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ee      	beq.n	80041c0 <HAL_RCC_OscConfig+0x334>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e4:	f7fe fb8c 	bl	8002900 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fe fb88 	bl	8002900 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0b5      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	4b3e      	ldr	r3, [pc, #248]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ee      	bne.n	80041ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b39      	ldr	r3, [pc, #228]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	4a38      	ldr	r2, [pc, #224]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a1 	beq.w	800436c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800422a:	4b34      	ldr	r3, [pc, #208]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b08      	cmp	r3, #8
 8004234:	d05c      	beq.n	80042f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d141      	bne.n	80042c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b31      	ldr	r3, [pc, #196]	@ (8004304 <HAL_RCC_OscConfig+0x478>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fe fb5c 	bl	8002900 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe fb58 	bl	8002900 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e087      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	019b      	lsls	r3, r3, #6
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	3b01      	subs	r3, #1
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	491b      	ldr	r1, [pc, #108]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004294:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <HAL_RCC_OscConfig+0x478>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fe fb31 	bl	8002900 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fe fb2d 	bl	8002900 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e05c      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	4b11      	ldr	r3, [pc, #68]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x416>
 80042c0:	e054      	b.n	800436c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c2:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <HAL_RCC_OscConfig+0x478>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe fb1a 	bl	8002900 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fe fb16 	bl	8002900 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e045      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_RCC_OscConfig+0x470>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x444>
 80042ee:	e03d      	b.n	800436c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e038      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
 80042fc:	40023800 	.word	0x40023800
 8004300:	40007000 	.word	0x40007000
 8004304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004308:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <HAL_RCC_OscConfig+0x4ec>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d028      	beq.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d121      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d11a      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004338:	4013      	ands	r3, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800433e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004340:	4293      	cmp	r3, r2
 8004342:	d111      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0cc      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004390:	4b68      	ldr	r3, [pc, #416]	@ (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d90c      	bls.n	80043b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439e:	4b65      	ldr	r3, [pc, #404]	@ (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	4b63      	ldr	r3, [pc, #396]	@ (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0b8      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d0:	4b59      	ldr	r3, [pc, #356]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a58      	ldr	r2, [pc, #352]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e8:	4b53      	ldr	r3, [pc, #332]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a52      	ldr	r2, [pc, #328]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f4:	4b50      	ldr	r3, [pc, #320]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	494d      	ldr	r1, [pc, #308]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d044      	beq.n	800449c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	4b47      	ldr	r3, [pc, #284]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d119      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e07f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d003      	beq.n	800443a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004436:	2b03      	cmp	r3, #3
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	4b3f      	ldr	r3, [pc, #252]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e06f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e067      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445a:	4b37      	ldr	r3, [pc, #220]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f023 0203 	bic.w	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4934      	ldr	r1, [pc, #208]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800446c:	f7fe fa48 	bl	8002900 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	e00a      	b.n	800448a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004474:	f7fe fa44 	bl	8002900 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e04f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	4b2b      	ldr	r3, [pc, #172]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 020c 	and.w	r2, r3, #12
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	429a      	cmp	r2, r3
 800449a:	d1eb      	bne.n	8004474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800449c:	4b25      	ldr	r3, [pc, #148]	@ (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d20c      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b22      	ldr	r3, [pc, #136]	@ (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b20      	ldr	r3, [pc, #128]	@ (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e032      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	4b19      	ldr	r3, [pc, #100]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4916      	ldr	r1, [pc, #88]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ee:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	490e      	ldr	r1, [pc, #56]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004502:	f000 f821 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 8004506:	4602      	mov	r2, r0
 8004508:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	490a      	ldr	r1, [pc, #40]	@ (800453c <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	fa22 f303 	lsr.w	r3, r2, r3
 800451a:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800451e:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe f804 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023c00 	.word	0x40023c00
 8004538:	40023800 	.word	0x40023800
 800453c:	0800f250 	.word	0x0800f250
 8004540:	20000010 	.word	0x20000010
 8004544:	20000014 	.word	0x20000014

08004548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800454c:	b090      	sub	sp, #64	@ 0x40
 800454e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34
 8004554:	2300      	movs	r3, #0
 8004556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004558:	2300      	movs	r3, #0
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004560:	4b59      	ldr	r3, [pc, #356]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d00d      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0x40>
 800456c:	2b08      	cmp	r3, #8
 800456e:	f200 80a1 	bhi.w	80046b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x34>
 8004576:	2b04      	cmp	r3, #4
 8004578:	d003      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0x3a>
 800457a:	e09b      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b53      	ldr	r3, [pc, #332]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x184>)
 800457e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004580:	e09b      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004582:	4b53      	ldr	r3, [pc, #332]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004584:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004586:	e098      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004588:	4b4f      	ldr	r3, [pc, #316]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004590:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004592:	4b4d      	ldr	r3, [pc, #308]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d028      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459e:	4b4a      	ldr	r3, [pc, #296]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	099b      	lsrs	r3, r3, #6
 80045a4:	2200      	movs	r2, #0
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045b0:	2100      	movs	r1, #0
 80045b2:	4b47      	ldr	r3, [pc, #284]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045b4:	fb03 f201 	mul.w	r2, r3, r1
 80045b8:	2300      	movs	r3, #0
 80045ba:	fb00 f303 	mul.w	r3, r0, r3
 80045be:	4413      	add	r3, r2
 80045c0:	4a43      	ldr	r2, [pc, #268]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045c2:	fba0 1202 	umull	r1, r2, r0, r2
 80045c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c8:	460a      	mov	r2, r1
 80045ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ce:	4413      	add	r3, r2
 80045d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d4:	2200      	movs	r2, #0
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	61fa      	str	r2, [r7, #28]
 80045da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045e2:	f7fc fb59 	bl	8000c98 <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4613      	mov	r3, r2
 80045ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ee:	e053      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f0:	4b35      	ldr	r3, [pc, #212]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	2200      	movs	r2, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	617a      	str	r2, [r7, #20]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004602:	f04f 0b00 	mov.w	fp, #0
 8004606:	4652      	mov	r2, sl
 8004608:	465b      	mov	r3, fp
 800460a:	f04f 0000 	mov.w	r0, #0
 800460e:	f04f 0100 	mov.w	r1, #0
 8004612:	0159      	lsls	r1, r3, #5
 8004614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004618:	0150      	lsls	r0, r2, #5
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	ebb2 080a 	subs.w	r8, r2, sl
 8004622:	eb63 090b 	sbc.w	r9, r3, fp
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004632:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004636:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800463a:	ebb2 0408 	subs.w	r4, r2, r8
 800463e:	eb63 0509 	sbc.w	r5, r3, r9
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	00eb      	lsls	r3, r5, #3
 800464c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004650:	00e2      	lsls	r2, r4, #3
 8004652:	4614      	mov	r4, r2
 8004654:	461d      	mov	r5, r3
 8004656:	eb14 030a 	adds.w	r3, r4, sl
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	eb45 030b 	adc.w	r3, r5, fp
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466e:	4629      	mov	r1, r5
 8004670:	028b      	lsls	r3, r1, #10
 8004672:	4621      	mov	r1, r4
 8004674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004678:	4621      	mov	r1, r4
 800467a:	028a      	lsls	r2, r1, #10
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004682:	2200      	movs	r2, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	60fa      	str	r2, [r7, #12]
 8004688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800468c:	f7fc fb04 	bl	8000c98 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4613      	mov	r3, r2
 8004696:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	3301      	adds	r3, #1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80046a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046b2:	e002      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x184>)
 80046b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3740      	adds	r7, #64	@ 0x40
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	017d7840 	.word	0x017d7840

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000010 	.word	0x20000010

080046ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f0:	f7ff fff0 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	0a9b      	lsrs	r3, r3, #10
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4903      	ldr	r1, [pc, #12]	@ (8004710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	0800f260 	.word	0x0800f260

08004714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004718:	f7ff ffdc 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	0b5b      	lsrs	r3, r3, #13
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4903      	ldr	r1, [pc, #12]	@ (8004738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	0800f260 	.word	0x0800f260

0800473c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	220f      	movs	r2, #15
 800474a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800474c:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0203 	and.w	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004764:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004770:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <HAL_RCC_GetClockConfig+0x5c>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	08db      	lsrs	r3, r3, #3
 8004776:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_RCC_GetClockConfig+0x60>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0207 	and.w	r2, r3, #7
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	40023c00 	.word	0x40023c00

080047a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07b      	b.n	80048aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047c2:	d009      	beq.n	80047d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	61da      	str	r2, [r3, #28]
 80047ca:	e005      	b.n	80047d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd fd94 	bl	8002320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800480e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485c:	ea42 0103 	orr.w	r1, r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0104 	and.w	r1, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	f003 0210 	and.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b088      	sub	sp, #32
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_SPI_Transmit+0x22>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e12d      	b.n	8004b30 <HAL_SPI_Transmit+0x27e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048dc:	f7fe f810 	bl	8002900 <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048f6:	e116      	b.n	8004b26 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x52>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004908:	e10d      	b.n	8004b26 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2203      	movs	r2, #3
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004950:	d10f      	bne.n	8004972 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004970:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b40      	cmp	r3, #64	@ 0x40
 800497e:	d007      	beq.n	8004990 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004998:	d14f      	bne.n	8004a3a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Transmit+0xf6>
 80049a2:	8afb      	ldrh	r3, [r7, #22]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d142      	bne.n	8004a2e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049cc:	e02f      	b.n	8004a2e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d112      	bne.n	8004a02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a00:	e015      	b.n	8004a2e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fd ff7d 	bl	8002900 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Transmit+0x168>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit+0x16e>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004a2c:	e07b      	b.n	8004b26 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1ca      	bne.n	80049ce <HAL_SPI_Transmit+0x11c>
 8004a38:	e050      	b.n	8004adc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Transmit+0x196>
 8004a42:	8afb      	ldrh	r3, [r7, #22]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d144      	bne.n	8004ad2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	7812      	ldrb	r2, [r2, #0]
 8004a54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a6e:	e030      	b.n	8004ad2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d113      	bne.n	8004aa6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004aa4:	e015      	b.n	8004ad2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa6:	f7fd ff2b 	bl	8002900 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d803      	bhi.n	8004abe <HAL_SPI_Transmit+0x20c>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d102      	bne.n	8004ac4 <HAL_SPI_Transmit+0x212>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004ad0:	e029      	b.n	8004b26 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1c9      	bne.n	8004a70 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f8b1 	bl	8004c48 <SPI_EndRxTxTransaction>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e003      	b.n	8004b26 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b48:	f7fd feda 	bl	8002900 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b58:	f7fd fed2 	bl	8002900 <HAL_GetTick>
 8004b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b5e:	4b39      	ldr	r3, [pc, #228]	@ (8004c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	015b      	lsls	r3, r3, #5
 8004b64:	0d1b      	lsrs	r3, r3, #20
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b6e:	e054      	b.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d050      	beq.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b78:	f7fd fec2 	bl	8002900 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d902      	bls.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d13d      	bne.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ba6:	d111      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb0:	d004      	beq.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bba:	d107      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd4:	d10f      	bne.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e017      	b.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	bf0c      	ite	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	2300      	movne	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d19b      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000010 	.word	0x20000010

08004c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff ff6a 	bl	8004b38 <SPI_WaitFlagStateUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e032      	b.n	8004ce0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce8 <SPI_EndRxTxTransaction+0xa0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cec <SPI_EndRxTxTransaction+0xa4>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	0d5b      	lsrs	r3, r3, #21
 8004c86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c98:	d112      	bne.n	8004cc0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	@ 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff ff47 	bl	8004b38 <SPI_WaitFlagStateUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e00f      	b.n	8004ce0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b80      	cmp	r3, #128	@ 0x80
 8004cd8:	d0f2      	beq.n	8004cc0 <SPI_EndRxTxTransaction+0x78>
 8004cda:	e000      	b.n	8004cde <SPI_EndRxTxTransaction+0x96>
        break;
 8004cdc:	bf00      	nop
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000010 	.word	0x20000010
 8004cec:	165e9f81 	.word	0x165e9f81

08004cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e041      	b.n	8004d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd fb4a 	bl	80023b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 faca 	bl	80052c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d001      	beq.n	8004da8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e03c      	b.n	8004e22 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e30 <HAL_TIM_Base_Start+0xa0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_TIM_Base_Start+0x5c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc2:	d013      	beq.n	8004dec <HAL_TIM_Base_Start+0x5c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e34 <HAL_TIM_Base_Start+0xa4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_TIM_Base_Start+0x5c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <HAL_TIM_Base_Start+0xa8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_TIM_Base_Start+0x5c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a17      	ldr	r2, [pc, #92]	@ (8004e3c <HAL_TIM_Base_Start+0xac>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_TIM_Base_Start+0x5c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a16      	ldr	r2, [pc, #88]	@ (8004e40 <HAL_TIM_Base_Start+0xb0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d111      	bne.n	8004e10 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d010      	beq.n	8004e20 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	e007      	b.n	8004e20 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40014000 	.word	0x40014000

08004e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d001      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e044      	b.n	8004ee6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d013      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a19      	ldr	r2, [pc, #100]	@ (8004efc <HAL_TIM_Base_Start_IT+0xb8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a17      	ldr	r2, [pc, #92]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a16      	ldr	r2, [pc, #88]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xc0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d111      	bne.n	8004ed4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d010      	beq.n	8004ee4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed2:	e007      	b.n	8004ee4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40014000 	.word	0x40014000

08004f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d020      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01b      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0202 	mvn.w	r2, #2
 8004f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f999 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f98b 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f99c 	bl	800529e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d020      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01b      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0204 	mvn.w	r2, #4
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f973 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f965 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f976 	bl	800529e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d020      	beq.n	8005004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0208 	mvn.w	r2, #8
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f94d 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f93f 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f950 	bl	800529e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0210 	mvn.w	r2, #16
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2208      	movs	r2, #8
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f927 	bl	800528a <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f919 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f92a 	bl	800529e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0201 	mvn.w	r2, #1
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fd f8ce 	bl	8002210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fab6 	bl	8005604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8fb 	bl	80052b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0220 	mvn.w	r2, #32
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa88 	bl	80055f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_ConfigClockSource+0x1c>
 8005100:	2302      	movs	r3, #2
 8005102:	e0b4      	b.n	800526e <HAL_TIM_ConfigClockSource+0x186>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800512a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513c:	d03e      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0xd4>
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005142:	f200 8087 	bhi.w	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800514a:	f000 8086 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x172>
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005152:	d87f      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b70      	cmp	r3, #112	@ 0x70
 8005156:	d01a      	beq.n	800518e <HAL_TIM_ConfigClockSource+0xa6>
 8005158:	2b70      	cmp	r3, #112	@ 0x70
 800515a:	d87b      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b60      	cmp	r3, #96	@ 0x60
 800515e:	d050      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x11a>
 8005160:	2b60      	cmp	r3, #96	@ 0x60
 8005162:	d877      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b50      	cmp	r3, #80	@ 0x50
 8005166:	d03c      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005168:	2b50      	cmp	r3, #80	@ 0x50
 800516a:	d873      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d058      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x13a>
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d86f      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b30      	cmp	r3, #48	@ 0x30
 8005176:	d064      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 8005178:	2b30      	cmp	r3, #48	@ 0x30
 800517a:	d86b      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d060      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 8005180:	2b20      	cmp	r3, #32
 8005182:	d867      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d05c      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 8005188:	2b10      	cmp	r3, #16
 800518a:	d05a      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 800518c:	e062      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800519e:	f000 f999 	bl	80054d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	609a      	str	r2, [r3, #8]
      break;
 80051ba:	e04f      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051cc:	f000 f982 	bl	80054d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051de:	609a      	str	r2, [r3, #8]
      break;
 80051e0:	e03c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ee:	461a      	mov	r2, r3
 80051f0:	f000 f8f6 	bl	80053e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2150      	movs	r1, #80	@ 0x50
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f94f 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8005200:	e02c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800520e:	461a      	mov	r2, r3
 8005210:	f000 f915 	bl	800543e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2160      	movs	r1, #96	@ 0x60
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f93f 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8005220:	e01c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800522e:	461a      	mov	r2, r3
 8005230:	f000 f8d6 	bl	80053e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2140      	movs	r1, #64	@ 0x40
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f92f 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8005240:	e00c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f000 f926 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8005252:	e003      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e000      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800525a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3a      	ldr	r2, [pc, #232]	@ (80053c4 <TIM_Base_SetConfig+0xfc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00f      	beq.n	8005300 <TIM_Base_SetConfig+0x38>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e6:	d00b      	beq.n	8005300 <TIM_Base_SetConfig+0x38>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a37      	ldr	r2, [pc, #220]	@ (80053c8 <TIM_Base_SetConfig+0x100>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_Base_SetConfig+0x38>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a36      	ldr	r2, [pc, #216]	@ (80053cc <TIM_Base_SetConfig+0x104>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_Base_SetConfig+0x38>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <TIM_Base_SetConfig+0x108>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d108      	bne.n	8005312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2b      	ldr	r2, [pc, #172]	@ (80053c4 <TIM_Base_SetConfig+0xfc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01b      	beq.n	8005352 <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005320:	d017      	beq.n	8005352 <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a28      	ldr	r2, [pc, #160]	@ (80053c8 <TIM_Base_SetConfig+0x100>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a27      	ldr	r2, [pc, #156]	@ (80053cc <TIM_Base_SetConfig+0x104>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00f      	beq.n	8005352 <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a26      	ldr	r2, [pc, #152]	@ (80053d0 <TIM_Base_SetConfig+0x108>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00b      	beq.n	8005352 <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a25      	ldr	r2, [pc, #148]	@ (80053d4 <TIM_Base_SetConfig+0x10c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d007      	beq.n	8005352 <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a24      	ldr	r2, [pc, #144]	@ (80053d8 <TIM_Base_SetConfig+0x110>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a23      	ldr	r2, [pc, #140]	@ (80053dc <TIM_Base_SetConfig+0x114>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d108      	bne.n	8005364 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a0e      	ldr	r2, [pc, #56]	@ (80053c4 <TIM_Base_SetConfig+0xfc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d103      	bne.n	8005398 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	611a      	str	r2, [r3, #16]
  }
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800

080053e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0201 	bic.w	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800540a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 030a 	bic.w	r3, r3, #10
 800541c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543e:	b480      	push	{r7}
 8005440:	b087      	sub	sp, #28
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f023 0210 	bic.w	r2, r3, #16
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800547a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f043 0307 	orr.w	r3, r3, #7
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	609a      	str	r2, [r3, #8]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005528:	2302      	movs	r3, #2
 800552a:	e050      	b.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1c      	ldr	r2, [pc, #112]	@ (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005578:	d013      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a16      	ldr	r2, [pc, #88]	@ (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a15      	ldr	r2, [pc, #84]	@ (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a13      	ldr	r2, [pc, #76]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10c      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40014000 	.word	0x40014000

080055f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e042      	b.n	80056b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fc fef2 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	@ 0x24
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800565a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 ff45 	bl	80064ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d175      	bne.n	80057c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Transmit+0x2c>
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e06e      	b.n	80057c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2221      	movs	r2, #33	@ 0x21
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056f6:	f7fd f903 	bl	8002900 <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005710:	d108      	bne.n	8005724 <HAL_UART_Transmit+0x6c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	e003      	b.n	800572c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800572c:	e02e      	b.n	800578c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2180      	movs	r1, #128	@ 0x80
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fc1d 	bl	8005f78 <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e03a      	b.n	80057c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10b      	bne.n	800576e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	3302      	adds	r3, #2
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e007      	b.n	800577e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3301      	adds	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1cb      	bne.n	800572e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	2140      	movs	r1, #64	@ 0x40
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fbe9 	bl	8005f78 <UART_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e006      	b.n	80057c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	4613      	mov	r3, r2
 80057da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d112      	bne.n	800580e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_UART_Receive_DMA+0x26>
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e00b      	b.n	8005810 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	461a      	mov	r2, r3
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fc11 	bl	800602c <UART_Start_Receive_DMA>
 800580a:	4603      	mov	r3, r0
 800580c:	e000      	b.n	8005810 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b0ba      	sub	sp, #232	@ 0xe8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800583e:	2300      	movs	r3, #0
 8005840:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005844:	2300      	movs	r3, #0
 8005846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10f      	bne.n	800587e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <HAL_UART_IRQHandler+0x66>
 800586a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fd79 	bl	800636e <UART_Receive_IT>
      return;
 800587c:	e25b      	b.n	8005d36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800587e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80de 	beq.w	8005a44 <HAL_UART_IRQHandler+0x22c>
 8005888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005898:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80d1 	beq.w	8005a44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <HAL_UART_IRQHandler+0xae>
 80058ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_UART_IRQHandler+0xd2>
 80058d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	f043 0202 	orr.w	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <HAL_UART_IRQHandler+0xf6>
 80058f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f043 0204 	orr.w	r2, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d011      	beq.n	800593e <HAL_UART_IRQHandler+0x126>
 800591a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d105      	bne.n	8005932 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	f043 0208 	orr.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 81f2 	beq.w	8005d2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_UART_IRQHandler+0x14e>
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fd04 	bl	800636e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b40      	cmp	r3, #64	@ 0x40
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <HAL_UART_IRQHandler+0x17a>
 800598a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d04f      	beq.n	8005a32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fc0c 	bl	80061b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	d141      	bne.n	8005a2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3314      	adds	r3, #20
 80059ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3314      	adds	r3, #20
 80059ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1d9      	bne.n	80059a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d013      	beq.n	8005a22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fe:	4a7e      	ldr	r2, [pc, #504]	@ (8005bf8 <HAL_UART_IRQHandler+0x3e0>)
 8005a00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fd fde4 	bl	80035d4 <HAL_DMA_Abort_IT>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d016      	beq.n	8005a40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	e00e      	b.n	8005a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f994 	bl	8005d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	e00a      	b.n	8005a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f990 	bl	8005d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	e006      	b.n	8005a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f98c 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a3e:	e175      	b.n	8005d2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	bf00      	nop
    return;
 8005a42:	e173      	b.n	8005d2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	f040 814f 	bne.w	8005cec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8148 	beq.w	8005cec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8141 	beq.w	8005cec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8a:	2b40      	cmp	r3, #64	@ 0x40
 8005a8c:	f040 80b6 	bne.w	8005bfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8145 	beq.w	8005d30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	f080 813e 	bcs.w	8005d30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac6:	f000 8088 	beq.w	8005bda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005af6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1d9      	bne.n	8005aca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3314      	adds	r3, #20
 8005b1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3314      	adds	r3, #20
 8005b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e1      	bne.n	8005b16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3314      	adds	r3, #20
 8005b58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3314      	adds	r3, #20
 8005b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e3      	bne.n	8005b52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005bbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bbe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e3      	bne.n	8005b98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd fc8d 	bl	80034f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f8b7 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bf6:	e09b      	b.n	8005d30 <HAL_UART_IRQHandler+0x518>
 8005bf8:	08006277 	.word	0x08006277
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 808e 	beq.w	8005d34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8089 	beq.w	8005d34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c46:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e3      	bne.n	8005c22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3314      	adds	r3, #20
 8005c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e3      	bne.n	8005c5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0310 	bic.w	r3, r3, #16
 8005cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005cc4:	61fa      	str	r2, [r7, #28]
 8005cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	69b9      	ldr	r1, [r7, #24]
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e3      	bne.n	8005ca0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f83d 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cea:	e023      	b.n	8005d34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <HAL_UART_IRQHandler+0x4f4>
 8005cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 faca 	bl	800629e <UART_Transmit_IT>
    return;
 8005d0a:	e014      	b.n	8005d36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00e      	beq.n	8005d36 <HAL_UART_IRQHandler+0x51e>
 8005d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fb0a 	bl	800633e <UART_EndTransmit_IT>
    return;
 8005d2a:	e004      	b.n	8005d36 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d2c:	bf00      	nop
 8005d2e:	e002      	b.n	8005d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d30:	bf00      	nop
 8005d32:	e000      	b.n	8005d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d34:	bf00      	nop
  }
}
 8005d36:	37e8      	adds	r7, #232	@ 0xe8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b09c      	sub	sp, #112	@ 0x70
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d172      	bne.n	8005e7e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005dbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dc0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3314      	adds	r3, #20
 8005dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de4:	f023 0301 	bic.w	r3, r3, #1
 8005de8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3314      	adds	r3, #20
 8005df0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005df2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005df4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005df8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e5      	bne.n	8005dd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3314      	adds	r3, #20
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	623b      	str	r3, [r7, #32]
   return(result);
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3314      	adds	r3, #20
 8005e24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e26:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e5      	bne.n	8005e06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d119      	bne.n	8005e7e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	69b9      	ldr	r1, [r7, #24]
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	617b      	str	r3, [r7, #20]
   return(result);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e80:	2200      	movs	r2, #0
 8005e82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d106      	bne.n	8005e9a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e90:	4619      	mov	r1, r3
 8005e92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e94:	f7ff ff66 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e98:	e002      	b.n	8005ea0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e9c:	f7fc f99e 	bl	80021dc <HAL_UART_RxCpltCallback>
}
 8005ea0:	bf00      	nop
 8005ea2:	3770      	adds	r7, #112	@ 0x70
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d108      	bne.n	8005ed6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	4619      	mov	r1, r3
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff ff48 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ed4:	e002      	b.n	8005edc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7fc f970 	bl	80021bc <HAL_UART_RxHalfCpltCallback>
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f00:	2b80      	cmp	r3, #128	@ 0x80
 8005f02:	bf0c      	ite	eq
 8005f04:	2301      	moveq	r3, #1
 8005f06:	2300      	movne	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b21      	cmp	r3, #33	@ 0x21
 8005f16:	d108      	bne.n	8005f2a <UART_DMAError+0x46>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2200      	movs	r2, #0
 8005f22:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005f24:	68b8      	ldr	r0, [r7, #8]
 8005f26:	f000 f91b 	bl	8006160 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f34:	2b40      	cmp	r3, #64	@ 0x40
 8005f36:	bf0c      	ite	eq
 8005f38:	2301      	moveq	r3, #1
 8005f3a:	2300      	movne	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b22      	cmp	r3, #34	@ 0x22
 8005f4a:	d108      	bne.n	8005f5e <UART_DMAError+0x7a>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2200      	movs	r2, #0
 8005f56:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005f58:	68b8      	ldr	r0, [r7, #8]
 8005f5a:	f000 f929 	bl	80061b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f043 0210 	orr.w	r2, r3, #16
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f6a:	68b8      	ldr	r0, [r7, #8]
 8005f6c:	f7ff fef0 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f88:	e03b      	b.n	8006002 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d037      	beq.n	8006002 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fc fcb5 	bl	8002900 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e03a      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d023      	beq.n	8006002 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b80      	cmp	r3, #128	@ 0x80
 8005fbe:	d020      	beq.n	8006002 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b40      	cmp	r3, #64	@ 0x40
 8005fc4:	d01d      	beq.n	8006002 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d116      	bne.n	8006002 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f8e0 	bl	80061b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e00f      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4013      	ands	r3, r2
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	429a      	cmp	r2, r3
 8006010:	bf0c      	ite	eq
 8006012:	2301      	moveq	r3, #1
 8006014:	2300      	movne	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	429a      	cmp	r2, r3
 800601e:	d0b4      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b098      	sub	sp, #96	@ 0x60
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2222      	movs	r2, #34	@ 0x22
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	4a3e      	ldr	r2, [pc, #248]	@ (8006154 <UART_Start_Receive_DMA+0x128>)
 800605a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006060:	4a3d      	ldr	r2, [pc, #244]	@ (8006158 <UART_Start_Receive_DMA+0x12c>)
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	4a3c      	ldr	r2, [pc, #240]	@ (800615c <UART_Start_Receive_DMA+0x130>)
 800606a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006070:	2200      	movs	r2, #0
 8006072:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006074:	f107 0308 	add.w	r3, r7, #8
 8006078:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	f7fd f9da 	bl	8003444 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d019      	beq.n	80060e2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060ce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80060d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80060d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80060dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006102:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006104:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	617b      	str	r3, [r7, #20]
   return(result);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800612c:	653b      	str	r3, [r7, #80]	@ 0x50
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006136:	627a      	str	r2, [r7, #36]	@ 0x24
 8006138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6a39      	ldr	r1, [r7, #32]
 800613c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	61fb      	str	r3, [r7, #28]
   return(result);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e5      	bne.n	8006116 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3760      	adds	r7, #96	@ 0x60
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	08005d7d 	.word	0x08005d7d
 8006158:	08005ea9 	.word	0x08005ea9
 800615c:	08005ee5 	.word	0x08005ee5

08006160 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	@ 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	60bb      	str	r3, [r7, #8]
   return(result);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	61ba      	str	r2, [r7, #24]
 800618a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	6979      	ldr	r1, [r7, #20]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	e841 2300 	strex	r3, r2, [r1]
 8006194:	613b      	str	r3, [r7, #16]
   return(result);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e5      	bne.n	8006168 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80061a4:	bf00      	nop
 80061a6:	3724      	adds	r7, #36	@ 0x24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b095      	sub	sp, #84	@ 0x54
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3314      	adds	r3, #20
 80061f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800620c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e5      	bne.n	80061ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	2b01      	cmp	r3, #1
 8006226:	d119      	bne.n	800625c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	60bb      	str	r3, [r7, #8]
   return(result);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f023 0310 	bic.w	r3, r3, #16
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006248:	61ba      	str	r2, [r7, #24]
 800624a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6979      	ldr	r1, [r7, #20]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	613b      	str	r3, [r7, #16]
   return(result);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e5      	bne.n	8006228 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800626a:	bf00      	nop
 800626c:	3754      	adds	r7, #84	@ 0x54
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff fd5d 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b21      	cmp	r3, #33	@ 0x21
 80062b0:	d13e      	bne.n	8006330 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ba:	d114      	bne.n	80062e6 <UART_Transmit_IT+0x48>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d110      	bne.n	80062e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	1c9a      	adds	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]
 80062e4:	e008      	b.n	80062f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	1c59      	adds	r1, r3, #1
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6211      	str	r1, [r2, #32]
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4619      	mov	r1, r3
 8006306:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10f      	bne.n	800632c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800631a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800632a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006330:	2302      	movs	r3, #2
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006354:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fcec 	bl	8005d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08c      	sub	sp, #48	@ 0x30
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b22      	cmp	r3, #34	@ 0x22
 8006380:	f040 80ae 	bne.w	80064e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638c:	d117      	bne.n	80063be <UART_Receive_IT+0x50>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d113      	bne.n	80063be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80063bc:	e026      	b.n	800640c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d0:	d007      	beq.n	80063e2 <UART_Receive_IT+0x74>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <UART_Receive_IT+0x82>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e008      	b.n	8006402 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006400:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29b      	uxth	r3, r3
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4619      	mov	r1, r3
 800641a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800641c:	2b00      	cmp	r3, #0
 800641e:	d15d      	bne.n	80064dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0220 	bic.w	r2, r2, #32
 800642e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800643e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006462:	2b01      	cmp	r3, #1
 8006464:	d135      	bne.n	80064d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	613b      	str	r3, [r7, #16]
   return(result);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800648c:	623a      	str	r2, [r7, #32]
 800648e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	69f9      	ldr	r1, [r7, #28]
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	61bb      	str	r3, [r7, #24]
   return(result);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e5      	bne.n	800646c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d10a      	bne.n	80064c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fc4a 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
 80064d0:	e002      	b.n	80064d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fb fe82 	bl	80021dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	e002      	b.n	80064e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3730      	adds	r7, #48	@ 0x30
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b0c0      	sub	sp, #256	@ 0x100
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	68d9      	ldr	r1, [r3, #12]
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	ea40 0301 	orr.w	r3, r0, r1
 8006514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	431a      	orrs	r2, r3
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006544:	f021 010c 	bic.w	r1, r1, #12
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006552:	430b      	orrs	r3, r1
 8006554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	6999      	ldr	r1, [r3, #24]
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	ea40 0301 	orr.w	r3, r0, r1
 8006572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b8f      	ldr	r3, [pc, #572]	@ (80067b8 <UART_SetConfig+0x2cc>)
 800657c:	429a      	cmp	r2, r3
 800657e:	d005      	beq.n	800658c <UART_SetConfig+0xa0>
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b8d      	ldr	r3, [pc, #564]	@ (80067bc <UART_SetConfig+0x2d0>)
 8006588:	429a      	cmp	r2, r3
 800658a:	d104      	bne.n	8006596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fe f8c2 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8006590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006594:	e003      	b.n	800659e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006596:	f7fe f8a9 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
 800659a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a8:	f040 810c 	bne.w	80067c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	1891      	adds	r1, r2, r2
 80065c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065c6:	415b      	adcs	r3, r3
 80065c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065ce:	4621      	mov	r1, r4
 80065d0:	eb12 0801 	adds.w	r8, r2, r1
 80065d4:	4629      	mov	r1, r5
 80065d6:	eb43 0901 	adc.w	r9, r3, r1
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ee:	4690      	mov	r8, r2
 80065f0:	4699      	mov	r9, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	eb18 0303 	adds.w	r3, r8, r3
 80065f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065fc:	462b      	mov	r3, r5
 80065fe:	eb49 0303 	adc.w	r3, r9, r3
 8006602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006612:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800661a:	460b      	mov	r3, r1
 800661c:	18db      	adds	r3, r3, r3
 800661e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006620:	4613      	mov	r3, r2
 8006622:	eb42 0303 	adc.w	r3, r2, r3
 8006626:	657b      	str	r3, [r7, #84]	@ 0x54
 8006628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800662c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006630:	f7fa fb32 	bl	8000c98 <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4b61      	ldr	r3, [pc, #388]	@ (80067c0 <UART_SetConfig+0x2d4>)
 800663a:	fba3 2302 	umull	r2, r3, r3, r2
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	011c      	lsls	r4, r3, #4
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006646:	2200      	movs	r2, #0
 8006648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800664c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	1891      	adds	r1, r2, r2
 800665a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800665c:	415b      	adcs	r3, r3
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006664:	4641      	mov	r1, r8
 8006666:	eb12 0a01 	adds.w	sl, r2, r1
 800666a:	4649      	mov	r1, r9
 800666c:	eb43 0b01 	adc.w	fp, r3, r1
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800667c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006684:	4692      	mov	sl, r2
 8006686:	469b      	mov	fp, r3
 8006688:	4643      	mov	r3, r8
 800668a:	eb1a 0303 	adds.w	r3, sl, r3
 800668e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006692:	464b      	mov	r3, r9
 8006694:	eb4b 0303 	adc.w	r3, fp, r3
 8006698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066b0:	460b      	mov	r3, r1
 80066b2:	18db      	adds	r3, r3, r3
 80066b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b6:	4613      	mov	r3, r2
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066c6:	f7fa fae7 	bl	8000c98 <__aeabi_uldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	4b3b      	ldr	r3, [pc, #236]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80066d2:	fba3 2301 	umull	r2, r3, r3, r1
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	2264      	movs	r2, #100	@ 0x64
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	1acb      	subs	r3, r1, r3
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066e6:	4b36      	ldr	r3, [pc, #216]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80066e8:	fba3 2302 	umull	r2, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066f4:	441c      	add	r4, r3
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006700:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006708:	4642      	mov	r2, r8
 800670a:	464b      	mov	r3, r9
 800670c:	1891      	adds	r1, r2, r2
 800670e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006710:	415b      	adcs	r3, r3
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006718:	4641      	mov	r1, r8
 800671a:	1851      	adds	r1, r2, r1
 800671c:	6339      	str	r1, [r7, #48]	@ 0x30
 800671e:	4649      	mov	r1, r9
 8006720:	414b      	adcs	r3, r1
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006730:	4659      	mov	r1, fp
 8006732:	00cb      	lsls	r3, r1, #3
 8006734:	4651      	mov	r1, sl
 8006736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673a:	4651      	mov	r1, sl
 800673c:	00ca      	lsls	r2, r1, #3
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	4603      	mov	r3, r0
 8006744:	4642      	mov	r2, r8
 8006746:	189b      	adds	r3, r3, r2
 8006748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800674c:	464b      	mov	r3, r9
 800674e:	460a      	mov	r2, r1
 8006750:	eb42 0303 	adc.w	r3, r2, r3
 8006754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006764:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800676c:	460b      	mov	r3, r1
 800676e:	18db      	adds	r3, r3, r3
 8006770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006772:	4613      	mov	r3, r2
 8006774:	eb42 0303 	adc.w	r3, r2, r3
 8006778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800677e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006782:	f7fa fa89 	bl	8000c98 <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <UART_SetConfig+0x2d4>)
 800678c:	fba3 1302 	umull	r1, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	2164      	movs	r1, #100	@ 0x64
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	3332      	adds	r3, #50	@ 0x32
 800679e:	4a08      	ldr	r2, [pc, #32]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f003 0207 	and.w	r2, r3, #7
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4422      	add	r2, r4
 80067b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067b4:	e106      	b.n	80069c4 <UART_SetConfig+0x4d8>
 80067b6:	bf00      	nop
 80067b8:	40011000 	.word	0x40011000
 80067bc:	40011400 	.word	0x40011400
 80067c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067d6:	4642      	mov	r2, r8
 80067d8:	464b      	mov	r3, r9
 80067da:	1891      	adds	r1, r2, r2
 80067dc:	6239      	str	r1, [r7, #32]
 80067de:	415b      	adcs	r3, r3
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067e6:	4641      	mov	r1, r8
 80067e8:	1854      	adds	r4, r2, r1
 80067ea:	4649      	mov	r1, r9
 80067ec:	eb43 0501 	adc.w	r5, r3, r1
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	00eb      	lsls	r3, r5, #3
 80067fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067fe:	00e2      	lsls	r2, r4, #3
 8006800:	4614      	mov	r4, r2
 8006802:	461d      	mov	r5, r3
 8006804:	4643      	mov	r3, r8
 8006806:	18e3      	adds	r3, r4, r3
 8006808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800680c:	464b      	mov	r3, r9
 800680e:	eb45 0303 	adc.w	r3, r5, r3
 8006812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006832:	4629      	mov	r1, r5
 8006834:	008b      	lsls	r3, r1, #2
 8006836:	4621      	mov	r1, r4
 8006838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800683c:	4621      	mov	r1, r4
 800683e:	008a      	lsls	r2, r1, #2
 8006840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006844:	f7fa fa28 	bl	8000c98 <__aeabi_uldivmod>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4b60      	ldr	r3, [pc, #384]	@ (80069d0 <UART_SetConfig+0x4e4>)
 800684e:	fba3 2302 	umull	r2, r3, r3, r2
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	011c      	lsls	r4, r3, #4
 8006856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006860:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006868:	4642      	mov	r2, r8
 800686a:	464b      	mov	r3, r9
 800686c:	1891      	adds	r1, r2, r2
 800686e:	61b9      	str	r1, [r7, #24]
 8006870:	415b      	adcs	r3, r3
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006878:	4641      	mov	r1, r8
 800687a:	1851      	adds	r1, r2, r1
 800687c:	6139      	str	r1, [r7, #16]
 800687e:	4649      	mov	r1, r9
 8006880:	414b      	adcs	r3, r1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006890:	4659      	mov	r1, fp
 8006892:	00cb      	lsls	r3, r1, #3
 8006894:	4651      	mov	r1, sl
 8006896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689a:	4651      	mov	r1, sl
 800689c:	00ca      	lsls	r2, r1, #3
 800689e:	4610      	mov	r0, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	4642      	mov	r2, r8
 80068a6:	189b      	adds	r3, r3, r2
 80068a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068ac:	464b      	mov	r3, r9
 80068ae:	460a      	mov	r2, r1
 80068b0:	eb42 0303 	adc.w	r3, r2, r3
 80068b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068d0:	4649      	mov	r1, r9
 80068d2:	008b      	lsls	r3, r1, #2
 80068d4:	4641      	mov	r1, r8
 80068d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068da:	4641      	mov	r1, r8
 80068dc:	008a      	lsls	r2, r1, #2
 80068de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068e2:	f7fa f9d9 	bl	8000c98 <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	4b38      	ldr	r3, [pc, #224]	@ (80069d0 <UART_SetConfig+0x4e4>)
 80068ee:	fba3 2301 	umull	r2, r3, r3, r1
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	2264      	movs	r2, #100	@ 0x64
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	1acb      	subs	r3, r1, r3
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	3332      	adds	r3, #50	@ 0x32
 8006900:	4a33      	ldr	r2, [pc, #204]	@ (80069d0 <UART_SetConfig+0x4e4>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800690c:	441c      	add	r4, r3
 800690e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006912:	2200      	movs	r2, #0
 8006914:	673b      	str	r3, [r7, #112]	@ 0x70
 8006916:	677a      	str	r2, [r7, #116]	@ 0x74
 8006918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	1891      	adds	r1, r2, r2
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	415b      	adcs	r3, r3
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800692c:	4641      	mov	r1, r8
 800692e:	1851      	adds	r1, r2, r1
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	4649      	mov	r1, r9
 8006934:	414b      	adcs	r3, r1
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006944:	4659      	mov	r1, fp
 8006946:	00cb      	lsls	r3, r1, #3
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694e:	4651      	mov	r1, sl
 8006950:	00ca      	lsls	r2, r1, #3
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	4603      	mov	r3, r0
 8006958:	4642      	mov	r2, r8
 800695a:	189b      	adds	r3, r3, r2
 800695c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800695e:	464b      	mov	r3, r9
 8006960:	460a      	mov	r2, r1
 8006962:	eb42 0303 	adc.w	r3, r2, r3
 8006966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	663b      	str	r3, [r7, #96]	@ 0x60
 8006972:	667a      	str	r2, [r7, #100]	@ 0x64
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006980:	4649      	mov	r1, r9
 8006982:	008b      	lsls	r3, r1, #2
 8006984:	4641      	mov	r1, r8
 8006986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698a:	4641      	mov	r1, r8
 800698c:	008a      	lsls	r2, r1, #2
 800698e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006992:	f7fa f981 	bl	8000c98 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b0d      	ldr	r3, [pc, #52]	@ (80069d0 <UART_SetConfig+0x4e4>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	@ 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	@ 0x32
 80069ae:	4a08      	ldr	r2, [pc, #32]	@ (80069d0 <UART_SetConfig+0x4e4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 020f 	and.w	r2, r3, #15
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4422      	add	r2, r4
 80069c2:	609a      	str	r2, [r3, #8]
}
 80069c4:	bf00      	nop
 80069c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d0:	51eb851f 	.word	0x51eb851f

080069d4 <__NVIC_SetPriority>:
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	6039      	str	r1, [r7, #0]
 80069de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	db0a      	blt.n	80069fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	490c      	ldr	r1, [pc, #48]	@ (8006a20 <__NVIC_SetPriority+0x4c>)
 80069ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f2:	0112      	lsls	r2, r2, #4
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	440b      	add	r3, r1
 80069f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80069fc:	e00a      	b.n	8006a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	4908      	ldr	r1, [pc, #32]	@ (8006a24 <__NVIC_SetPriority+0x50>)
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	3b04      	subs	r3, #4
 8006a0c:	0112      	lsls	r2, r2, #4
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	440b      	add	r3, r1
 8006a12:	761a      	strb	r2, [r3, #24]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000e100 	.word	0xe000e100
 8006a24:	e000ed00 	.word	0xe000ed00

08006a28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <SysTick_Handler+0x1c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a30:	f001 fd18 	bl	8008464 <xTaskGetSchedulerState>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d001      	beq.n	8006a3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a3a:	f002 fb0d 	bl	8009058 <xPortSysTickHandler>
  }
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	e000e010 	.word	0xe000e010

08006a48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	f06f 0004 	mvn.w	r0, #4
 8006a52:	f7ff ffbf 	bl	80069d4 <__NVIC_SetPriority>
#endif
}
 8006a56:	bf00      	nop
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a62:	f3ef 8305 	mrs	r3, IPSR
 8006a66:	603b      	str	r3, [r7, #0]
  return(result);
 8006a68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a6e:	f06f 0305 	mvn.w	r3, #5
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	e00c      	b.n	8006a90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a76:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa0 <osKernelInitialize+0x44>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a7e:	4b08      	ldr	r3, [pc, #32]	@ (8006aa0 <osKernelInitialize+0x44>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	607b      	str	r3, [r7, #4]
 8006a88:	e002      	b.n	8006a90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a90:	687b      	ldr	r3, [r7, #4]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	200004b0 	.word	0x200004b0

08006aa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aaa:	f3ef 8305 	mrs	r3, IPSR
 8006aae:	603b      	str	r3, [r7, #0]
  return(result);
 8006ab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ab6:	f06f 0305 	mvn.w	r3, #5
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	e010      	b.n	8006ae0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006abe:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <osKernelStart+0x48>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d109      	bne.n	8006ada <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ac6:	f7ff ffbf 	bl	8006a48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006aca:	4b08      	ldr	r3, [pc, #32]	@ (8006aec <osKernelStart+0x48>)
 8006acc:	2202      	movs	r2, #2
 8006ace:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ad0:	f001 f87a 	bl	8007bc8 <vTaskStartScheduler>
      stat = osOK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	607b      	str	r3, [r7, #4]
 8006ad8:	e002      	b.n	8006ae0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ada:	f04f 33ff 	mov.w	r3, #4294967295
 8006ade:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ae0:	687b      	ldr	r3, [r7, #4]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	200004b0 	.word	0x200004b0

08006af0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08e      	sub	sp, #56	@ 0x38
 8006af4:	af04      	add	r7, sp, #16
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b00:	f3ef 8305 	mrs	r3, IPSR
 8006b04:	617b      	str	r3, [r7, #20]
  return(result);
 8006b06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d17e      	bne.n	8006c0a <osThreadNew+0x11a>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d07b      	beq.n	8006c0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b12:	2380      	movs	r3, #128	@ 0x80
 8006b14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b16:	2318      	movs	r3, #24
 8006b18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d045      	beq.n	8006bb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <osThreadNew+0x48>
        name = attr->name;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <osThreadNew+0x6e>
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b38      	cmp	r3, #56	@ 0x38
 8006b50:	d805      	bhi.n	8006b5e <osThreadNew+0x6e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <osThreadNew+0x72>
        return (NULL);
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e054      	b.n	8006c0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <osThreadNew+0xa8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006b80:	d90a      	bls.n	8006b98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <osThreadNew+0xa8>
        mem = 1;
 8006b92:	2301      	movs	r3, #1
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	e010      	b.n	8006bba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10c      	bne.n	8006bba <osThreadNew+0xca>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <osThreadNew+0xca>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <osThreadNew+0xca>
          mem = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	e001      	b.n	8006bba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d110      	bne.n	8006be2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fe1a 	bl	8007810 <xTaskCreateStatic>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	e013      	b.n	8006c0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d110      	bne.n	8006c0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f107 0310 	add.w	r3, r7, #16
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fe68 	bl	80078d0 <xTaskCreate>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d001      	beq.n	8006c0a <osThreadNew+0x11a>
            hTask = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c0a:	693b      	ldr	r3, [r7, #16]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3728      	adds	r7, #40	@ 0x28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1c:	f3ef 8305 	mrs	r3, IPSR
 8006c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <osDelay+0x1c>
    stat = osErrorISR;
 8006c28:	f06f 0305 	mvn.w	r3, #5
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	e007      	b.n	8006c40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 ff8e 	bl	8007b5c <vTaskDelay>
    }
  }

  return (stat);
 8006c40:	68fb      	ldr	r3, [r7, #12]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a07      	ldr	r2, [pc, #28]	@ (8006c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4a06      	ldr	r2, [pc, #24]	@ (8006c7c <vApplicationGetIdleTaskMemory+0x30>)
 8006c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2280      	movs	r2, #128	@ 0x80
 8006c68:	601a      	str	r2, [r3, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	200004b4 	.word	0x200004b4
 8006c7c:	20000510 	.word	0x20000510

08006c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a07      	ldr	r2, [pc, #28]	@ (8006cac <vApplicationGetTimerTaskMemory+0x2c>)
 8006c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4a06      	ldr	r2, [pc, #24]	@ (8006cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8006c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c9e:	601a      	str	r2, [r3, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	20000710 	.word	0x20000710
 8006cb0:	2000076c 	.word	0x2000076c

08006cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f103 0208 	add.w	r2, r3, #8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f103 0208 	add.w	r2, r3, #8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f103 0208 	add.w	r2, r3, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e00c      	b.n	8006d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e002      	b.n	8006d84 <vListInsert+0x2e>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d2f6      	bcs.n	8006d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6892      	ldr	r2, [r2, #8]
 8006dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6852      	ldr	r2, [r2, #4]
 8006de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d103      	bne.n	8006dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	1e5a      	subs	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e48:	f002 f876 	bl	8008f38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e54:	68f9      	ldr	r1, [r7, #12]
 8006e56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	441a      	add	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	441a      	add	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	22ff      	movs	r2, #255	@ 0xff
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	22ff      	movs	r2, #255	@ 0xff
 8006e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d114      	bne.n	8006ec8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01a      	beq.n	8006edc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3310      	adds	r3, #16
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 f91a 	bl	80080e4 <xTaskRemoveFromEventList>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d012      	beq.n	8006edc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <xQueueGenericReset+0xd0>)
 8006eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	e009      	b.n	8006edc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3310      	adds	r3, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fef1 	bl	8006cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3324      	adds	r3, #36	@ 0x24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff feec 	bl	8006cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006edc:	f002 f85e 	bl	8008f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ee0:	2301      	movs	r3, #1
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	@ 0x38
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f16:	bf00      	nop
 8006f18:	bf00      	nop
 8006f1a:	e7fd      	b.n	8006f18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <xQueueGenericCreateStatic+0x56>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <xQueueGenericCreateStatic+0x5a>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <xQueueGenericCreateStatic+0x5c>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10b      	bne.n	8006f68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	623b      	str	r3, [r7, #32]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <xQueueGenericCreateStatic+0x84>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <xQueueGenericCreateStatic+0x88>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <xQueueGenericCreateStatic+0x8a>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	61fb      	str	r3, [r7, #28]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f96:	2350      	movs	r3, #80	@ 0x50
 8006f98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b50      	cmp	r3, #80	@ 0x50
 8006f9e:	d00b      	beq.n	8006fb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	61bb      	str	r3, [r7, #24]
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	e7fd      	b.n	8006fb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00d      	beq.n	8006fe0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f805 	bl	8006fea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3730      	adds	r7, #48	@ 0x30
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d103      	bne.n	8007006 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e002      	b.n	800700c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007018:	2101      	movs	r1, #1
 800701a:	69b8      	ldr	r0, [r7, #24]
 800701c:	f7ff fefe 	bl	8006e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08e      	sub	sp, #56	@ 0x38
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10b      	bne.n	8007064 <xQueueGenericSend+0x34>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800705e:	bf00      	nop
 8007060:	bf00      	nop
 8007062:	e7fd      	b.n	8007060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d103      	bne.n	8007072 <xQueueGenericSend+0x42>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <xQueueGenericSend+0x46>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <xQueueGenericSend+0x48>
 8007076:	2300      	movs	r3, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <xQueueGenericSend+0x64>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d103      	bne.n	80070a2 <xQueueGenericSend+0x72>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <xQueueGenericSend+0x76>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <xQueueGenericSend+0x78>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <xQueueGenericSend+0x94>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	623b      	str	r3, [r7, #32]
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	e7fd      	b.n	80070c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070c4:	f001 f9ce 	bl	8008464 <xTaskGetSchedulerState>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <xQueueGenericSend+0xa4>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <xQueueGenericSend+0xa8>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <xQueueGenericSend+0xaa>
 80070d8:	2300      	movs	r3, #0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	61fb      	str	r3, [r7, #28]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f6:	f001 ff1f 	bl	8008f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007102:	429a      	cmp	r2, r3
 8007104:	d302      	bcc.n	800710c <xQueueGenericSend+0xdc>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d129      	bne.n	8007160 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007112:	f000 fa0f 	bl	8007534 <prvCopyDataToQueue>
 8007116:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d010      	beq.n	8007142 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	3324      	adds	r3, #36	@ 0x24
 8007124:	4618      	mov	r0, r3
 8007126:	f000 ffdd 	bl	80080e4 <xTaskRemoveFromEventList>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d013      	beq.n	8007158 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007130:	4b3f      	ldr	r3, [pc, #252]	@ (8007230 <xQueueGenericSend+0x200>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	e00a      	b.n	8007158 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007148:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <xQueueGenericSend+0x200>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007158:	f001 ff20 	bl	8008f9c <vPortExitCritical>
				return pdPASS;
 800715c:	2301      	movs	r3, #1
 800715e:	e063      	b.n	8007228 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007166:	f001 ff19 	bl	8008f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800716a:	2300      	movs	r3, #0
 800716c:	e05c      	b.n	8007228 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007174:	f107 0314 	add.w	r3, r7, #20
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f817 	bl	80081ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717e:	2301      	movs	r3, #1
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007182:	f001 ff0b 	bl	8008f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007186:	f000 fd87 	bl	8007c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718a:	f001 fed5 	bl	8008f38 <vPortEnterCritical>
 800718e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007194:	b25b      	sxtb	r3, r3
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d103      	bne.n	80071a4 <xQueueGenericSend+0x174>
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071aa:	b25b      	sxtb	r3, r3
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSend+0x18a>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ba:	f001 feef 	bl	8008f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071be:	1d3a      	adds	r2, r7, #4
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 f806 	bl	80081d8 <xTaskCheckForTimeOut>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d124      	bne.n	800721c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071d4:	f000 faa6 	bl	8007724 <prvIsQueueFull>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d018      	beq.n	8007210 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	3310      	adds	r3, #16
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 ff2a 	bl	8008040 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071ee:	f000 fa31 	bl	8007654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071f2:	f000 fd5f 	bl	8007cb4 <xTaskResumeAll>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f47f af7c 	bne.w	80070f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80071fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <xQueueGenericSend+0x200>)
 8007200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	e772      	b.n	80070f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007212:	f000 fa1f 	bl	8007654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007216:	f000 fd4d 	bl	8007cb4 <xTaskResumeAll>
 800721a:	e76c      	b.n	80070f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800721c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800721e:	f000 fa19 	bl	8007654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007222:	f000 fd47 	bl	8007cb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007228:	4618      	mov	r0, r3
 800722a:	3738      	adds	r7, #56	@ 0x38
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b090      	sub	sp, #64	@ 0x40
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <xQueueGenericSendFromISR+0x3e>
 800726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <xQueueGenericSendFromISR+0x42>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <xQueueGenericSendFromISR+0x44>
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d103      	bne.n	80072a2 <xQueueGenericSendFromISR+0x6e>
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <xQueueGenericSendFromISR+0x72>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <xQueueGenericSendFromISR+0x74>
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	623b      	str	r3, [r7, #32]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072c4:	f001 ff18 	bl	80090f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072c8:	f3ef 8211 	mrs	r2, BASEPRI
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	61fa      	str	r2, [r7, #28]
 80072de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d302      	bcc.n	80072f6 <xQueueGenericSendFromISR+0xc2>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d12f      	bne.n	8007356 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007304:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800730c:	f000 f912 	bl	8007534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007310:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d112      	bne.n	8007340 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d016      	beq.n	8007350 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007324:	3324      	adds	r3, #36	@ 0x24
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fedc 	bl	80080e4 <xTaskRemoveFromEventList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00e      	beq.n	8007350 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e007      	b.n	8007350 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007340:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007344:	3301      	adds	r3, #1
 8007346:	b2db      	uxtb	r3, r3
 8007348:	b25a      	sxtb	r2, r3
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007350:	2301      	movs	r3, #1
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007354:	e001      	b.n	800735a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007364:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007368:	4618      	mov	r0, r3
 800736a:	3740      	adds	r7, #64	@ 0x40
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08c      	sub	sp, #48	@ 0x30
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800737c:	2300      	movs	r3, #0
 800737e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <xQueueReceive+0x32>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	623b      	str	r3, [r7, #32]
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <xQueueReceive+0x40>
 80073a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <xQueueReceive+0x44>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <xQueueReceive+0x46>
 80073b4:	2300      	movs	r3, #0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <xQueueReceive+0x62>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	61fb      	str	r3, [r7, #28]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073d2:	f001 f847 	bl	8008464 <xTaskGetSchedulerState>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <xQueueReceive+0x72>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <xQueueReceive+0x76>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <xQueueReceive+0x78>
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <xQueueReceive+0x94>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	61bb      	str	r3, [r7, #24]
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	e7fd      	b.n	8007400 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007404:	f001 fd98 	bl	8008f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01f      	beq.n	8007454 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007414:	68b9      	ldr	r1, [r7, #8]
 8007416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007418:	f000 f8f6 	bl	8007608 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	1e5a      	subs	r2, r3, #1
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00f      	beq.n	800744c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	3310      	adds	r3, #16
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fe57 	bl	80080e4 <xTaskRemoveFromEventList>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800743c:	4b3c      	ldr	r3, [pc, #240]	@ (8007530 <xQueueReceive+0x1c0>)
 800743e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800744c:	f001 fda6 	bl	8008f9c <vPortExitCritical>
				return pdPASS;
 8007450:	2301      	movs	r3, #1
 8007452:	e069      	b.n	8007528 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800745a:	f001 fd9f 	bl	8008f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800745e:	2300      	movs	r3, #0
 8007460:	e062      	b.n	8007528 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007468:	f107 0310 	add.w	r3, r7, #16
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fe9d 	bl	80081ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007476:	f001 fd91 	bl	8008f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800747a:	f000 fc0d 	bl	8007c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800747e:	f001 fd5b 	bl	8008f38 <vPortEnterCritical>
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007488:	b25b      	sxtb	r3, r3
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d103      	bne.n	8007498 <xQueueReceive+0x128>
 8007490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800749e:	b25b      	sxtb	r3, r3
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d103      	bne.n	80074ae <xQueueReceive+0x13e>
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074ae:	f001 fd75 	bl	8008f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074b2:	1d3a      	adds	r2, r7, #4
 80074b4:	f107 0310 	add.w	r3, r7, #16
 80074b8:	4611      	mov	r1, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fe8c 	bl	80081d8 <xTaskCheckForTimeOut>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d123      	bne.n	800750e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074c8:	f000 f916 	bl	80076f8 <prvIsQueueEmpty>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d017      	beq.n	8007502 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d4:	3324      	adds	r3, #36	@ 0x24
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fdb0 	bl	8008040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e2:	f000 f8b7 	bl	8007654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074e6:	f000 fbe5 	bl	8007cb4 <xTaskResumeAll>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d189      	bne.n	8007404 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80074f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007530 <xQueueReceive+0x1c0>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	e780      	b.n	8007404 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007504:	f000 f8a6 	bl	8007654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007508:	f000 fbd4 	bl	8007cb4 <xTaskResumeAll>
 800750c:	e77a      	b.n	8007404 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800750e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007510:	f000 f8a0 	bl	8007654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007514:	f000 fbce 	bl	8007cb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800751a:	f000 f8ed 	bl	80076f8 <prvIsQueueEmpty>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	f43f af6f 	beq.w	8007404 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007526:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007528:	4618      	mov	r0, r3
 800752a:	3730      	adds	r7, #48	@ 0x30
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10d      	bne.n	800756e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d14d      	bne.n	80075f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 ff9e 	bl	80084a0 <xTaskPriorityDisinherit>
 8007564:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	609a      	str	r2, [r3, #8]
 800756c:	e043      	b.n	80075f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d119      	bne.n	80075a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6858      	ldr	r0, [r3, #4]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757c:	461a      	mov	r2, r3
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	f003 f80d 	bl	800a59e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758c:	441a      	add	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	429a      	cmp	r2, r3
 800759c:	d32b      	bcc.n	80075f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	e026      	b.n	80075f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68d8      	ldr	r0, [r3, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b0:	461a      	mov	r2, r3
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	f002 fff3 	bl	800a59e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	425b      	negs	r3, r3
 80075c2:	441a      	add	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d207      	bcs.n	80075e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075dc:	425b      	negs	r3, r3
 80075de:	441a      	add	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d105      	bne.n	80075f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80075fe:	697b      	ldr	r3, [r7, #20]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d018      	beq.n	800764c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	441a      	add	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	429a      	cmp	r2, r3
 8007632:	d303      	bcc.n	800763c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68d9      	ldr	r1, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007644:	461a      	mov	r2, r3
 8007646:	6838      	ldr	r0, [r7, #0]
 8007648:	f002 ffa9 	bl	800a59e <memcpy>
	}
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800765c:	f001 fc6c 	bl	8008f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007668:	e011      	b.n	800768e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	d012      	beq.n	8007698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3324      	adds	r3, #36	@ 0x24
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fd34 	bl	80080e4 <xTaskRemoveFromEventList>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007682:	f000 fe0d 	bl	80082a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	3b01      	subs	r3, #1
 800768a:	b2db      	uxtb	r3, r3
 800768c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800768e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007692:	2b00      	cmp	r3, #0
 8007694:	dce9      	bgt.n	800766a <prvUnlockQueue+0x16>
 8007696:	e000      	b.n	800769a <prvUnlockQueue+0x46>
					break;
 8007698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	22ff      	movs	r2, #255	@ 0xff
 800769e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076a2:	f001 fc7b 	bl	8008f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076a6:	f001 fc47 	bl	8008f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076b2:	e011      	b.n	80076d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d012      	beq.n	80076e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3310      	adds	r3, #16
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fd0f 	bl	80080e4 <xTaskRemoveFromEventList>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076cc:	f000 fde8 	bl	80082a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dce9      	bgt.n	80076b4 <prvUnlockQueue+0x60>
 80076e0:	e000      	b.n	80076e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	22ff      	movs	r2, #255	@ 0xff
 80076e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80076ec:	f001 fc56 	bl	8008f9c <vPortExitCritical>
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007700:	f001 fc1a 	bl	8008f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800770c:	2301      	movs	r3, #1
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e001      	b.n	8007716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007716:	f001 fc41 	bl	8008f9c <vPortExitCritical>

	return xReturn;
 800771a:	68fb      	ldr	r3, [r7, #12]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800772c:	f001 fc04 	bl	8008f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007738:	429a      	cmp	r2, r3
 800773a:	d102      	bne.n	8007742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800773c:	2301      	movs	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e001      	b.n	8007746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007746:	f001 fc29 	bl	8008f9c <vPortExitCritical>

	return xReturn;
 800774a:	68fb      	ldr	r3, [r7, #12]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	e014      	b.n	800778e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007764:	4a0f      	ldr	r2, [pc, #60]	@ (80077a4 <vQueueAddToRegistry+0x50>)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10b      	bne.n	8007788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007770:	490c      	ldr	r1, [pc, #48]	@ (80077a4 <vQueueAddToRegistry+0x50>)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800777a:	4a0a      	ldr	r2, [pc, #40]	@ (80077a4 <vQueueAddToRegistry+0x50>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007786:	e006      	b.n	8007796 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b07      	cmp	r3, #7
 8007792:	d9e7      	bls.n	8007764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000b6c 	.word	0x20000b6c

080077a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077b8:	f001 fbbe 	bl	8008f38 <vPortEnterCritical>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077c2:	b25b      	sxtb	r3, r3
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d103      	bne.n	80077d2 <vQueueWaitForMessageRestricted+0x2a>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077d8:	b25b      	sxtb	r3, r3
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d103      	bne.n	80077e8 <vQueueWaitForMessageRestricted+0x40>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077e8:	f001 fbd8 	bl	8008f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	3324      	adds	r3, #36	@ 0x24
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fc45 	bl	800808c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007802:	6978      	ldr	r0, [r7, #20]
 8007804:	f7ff ff26 	bl	8007654 <prvUnlockQueue>
	}
 8007808:	bf00      	nop
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	@ 0x38
 8007814:	af04      	add	r7, sp, #16
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800781e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	623b      	str	r3, [r7, #32]
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800783c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	61fb      	str	r3, [r7, #28]
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	e7fd      	b.n	8007856 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800785a:	235c      	movs	r3, #92	@ 0x5c
 800785c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b5c      	cmp	r3, #92	@ 0x5c
 8007862:	d00b      	beq.n	800787c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	61bb      	str	r3, [r7, #24]
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800787c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800787e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01e      	beq.n	80078c2 <xTaskCreateStatic+0xb2>
 8007884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01b      	beq.n	80078c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800788a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007892:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	2202      	movs	r2, #2
 8007898:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800789c:	2300      	movs	r3, #0
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a2:	9302      	str	r3, [sp, #8]
 80078a4:	f107 0314 	add.w	r3, r7, #20
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f850 	bl	800795a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078bc:	f000 f8de 	bl	8007a7c <prvAddNewTaskToReadyList>
 80078c0:	e001      	b.n	80078c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078c6:	697b      	ldr	r3, [r7, #20]
	}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	@ 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08c      	sub	sp, #48	@ 0x30
 80078d4:	af04      	add	r7, sp, #16
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 fc49 	bl	800917c <pvPortMalloc>
 80078ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078f2:	205c      	movs	r0, #92	@ 0x5c
 80078f4:	f001 fc42 	bl	800917c <pvPortMalloc>
 80078f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	631a      	str	r2, [r3, #48]	@ 0x30
 8007906:	e005      	b.n	8007914 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007908:	6978      	ldr	r0, [r7, #20]
 800790a:	f001 fd05 	bl	8009318 <vPortFree>
 800790e:	e001      	b.n	8007914 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d017      	beq.n	800794a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007922:	88fa      	ldrh	r2, [r7, #6]
 8007924:	2300      	movs	r3, #0
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	9302      	str	r3, [sp, #8]
 800792c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f80e 	bl	800795a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800793e:	69f8      	ldr	r0, [r7, #28]
 8007940:	f000 f89c 	bl	8007a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007944:	2301      	movs	r3, #1
 8007946:	61bb      	str	r3, [r7, #24]
 8007948:	e002      	b.n	8007950 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007950:	69bb      	ldr	r3, [r7, #24]
	}
 8007952:	4618      	mov	r0, r3
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b088      	sub	sp, #32
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	461a      	mov	r2, r3
 8007972:	21a5      	movs	r1, #165	@ 0xa5
 8007974:	f002 fd81 	bl	800a47a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007982:	3b01      	subs	r3, #1
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	f023 0307 	bic.w	r3, r3, #7
 8007990:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	617b      	str	r3, [r7, #20]
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01f      	beq.n	80079fa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ba:	2300      	movs	r3, #0
 80079bc:	61fb      	str	r3, [r7, #28]
 80079be:	e012      	b.n	80079e6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	7819      	ldrb	r1, [r3, #0]
 80079c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	3334      	adds	r3, #52	@ 0x34
 80079d0:	460a      	mov	r2, r1
 80079d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d006      	beq.n	80079ee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	2b0f      	cmp	r3, #15
 80079ea:	d9e9      	bls.n	80079c0 <prvInitialiseNewTask+0x66>
 80079ec:	e000      	b.n	80079f0 <prvInitialiseNewTask+0x96>
			{
				break;
 80079ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079f8:	e003      	b.n	8007a02 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	2b37      	cmp	r3, #55	@ 0x37
 8007a06:	d901      	bls.n	8007a0c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a08:	2337      	movs	r3, #55	@ 0x37
 8007a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a16:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	3304      	adds	r3, #4
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff f966 	bl	8006cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	3318      	adds	r3, #24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff f961 	bl	8006cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	68f9      	ldr	r1, [r7, #12]
 8007a5a:	69b8      	ldr	r0, [r7, #24]
 8007a5c:	f001 f93e 	bl	8008cdc <pxPortInitialiseStack>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a72:	bf00      	nop
 8007a74:	3720      	adds	r7, #32
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a84:	f001 fa58 	bl	8008f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a88:	4b2d      	ldr	r3, [pc, #180]	@ (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a92:	4b2c      	ldr	r3, [pc, #176]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007aa0:	4b27      	ldr	r3, [pc, #156]	@ (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d110      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007aa8:	f000 fc1e 	bl	80082e8 <prvInitialiseTaskLists>
 8007aac:	e00d      	b.n	8007aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aae:	4b26      	ldr	r3, [pc, #152]	@ (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ab6:	4b23      	ldr	r3, [pc, #140]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d802      	bhi.n	8007aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aca:	4b20      	ldr	r3, [pc, #128]	@ (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d903      	bls.n	8007af0 <prvAddNewTaskToReadyList+0x74>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	4a18      	ldr	r2, [pc, #96]	@ (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4a15      	ldr	r2, [pc, #84]	@ (8007b54 <prvAddNewTaskToReadyList+0xd8>)
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7ff f901 	bl	8006d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b0c:	f001 fa46 	bl	8008f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b10:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b18:	4b0a      	ldr	r3, [pc, #40]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d207      	bcs.n	8007b36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b26:	4b0c      	ldr	r3, [pc, #48]	@ (8007b58 <prvAddNewTaskToReadyList+0xdc>)
 8007b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20001080 	.word	0x20001080
 8007b44:	20000bac 	.word	0x20000bac
 8007b48:	2000108c 	.word	0x2000108c
 8007b4c:	2000109c 	.word	0x2000109c
 8007b50:	20001088 	.word	0x20001088
 8007b54:	20000bb0 	.word	0x20000bb0
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b6e:	4b14      	ldr	r3, [pc, #80]	@ (8007bc0 <vTaskDelay+0x64>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <vTaskDelay+0x32>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60bb      	str	r3, [r7, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b8e:	f000 f883 	bl	8007c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b92:	2100      	movs	r1, #0
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fcf3 	bl	8008580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b9a:	f000 f88b 	bl	8007cb4 <xTaskResumeAll>
 8007b9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d107      	bne.n	8007bb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007ba6:	4b07      	ldr	r3, [pc, #28]	@ (8007bc4 <vTaskDelay+0x68>)
 8007ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	200010a8 	.word	0x200010a8
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	@ 0x28
 8007bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bd6:	463a      	mov	r2, r7
 8007bd8:	1d39      	adds	r1, r7, #4
 8007bda:	f107 0308 	add.w	r3, r7, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff f834 	bl	8006c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	9202      	str	r2, [sp, #8]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	460a      	mov	r2, r1
 8007bf6:	4922      	ldr	r1, [pc, #136]	@ (8007c80 <vTaskStartScheduler+0xb8>)
 8007bf8:	4822      	ldr	r0, [pc, #136]	@ (8007c84 <vTaskStartScheduler+0xbc>)
 8007bfa:	f7ff fe09 	bl	8007810 <xTaskCreateStatic>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4a21      	ldr	r2, [pc, #132]	@ (8007c88 <vTaskStartScheduler+0xc0>)
 8007c02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c04:	4b20      	ldr	r3, [pc, #128]	@ (8007c88 <vTaskStartScheduler+0xc0>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e001      	b.n	8007c16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d102      	bne.n	8007c22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c1c:	f000 fd04 	bl	8008628 <xTimerCreateTimerTask>
 8007c20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d116      	bne.n	8007c56 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	613b      	str	r3, [r7, #16]
}
 8007c3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c3c:	4b13      	ldr	r3, [pc, #76]	@ (8007c8c <vTaskStartScheduler+0xc4>)
 8007c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c44:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <vTaskStartScheduler+0xc8>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c4a:	4b12      	ldr	r3, [pc, #72]	@ (8007c94 <vTaskStartScheduler+0xcc>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c50:	f001 f8ce 	bl	8008df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c54:	e00f      	b.n	8007c76 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d10b      	bne.n	8007c76 <vTaskStartScheduler+0xae>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60fb      	str	r3, [r7, #12]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <vTaskStartScheduler+0xaa>
}
 8007c76:	bf00      	nop
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	0800dcd8 	.word	0x0800dcd8
 8007c84:	080082b9 	.word	0x080082b9
 8007c88:	200010a4 	.word	0x200010a4
 8007c8c:	200010a0 	.word	0x200010a0
 8007c90:	2000108c 	.word	0x2000108c
 8007c94:	20001084 	.word	0x20001084

08007c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c9c:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <vTaskSuspendAll+0x18>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	4a03      	ldr	r2, [pc, #12]	@ (8007cb0 <vTaskSuspendAll+0x18>)
 8007ca4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ca6:	bf00      	nop
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	200010a8 	.word	0x200010a8

08007cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cc2:	4b42      	ldr	r3, [pc, #264]	@ (8007dcc <xTaskResumeAll+0x118>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10b      	bne.n	8007ce2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	603b      	str	r3, [r7, #0]
}
 8007cdc:	bf00      	nop
 8007cde:	bf00      	nop
 8007ce0:	e7fd      	b.n	8007cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ce2:	f001 f929 	bl	8008f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ce6:	4b39      	ldr	r3, [pc, #228]	@ (8007dcc <xTaskResumeAll+0x118>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	4a37      	ldr	r2, [pc, #220]	@ (8007dcc <xTaskResumeAll+0x118>)
 8007cee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cf0:	4b36      	ldr	r3, [pc, #216]	@ (8007dcc <xTaskResumeAll+0x118>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d162      	bne.n	8007dbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cf8:	4b35      	ldr	r3, [pc, #212]	@ (8007dd0 <xTaskResumeAll+0x11c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d05e      	beq.n	8007dbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d00:	e02f      	b.n	8007d62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d02:	4b34      	ldr	r3, [pc, #208]	@ (8007dd4 <xTaskResumeAll+0x120>)
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3318      	adds	r3, #24
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f85a 	bl	8006dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3304      	adds	r3, #4
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff f855 	bl	8006dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d22:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd8 <xTaskResumeAll+0x124>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d903      	bls.n	8007d32 <xTaskResumeAll+0x7e>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007dd8 <xTaskResumeAll+0x124>)
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4a27      	ldr	r2, [pc, #156]	@ (8007ddc <xTaskResumeAll+0x128>)
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4619      	mov	r1, r3
 8007d48:	4610      	mov	r0, r2
 8007d4a:	f7fe ffe0 	bl	8006d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d52:	4b23      	ldr	r3, [pc, #140]	@ (8007de0 <xTaskResumeAll+0x12c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d302      	bcc.n	8007d62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d5c:	4b21      	ldr	r3, [pc, #132]	@ (8007de4 <xTaskResumeAll+0x130>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d62:	4b1c      	ldr	r3, [pc, #112]	@ (8007dd4 <xTaskResumeAll+0x120>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1cb      	bne.n	8007d02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d70:	f000 fb58 	bl	8008424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d74:	4b1c      	ldr	r3, [pc, #112]	@ (8007de8 <xTaskResumeAll+0x134>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d010      	beq.n	8007da2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d80:	f000 f846 	bl	8007e10 <xTaskIncrementTick>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007d8a:	4b16      	ldr	r3, [pc, #88]	@ (8007de4 <xTaskResumeAll+0x130>)
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1f1      	bne.n	8007d80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007d9c:	4b12      	ldr	r3, [pc, #72]	@ (8007de8 <xTaskResumeAll+0x134>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007da2:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <xTaskResumeAll+0x130>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dae:	4b0f      	ldr	r3, [pc, #60]	@ (8007dec <xTaskResumeAll+0x138>)
 8007db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dbe:	f001 f8ed 	bl	8008f9c <vPortExitCritical>

	return xAlreadyYielded;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	200010a8 	.word	0x200010a8
 8007dd0:	20001080 	.word	0x20001080
 8007dd4:	20001040 	.word	0x20001040
 8007dd8:	20001088 	.word	0x20001088
 8007ddc:	20000bb0 	.word	0x20000bb0
 8007de0:	20000bac 	.word	0x20000bac
 8007de4:	20001094 	.word	0x20001094
 8007de8:	20001090 	.word	0x20001090
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007df6:	4b05      	ldr	r3, [pc, #20]	@ (8007e0c <xTaskGetTickCount+0x1c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007dfc:	687b      	ldr	r3, [r7, #4]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	20001084 	.word	0x20001084

08007e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f58 <xTaskIncrementTick+0x148>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f040 8090 	bne.w	8007f44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e24:	4b4d      	ldr	r3, [pc, #308]	@ (8007f5c <xTaskIncrementTick+0x14c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8007f5c <xTaskIncrementTick+0x14c>)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d121      	bne.n	8007e7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e38:	4b49      	ldr	r3, [pc, #292]	@ (8007f60 <xTaskIncrementTick+0x150>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	603b      	str	r3, [r7, #0]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <xTaskIncrementTick+0x46>
 8007e5a:	4b41      	ldr	r3, [pc, #260]	@ (8007f60 <xTaskIncrementTick+0x150>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	4b40      	ldr	r3, [pc, #256]	@ (8007f64 <xTaskIncrementTick+0x154>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a3e      	ldr	r2, [pc, #248]	@ (8007f60 <xTaskIncrementTick+0x150>)
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	4a3e      	ldr	r2, [pc, #248]	@ (8007f64 <xTaskIncrementTick+0x154>)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007f68 <xTaskIncrementTick+0x158>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3301      	adds	r3, #1
 8007e74:	4a3c      	ldr	r2, [pc, #240]	@ (8007f68 <xTaskIncrementTick+0x158>)
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	f000 fad4 	bl	8008424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f6c <xTaskIncrementTick+0x15c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d349      	bcc.n	8007f1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e86:	4b36      	ldr	r3, [pc, #216]	@ (8007f60 <xTaskIncrementTick+0x150>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e90:	4b36      	ldr	r3, [pc, #216]	@ (8007f6c <xTaskIncrementTick+0x15c>)
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	601a      	str	r2, [r3, #0]
					break;
 8007e98:	e03f      	b.n	8007f1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9a:	4b31      	ldr	r3, [pc, #196]	@ (8007f60 <xTaskIncrementTick+0x150>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d203      	bcs.n	8007eba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8007f6c <xTaskIncrementTick+0x15c>)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eb8:	e02f      	b.n	8007f1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe ff82 	bl	8006dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	3318      	adds	r3, #24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe ff79 	bl	8006dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eda:	4b25      	ldr	r3, [pc, #148]	@ (8007f70 <xTaskIncrementTick+0x160>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d903      	bls.n	8007eea <xTaskIncrementTick+0xda>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	4a22      	ldr	r2, [pc, #136]	@ (8007f70 <xTaskIncrementTick+0x160>)
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f74 <xTaskIncrementTick+0x164>)
 8007ef8:	441a      	add	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7fe ff04 	bl	8006d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f78 <xTaskIncrementTick+0x168>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d3b8      	bcc.n	8007e86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f18:	e7b5      	b.n	8007e86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f1a:	4b17      	ldr	r3, [pc, #92]	@ (8007f78 <xTaskIncrementTick+0x168>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f20:	4914      	ldr	r1, [pc, #80]	@ (8007f74 <xTaskIncrementTick+0x164>)
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d901      	bls.n	8007f36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f36:	4b11      	ldr	r3, [pc, #68]	@ (8007f7c <xTaskIncrementTick+0x16c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d007      	beq.n	8007f4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	e004      	b.n	8007f4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f44:	4b0e      	ldr	r3, [pc, #56]	@ (8007f80 <xTaskIncrementTick+0x170>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007f80 <xTaskIncrementTick+0x170>)
 8007f4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f4e:	697b      	ldr	r3, [r7, #20]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200010a8 	.word	0x200010a8
 8007f5c:	20001084 	.word	0x20001084
 8007f60:	20001038 	.word	0x20001038
 8007f64:	2000103c 	.word	0x2000103c
 8007f68:	20001098 	.word	0x20001098
 8007f6c:	200010a0 	.word	0x200010a0
 8007f70:	20001088 	.word	0x20001088
 8007f74:	20000bb0 	.word	0x20000bb0
 8007f78:	20000bac 	.word	0x20000bac
 8007f7c:	20001094 	.word	0x20001094
 8007f80:	20001090 	.word	0x20001090

08007f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f8a:	4b28      	ldr	r3, [pc, #160]	@ (800802c <vTaskSwitchContext+0xa8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f92:	4b27      	ldr	r3, [pc, #156]	@ (8008030 <vTaskSwitchContext+0xac>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f98:	e042      	b.n	8008020 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007f9a:	4b25      	ldr	r3, [pc, #148]	@ (8008030 <vTaskSwitchContext+0xac>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa0:	4b24      	ldr	r3, [pc, #144]	@ (8008034 <vTaskSwitchContext+0xb0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e011      	b.n	8007fcc <vTaskSwitchContext+0x48>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <vTaskSwitchContext+0x3e>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	491a      	ldr	r1, [pc, #104]	@ (8008038 <vTaskSwitchContext+0xb4>)
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0e3      	beq.n	8007fa8 <vTaskSwitchContext+0x24>
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4a13      	ldr	r2, [pc, #76]	@ (8008038 <vTaskSwitchContext+0xb4>)
 8007fec:	4413      	add	r3, r2
 8007fee:	60bb      	str	r3, [r7, #8]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	3308      	adds	r3, #8
 8008002:	429a      	cmp	r2, r3
 8008004:	d104      	bne.n	8008010 <vTaskSwitchContext+0x8c>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	605a      	str	r2, [r3, #4]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	4a09      	ldr	r2, [pc, #36]	@ (800803c <vTaskSwitchContext+0xb8>)
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	4a06      	ldr	r2, [pc, #24]	@ (8008034 <vTaskSwitchContext+0xb0>)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	200010a8 	.word	0x200010a8
 8008030:	20001094 	.word	0x20001094
 8008034:	20001088 	.word	0x20001088
 8008038:	20000bb0 	.word	0x20000bb0
 800803c:	20000bac 	.word	0x20000bac

08008040 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008068:	4b07      	ldr	r3, [pc, #28]	@ (8008088 <vTaskPlaceOnEventList+0x48>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3318      	adds	r3, #24
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fe fe70 	bl	8006d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008076:	2101      	movs	r1, #1
 8008078:	6838      	ldr	r0, [r7, #0]
 800807a:	f000 fa81 	bl	8008580 <prvAddCurrentTaskToDelayedList>
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000bac 	.word	0x20000bac

0800808c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	617b      	str	r3, [r7, #20]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080b6:	4b0a      	ldr	r3, [pc, #40]	@ (80080e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3318      	adds	r3, #24
 80080bc:	4619      	mov	r1, r3
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7fe fe25 	bl	8006d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80080ca:	f04f 33ff 	mov.w	r3, #4294967295
 80080ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	68b8      	ldr	r0, [r7, #8]
 80080d4:	f000 fa54 	bl	8008580 <prvAddCurrentTaskToDelayedList>
	}
 80080d8:	bf00      	nop
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20000bac 	.word	0x20000bac

080080e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	60fb      	str	r3, [r7, #12]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	3318      	adds	r3, #24
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fe56 	bl	8006dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811c:	4b1d      	ldr	r3, [pc, #116]	@ (8008194 <xTaskRemoveFromEventList+0xb0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11d      	bne.n	8008160 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	3304      	adds	r3, #4
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fe4d 	bl	8006dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008132:	4b19      	ldr	r3, [pc, #100]	@ (8008198 <xTaskRemoveFromEventList+0xb4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d903      	bls.n	8008142 <xTaskRemoveFromEventList+0x5e>
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	4a16      	ldr	r2, [pc, #88]	@ (8008198 <xTaskRemoveFromEventList+0xb4>)
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4a13      	ldr	r2, [pc, #76]	@ (800819c <xTaskRemoveFromEventList+0xb8>)
 8008150:	441a      	add	r2, r3
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	3304      	adds	r3, #4
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f7fe fdd8 	bl	8006d0e <vListInsertEnd>
 800815e:	e005      	b.n	800816c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	3318      	adds	r3, #24
 8008164:	4619      	mov	r1, r3
 8008166:	480e      	ldr	r0, [pc, #56]	@ (80081a0 <xTaskRemoveFromEventList+0xbc>)
 8008168:	f7fe fdd1 	bl	8006d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008170:	4b0c      	ldr	r3, [pc, #48]	@ (80081a4 <xTaskRemoveFromEventList+0xc0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	429a      	cmp	r2, r3
 8008178:	d905      	bls.n	8008186 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800817a:	2301      	movs	r3, #1
 800817c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800817e:	4b0a      	ldr	r3, [pc, #40]	@ (80081a8 <xTaskRemoveFromEventList+0xc4>)
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e001      	b.n	800818a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800818a:	697b      	ldr	r3, [r7, #20]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	200010a8 	.word	0x200010a8
 8008198:	20001088 	.word	0x20001088
 800819c:	20000bb0 	.word	0x20000bb0
 80081a0:	20001040 	.word	0x20001040
 80081a4:	20000bac 	.word	0x20000bac
 80081a8:	20001094 	.word	0x20001094

080081ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081b4:	4b06      	ldr	r3, [pc, #24]	@ (80081d0 <vTaskInternalSetTimeOutState+0x24>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081bc:	4b05      	ldr	r3, [pc, #20]	@ (80081d4 <vTaskInternalSetTimeOutState+0x28>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	605a      	str	r2, [r3, #4]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	20001098 	.word	0x20001098
 80081d4:	20001084 	.word	0x20001084

080081d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	613b      	str	r3, [r7, #16]
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	60fb      	str	r3, [r7, #12]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800821e:	f000 fe8b 	bl	8008f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008222:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <xTaskCheckForTimeOut+0xc0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d102      	bne.n	8008242 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800823c:	2300      	movs	r3, #0
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	e023      	b.n	800828a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	4b15      	ldr	r3, [pc, #84]	@ (800829c <xTaskCheckForTimeOut+0xc4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d007      	beq.n	800825e <xTaskCheckForTimeOut+0x86>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	429a      	cmp	r2, r3
 8008256:	d302      	bcc.n	800825e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008258:	2301      	movs	r3, #1
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	e015      	b.n	800828a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	429a      	cmp	r2, r3
 8008266:	d20b      	bcs.n	8008280 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff ff99 	bl	80081ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	e004      	b.n	800828a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008286:	2301      	movs	r3, #1
 8008288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800828a:	f000 fe87 	bl	8008f9c <vPortExitCritical>

	return xReturn;
 800828e:	69fb      	ldr	r3, [r7, #28]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3720      	adds	r7, #32
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20001084 	.word	0x20001084
 800829c:	20001098 	.word	0x20001098

080082a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082a4:	4b03      	ldr	r3, [pc, #12]	@ (80082b4 <vTaskMissedYield+0x14>)
 80082a6:	2201      	movs	r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
}
 80082aa:	bf00      	nop
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	20001094 	.word	0x20001094

080082b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082c0:	f000 f852 	bl	8008368 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082c4:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <prvIdleTask+0x28>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d9f9      	bls.n	80082c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082cc:	4b05      	ldr	r3, [pc, #20]	@ (80082e4 <prvIdleTask+0x2c>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082dc:	e7f0      	b.n	80082c0 <prvIdleTask+0x8>
 80082de:	bf00      	nop
 80082e0:	20000bb0 	.word	0x20000bb0
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ee:	2300      	movs	r3, #0
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	e00c      	b.n	800830e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4a12      	ldr	r2, [pc, #72]	@ (8008348 <prvInitialiseTaskLists+0x60>)
 8008300:	4413      	add	r3, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fcd6 	bl	8006cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3301      	adds	r3, #1
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b37      	cmp	r3, #55	@ 0x37
 8008312:	d9ef      	bls.n	80082f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008314:	480d      	ldr	r0, [pc, #52]	@ (800834c <prvInitialiseTaskLists+0x64>)
 8008316:	f7fe fccd 	bl	8006cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800831a:	480d      	ldr	r0, [pc, #52]	@ (8008350 <prvInitialiseTaskLists+0x68>)
 800831c:	f7fe fcca 	bl	8006cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008320:	480c      	ldr	r0, [pc, #48]	@ (8008354 <prvInitialiseTaskLists+0x6c>)
 8008322:	f7fe fcc7 	bl	8006cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008326:	480c      	ldr	r0, [pc, #48]	@ (8008358 <prvInitialiseTaskLists+0x70>)
 8008328:	f7fe fcc4 	bl	8006cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800832c:	480b      	ldr	r0, [pc, #44]	@ (800835c <prvInitialiseTaskLists+0x74>)
 800832e:	f7fe fcc1 	bl	8006cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008332:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <prvInitialiseTaskLists+0x78>)
 8008334:	4a05      	ldr	r2, [pc, #20]	@ (800834c <prvInitialiseTaskLists+0x64>)
 8008336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008338:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <prvInitialiseTaskLists+0x7c>)
 800833a:	4a05      	ldr	r2, [pc, #20]	@ (8008350 <prvInitialiseTaskLists+0x68>)
 800833c:	601a      	str	r2, [r3, #0]
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000bb0 	.word	0x20000bb0
 800834c:	20001010 	.word	0x20001010
 8008350:	20001024 	.word	0x20001024
 8008354:	20001040 	.word	0x20001040
 8008358:	20001054 	.word	0x20001054
 800835c:	2000106c 	.word	0x2000106c
 8008360:	20001038 	.word	0x20001038
 8008364:	2000103c 	.word	0x2000103c

08008368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800836e:	e019      	b.n	80083a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008370:	f000 fde2 	bl	8008f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008374:	4b10      	ldr	r3, [pc, #64]	@ (80083b8 <prvCheckTasksWaitingTermination+0x50>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fd21 	bl	8006dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008386:	4b0d      	ldr	r3, [pc, #52]	@ (80083bc <prvCheckTasksWaitingTermination+0x54>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3b01      	subs	r3, #1
 800838c:	4a0b      	ldr	r2, [pc, #44]	@ (80083bc <prvCheckTasksWaitingTermination+0x54>)
 800838e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008390:	4b0b      	ldr	r3, [pc, #44]	@ (80083c0 <prvCheckTasksWaitingTermination+0x58>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3b01      	subs	r3, #1
 8008396:	4a0a      	ldr	r2, [pc, #40]	@ (80083c0 <prvCheckTasksWaitingTermination+0x58>)
 8008398:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800839a:	f000 fdff 	bl	8008f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f810 	bl	80083c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083a4:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <prvCheckTasksWaitingTermination+0x58>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e1      	bne.n	8008370 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20001054 	.word	0x20001054
 80083bc:	20001080 	.word	0x20001080
 80083c0:	20001068 	.word	0x20001068

080083c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d108      	bne.n	80083e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 ff9c 	bl	8009318 <vPortFree>
				vPortFree( pxTCB );
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 ff99 	bl	8009318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083e6:	e019      	b.n	800841c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d103      	bne.n	80083fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 ff90 	bl	8009318 <vPortFree>
	}
 80083f8:	e010      	b.n	800841c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008400:	2b02      	cmp	r3, #2
 8008402:	d00b      	beq.n	800841c <prvDeleteTCB+0x58>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	60fb      	str	r3, [r7, #12]
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <prvDeleteTCB+0x54>
	}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842a:	4b0c      	ldr	r3, [pc, #48]	@ (800845c <prvResetNextTaskUnblockTime+0x38>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008434:	4b0a      	ldr	r3, [pc, #40]	@ (8008460 <prvResetNextTaskUnblockTime+0x3c>)
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800843c:	e008      	b.n	8008450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800843e:	4b07      	ldr	r3, [pc, #28]	@ (800845c <prvResetNextTaskUnblockTime+0x38>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	4a04      	ldr	r2, [pc, #16]	@ (8008460 <prvResetNextTaskUnblockTime+0x3c>)
 800844e:	6013      	str	r3, [r2, #0]
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	20001038 	.word	0x20001038
 8008460:	200010a0 	.word	0x200010a0

08008464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800846a:	4b0b      	ldr	r3, [pc, #44]	@ (8008498 <xTaskGetSchedulerState+0x34>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008472:	2301      	movs	r3, #1
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	e008      	b.n	800848a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008478:	4b08      	ldr	r3, [pc, #32]	@ (800849c <xTaskGetSchedulerState+0x38>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008480:	2302      	movs	r3, #2
 8008482:	607b      	str	r3, [r7, #4]
 8008484:	e001      	b.n	800848a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800848a:	687b      	ldr	r3, [r7, #4]
	}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	2000108c 	.word	0x2000108c
 800849c:	200010a8 	.word	0x200010a8

080084a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d058      	beq.n	8008568 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008574 <xTaskPriorityDisinherit+0xd4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d00b      	beq.n	80084d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	e7fd      	b.n	80084d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10b      	bne.n	80084f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	60bb      	str	r3, [r7, #8]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800850a:	429a      	cmp	r2, r3
 800850c:	d02c      	beq.n	8008568 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008512:	2b00      	cmp	r3, #0
 8008514:	d128      	bne.n	8008568 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	3304      	adds	r3, #4
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fc54 	bl	8006dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008538:	4b0f      	ldr	r3, [pc, #60]	@ (8008578 <xTaskPriorityDisinherit+0xd8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d903      	bls.n	8008548 <xTaskPriorityDisinherit+0xa8>
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	4a0c      	ldr	r2, [pc, #48]	@ (8008578 <xTaskPriorityDisinherit+0xd8>)
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4a09      	ldr	r2, [pc, #36]	@ (800857c <xTaskPriorityDisinherit+0xdc>)
 8008556:	441a      	add	r2, r3
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	3304      	adds	r3, #4
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7fe fbd5 	bl	8006d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008564:	2301      	movs	r3, #1
 8008566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008568:	697b      	ldr	r3, [r7, #20]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000bac 	.word	0x20000bac
 8008578:	20001088 	.word	0x20001088
 800857c:	20000bb0 	.word	0x20000bb0

08008580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800858a:	4b21      	ldr	r3, [pc, #132]	@ (8008610 <prvAddCurrentTaskToDelayedList+0x90>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008590:	4b20      	ldr	r3, [pc, #128]	@ (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3304      	adds	r3, #4
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fc16 	bl	8006dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d10a      	bne.n	80085ba <prvAddCurrentTaskToDelayedList+0x3a>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d007      	beq.n	80085ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4819      	ldr	r0, [pc, #100]	@ (8008618 <prvAddCurrentTaskToDelayedList+0x98>)
 80085b4:	f7fe fbab 	bl	8006d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085b8:	e026      	b.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4413      	add	r3, r2
 80085c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085c2:	4b14      	ldr	r3, [pc, #80]	@ (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d209      	bcs.n	80085e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d2:	4b12      	ldr	r3, [pc, #72]	@ (800861c <prvAddCurrentTaskToDelayedList+0x9c>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fe fbb9 	bl	8006d56 <vListInsert>
}
 80085e4:	e010      	b.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008620 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7fe fbaf 	bl	8006d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008624 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d202      	bcs.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008602:	4a08      	ldr	r2, [pc, #32]	@ (8008624 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6013      	str	r3, [r2, #0]
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	20001084 	.word	0x20001084
 8008614:	20000bac 	.word	0x20000bac
 8008618:	2000106c 	.word	0x2000106c
 800861c:	2000103c 	.word	0x2000103c
 8008620:	20001038 	.word	0x20001038
 8008624:	200010a0 	.word	0x200010a0

08008628 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	@ 0x28
 800862c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008632:	f000 fb13 	bl	8008c5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008636:	4b1d      	ldr	r3, [pc, #116]	@ (80086ac <xTimerCreateTimerTask+0x84>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d021      	beq.n	8008682 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008646:	1d3a      	adds	r2, r7, #4
 8008648:	f107 0108 	add.w	r1, r7, #8
 800864c:	f107 030c 	add.w	r3, r7, #12
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fb15 	bl	8006c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	9202      	str	r2, [sp, #8]
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	2302      	movs	r3, #2
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	460a      	mov	r2, r1
 8008668:	4911      	ldr	r1, [pc, #68]	@ (80086b0 <xTimerCreateTimerTask+0x88>)
 800866a:	4812      	ldr	r0, [pc, #72]	@ (80086b4 <xTimerCreateTimerTask+0x8c>)
 800866c:	f7ff f8d0 	bl	8007810 <xTaskCreateStatic>
 8008670:	4603      	mov	r3, r0
 8008672:	4a11      	ldr	r2, [pc, #68]	@ (80086b8 <xTimerCreateTimerTask+0x90>)
 8008674:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008676:	4b10      	ldr	r3, [pc, #64]	@ (80086b8 <xTimerCreateTimerTask+0x90>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800867e:	2301      	movs	r3, #1
 8008680:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10b      	bne.n	80086a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	613b      	str	r3, [r7, #16]
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	e7fd      	b.n	800869c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80086a0:	697b      	ldr	r3, [r7, #20]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200010dc 	.word	0x200010dc
 80086b0:	0800dce0 	.word	0x0800dce0
 80086b4:	080087f5 	.word	0x080087f5
 80086b8:	200010e0 	.word	0x200010e0

080086bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08a      	sub	sp, #40	@ 0x28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10b      	bne.n	80086ec <xTimerGenericCommand+0x30>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	623b      	str	r3, [r7, #32]
}
 80086e6:	bf00      	nop
 80086e8:	bf00      	nop
 80086ea:	e7fd      	b.n	80086e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086ec:	4b19      	ldr	r3, [pc, #100]	@ (8008754 <xTimerGenericCommand+0x98>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d02a      	beq.n	800874a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b05      	cmp	r3, #5
 8008704:	dc18      	bgt.n	8008738 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008706:	f7ff fead 	bl	8008464 <xTaskGetSchedulerState>
 800870a:	4603      	mov	r3, r0
 800870c:	2b02      	cmp	r3, #2
 800870e:	d109      	bne.n	8008724 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008710:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <xTimerGenericCommand+0x98>)
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	f107 0110 	add.w	r1, r7, #16
 8008718:	2300      	movs	r3, #0
 800871a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800871c:	f7fe fc88 	bl	8007030 <xQueueGenericSend>
 8008720:	6278      	str	r0, [r7, #36]	@ 0x24
 8008722:	e012      	b.n	800874a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008724:	4b0b      	ldr	r3, [pc, #44]	@ (8008754 <xTimerGenericCommand+0x98>)
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	f107 0110 	add.w	r1, r7, #16
 800872c:	2300      	movs	r3, #0
 800872e:	2200      	movs	r2, #0
 8008730:	f7fe fc7e 	bl	8007030 <xQueueGenericSend>
 8008734:	6278      	str	r0, [r7, #36]	@ 0x24
 8008736:	e008      	b.n	800874a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008738:	4b06      	ldr	r3, [pc, #24]	@ (8008754 <xTimerGenericCommand+0x98>)
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	f107 0110 	add.w	r1, r7, #16
 8008740:	2300      	movs	r3, #0
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	f7fe fd76 	bl	8007234 <xQueueGenericSendFromISR>
 8008748:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800874c:	4618      	mov	r0, r3
 800874e:	3728      	adds	r7, #40	@ 0x28
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	200010dc 	.word	0x200010dc

08008758 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af02      	add	r7, sp, #8
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008762:	4b23      	ldr	r3, [pc, #140]	@ (80087f0 <prvProcessExpiredTimer+0x98>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	3304      	adds	r3, #4
 8008770:	4618      	mov	r0, r3
 8008772:	f7fe fb29 	bl	8006dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d023      	beq.n	80087cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	18d1      	adds	r1, r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	6978      	ldr	r0, [r7, #20]
 8008792:	f000 f8d5 	bl	8008940 <prvInsertTimerInActiveList>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d020      	beq.n	80087de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800879c:	2300      	movs	r3, #0
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	2300      	movs	r3, #0
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	2100      	movs	r1, #0
 80087a6:	6978      	ldr	r0, [r7, #20]
 80087a8:	f7ff ff88 	bl	80086bc <xTimerGenericCommand>
 80087ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d114      	bne.n	80087de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60fb      	str	r3, [r7, #12]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087d2:	f023 0301 	bic.w	r3, r3, #1
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	4798      	blx	r3
}
 80087e6:	bf00      	nop
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200010d4 	.word	0x200010d4

080087f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087fc:	f107 0308 	add.w	r3, r7, #8
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f859 	bl	80088b8 <prvGetNextExpireTime>
 8008806:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4619      	mov	r1, r3
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f805 	bl	800881c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008812:	f000 f8d7 	bl	80089c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008816:	bf00      	nop
 8008818:	e7f0      	b.n	80087fc <prvTimerTask+0x8>
	...

0800881c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008826:	f7ff fa37 	bl	8007c98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f866 	bl	8008900 <prvSampleTimeNow>
 8008834:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d130      	bne.n	800889e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <prvProcessTimerOrBlockTask+0x3c>
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	429a      	cmp	r2, r3
 8008848:	d806      	bhi.n	8008858 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800884a:	f7ff fa33 	bl	8007cb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ff81 	bl	8008758 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008856:	e024      	b.n	80088a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d008      	beq.n	8008870 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800885e:	4b13      	ldr	r3, [pc, #76]	@ (80088ac <prvProcessTimerOrBlockTask+0x90>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <prvProcessTimerOrBlockTask+0x50>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <prvProcessTimerOrBlockTask+0x52>
 800886c:	2300      	movs	r3, #0
 800886e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008870:	4b0f      	ldr	r3, [pc, #60]	@ (80088b0 <prvProcessTimerOrBlockTask+0x94>)
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	4619      	mov	r1, r3
 800887e:	f7fe ff93 	bl	80077a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008882:	f7ff fa17 	bl	8007cb4 <xTaskResumeAll>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800888c:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <prvProcessTimerOrBlockTask+0x98>)
 800888e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	f3bf 8f6f 	isb	sy
}
 800889c:	e001      	b.n	80088a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800889e:	f7ff fa09 	bl	8007cb4 <xTaskResumeAll>
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200010d8 	.word	0x200010d8
 80088b0:	200010dc 	.word	0x200010dc
 80088b4:	e000ed04 	.word	0xe000ed04

080088b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088c0:	4b0e      	ldr	r3, [pc, #56]	@ (80088fc <prvGetNextExpireTime+0x44>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <prvGetNextExpireTime+0x16>
 80088ca:	2201      	movs	r2, #1
 80088cc:	e000      	b.n	80088d0 <prvGetNextExpireTime+0x18>
 80088ce:	2200      	movs	r2, #0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d105      	bne.n	80088e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088dc:	4b07      	ldr	r3, [pc, #28]	@ (80088fc <prvGetNextExpireTime+0x44>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	e001      	b.n	80088ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088ec:	68fb      	ldr	r3, [r7, #12]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	200010d4 	.word	0x200010d4

08008900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008908:	f7ff fa72 	bl	8007df0 <xTaskGetTickCount>
 800890c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800890e:	4b0b      	ldr	r3, [pc, #44]	@ (800893c <prvSampleTimeNow+0x3c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	429a      	cmp	r2, r3
 8008916:	d205      	bcs.n	8008924 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008918:	f000 f93a 	bl	8008b90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	e002      	b.n	800892a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800892a:	4a04      	ldr	r2, [pc, #16]	@ (800893c <prvSampleTimeNow+0x3c>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008930:	68fb      	ldr	r3, [r7, #12]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200010e4 	.word	0x200010e4

08008940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	429a      	cmp	r2, r3
 8008964:	d812      	bhi.n	800898c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	1ad2      	subs	r2, r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	429a      	cmp	r2, r3
 8008972:	d302      	bcc.n	800897a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e01b      	b.n	80089b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800897a:	4b10      	ldr	r3, [pc, #64]	@ (80089bc <prvInsertTimerInActiveList+0x7c>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe f9e6 	bl	8006d56 <vListInsert>
 800898a:	e012      	b.n	80089b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d206      	bcs.n	80089a2 <prvInsertTimerInActiveList+0x62>
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e007      	b.n	80089b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089a2:	4b07      	ldr	r3, [pc, #28]	@ (80089c0 <prvInsertTimerInActiveList+0x80>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f7fe f9d2 	bl	8006d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089b2:	697b      	ldr	r3, [r7, #20]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	200010d8 	.word	0x200010d8
 80089c0:	200010d4 	.word	0x200010d4

080089c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08e      	sub	sp, #56	@ 0x38
 80089c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089ca:	e0ce      	b.n	8008b6a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da19      	bge.n	8008a06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089d2:	1d3b      	adds	r3, r7, #4
 80089d4:	3304      	adds	r3, #4
 80089d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	61fb      	str	r3, [r7, #28]
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089fc:	6850      	ldr	r0, [r2, #4]
 80089fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a00:	6892      	ldr	r2, [r2, #8]
 8008a02:	4611      	mov	r1, r2
 8008a04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f2c0 80ae 	blt.w	8008b6a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d004      	beq.n	8008a24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe f9d2 	bl	8006dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a24:	463b      	mov	r3, r7
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff ff6a 	bl	8008900 <prvSampleTimeNow>
 8008a2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b09      	cmp	r3, #9
 8008a32:	f200 8097 	bhi.w	8008b64 <prvProcessReceivedCommands+0x1a0>
 8008a36:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <prvProcessReceivedCommands+0x78>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a65 	.word	0x08008a65
 8008a40:	08008a65 	.word	0x08008a65
 8008a44:	08008a65 	.word	0x08008a65
 8008a48:	08008adb 	.word	0x08008adb
 8008a4c:	08008aef 	.word	0x08008aef
 8008a50:	08008b3b 	.word	0x08008b3b
 8008a54:	08008a65 	.word	0x08008a65
 8008a58:	08008a65 	.word	0x08008a65
 8008a5c:	08008adb 	.word	0x08008adb
 8008a60:	08008aef 	.word	0x08008aef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a6a:	f043 0301 	orr.w	r3, r3, #1
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	18d1      	adds	r1, r2, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a84:	f7ff ff5c 	bl	8008940 <prvInsertTimerInActiveList>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d06c      	beq.n	8008b68 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d061      	beq.n	8008b68 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	441a      	add	r2, r3
 8008aac:	2300      	movs	r3, #0
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ab6:	f7ff fe01 	bl	80086bc <xTimerGenericCommand>
 8008aba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d152      	bne.n	8008b68 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	61bb      	str	r3, [r7, #24]
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008adc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008aec:	e03d      	b.n	8008b6a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008af4:	f043 0301 	orr.w	r3, r3, #1
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10b      	bne.n	8008b26 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	617b      	str	r3, [r7, #20]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b28:	699a      	ldr	r2, [r3, #24]
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	18d1      	adds	r1, r2, r3
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b34:	f7ff ff04 	bl	8008940 <prvInsertTimerInActiveList>
					break;
 8008b38:	e017      	b.n	8008b6a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d103      	bne.n	8008b50 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b4a:	f000 fbe5 	bl	8009318 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b4e:	e00c      	b.n	8008b6a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b62:	e002      	b.n	8008b6a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <prvProcessReceivedCommands+0x1a6>
					break;
 8008b68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b6a:	4b08      	ldr	r3, [pc, #32]	@ (8008b8c <prvProcessReceivedCommands+0x1c8>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	1d39      	adds	r1, r7, #4
 8008b70:	2200      	movs	r2, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fbfc 	bl	8007370 <xQueueReceive>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f47f af26 	bne.w	80089cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	3730      	adds	r7, #48	@ 0x30
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200010dc 	.word	0x200010dc

08008b90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b96:	e049      	b.n	8008c2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b98:	4b2e      	ldr	r3, [pc, #184]	@ (8008c54 <prvSwitchTimerLists+0xc4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8008c54 <prvSwitchTimerLists+0xc4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe f909 	bl	8006dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d02f      	beq.n	8008c2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d90e      	bls.n	8008bfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bea:	4b1a      	ldr	r3, [pc, #104]	@ (8008c54 <prvSwitchTimerLists+0xc4>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	f7fe f8ae 	bl	8006d56 <vListInsert>
 8008bfa:	e017      	b.n	8008c2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	2300      	movs	r3, #0
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	2100      	movs	r1, #0
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff fd58 	bl	80086bc <xTimerGenericCommand>
 8008c0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	603b      	str	r3, [r7, #0]
}
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	e7fd      	b.n	8008c28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c2c:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <prvSwitchTimerLists+0xc4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1b0      	bne.n	8008b98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c36:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <prvSwitchTimerLists+0xc4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <prvSwitchTimerLists+0xc8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a04      	ldr	r2, [pc, #16]	@ (8008c54 <prvSwitchTimerLists+0xc4>)
 8008c42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c44:	4a04      	ldr	r2, [pc, #16]	@ (8008c58 <prvSwitchTimerLists+0xc8>)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	6013      	str	r3, [r2, #0]
}
 8008c4a:	bf00      	nop
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	200010d4 	.word	0x200010d4
 8008c58:	200010d8 	.word	0x200010d8

08008c5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c62:	f000 f969 	bl	8008f38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c66:	4b15      	ldr	r3, [pc, #84]	@ (8008cbc <prvCheckForValidListAndQueue+0x60>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d120      	bne.n	8008cb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c6e:	4814      	ldr	r0, [pc, #80]	@ (8008cc0 <prvCheckForValidListAndQueue+0x64>)
 8008c70:	f7fe f820 	bl	8006cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c74:	4813      	ldr	r0, [pc, #76]	@ (8008cc4 <prvCheckForValidListAndQueue+0x68>)
 8008c76:	f7fe f81d 	bl	8006cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c7a:	4b13      	ldr	r3, [pc, #76]	@ (8008cc8 <prvCheckForValidListAndQueue+0x6c>)
 8008c7c:	4a10      	ldr	r2, [pc, #64]	@ (8008cc0 <prvCheckForValidListAndQueue+0x64>)
 8008c7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c80:	4b12      	ldr	r3, [pc, #72]	@ (8008ccc <prvCheckForValidListAndQueue+0x70>)
 8008c82:	4a10      	ldr	r2, [pc, #64]	@ (8008cc4 <prvCheckForValidListAndQueue+0x68>)
 8008c84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c86:	2300      	movs	r3, #0
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	4b11      	ldr	r3, [pc, #68]	@ (8008cd0 <prvCheckForValidListAndQueue+0x74>)
 8008c8c:	4a11      	ldr	r2, [pc, #68]	@ (8008cd4 <prvCheckForValidListAndQueue+0x78>)
 8008c8e:	2110      	movs	r1, #16
 8008c90:	200a      	movs	r0, #10
 8008c92:	f7fe f92d 	bl	8006ef0 <xQueueGenericCreateStatic>
 8008c96:	4603      	mov	r3, r0
 8008c98:	4a08      	ldr	r2, [pc, #32]	@ (8008cbc <prvCheckForValidListAndQueue+0x60>)
 8008c9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c9c:	4b07      	ldr	r3, [pc, #28]	@ (8008cbc <prvCheckForValidListAndQueue+0x60>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <prvCheckForValidListAndQueue+0x60>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	490b      	ldr	r1, [pc, #44]	@ (8008cd8 <prvCheckForValidListAndQueue+0x7c>)
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe fd52 	bl	8007754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cb0:	f000 f974 	bl	8008f9c <vPortExitCritical>
}
 8008cb4:	bf00      	nop
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	200010dc 	.word	0x200010dc
 8008cc0:	200010ac 	.word	0x200010ac
 8008cc4:	200010c0 	.word	0x200010c0
 8008cc8:	200010d4 	.word	0x200010d4
 8008ccc:	200010d8 	.word	0x200010d8
 8008cd0:	20001188 	.word	0x20001188
 8008cd4:	200010e8 	.word	0x200010e8
 8008cd8:	0800dce8 	.word	0x0800dce8

08008cdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3b04      	subs	r3, #4
 8008cec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f023 0201 	bic.w	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8008d40 <pxPortInitialiseStack+0x64>)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3b14      	subs	r3, #20
 8008d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3b04      	subs	r3, #4
 8008d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f06f 0202 	mvn.w	r2, #2
 8008d2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3b20      	subs	r3, #32
 8008d30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d32:	68fb      	ldr	r3, [r7, #12]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	08008d45 	.word	0x08008d45

08008d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d4e:	4b13      	ldr	r3, [pc, #76]	@ (8008d9c <prvTaskExitError+0x58>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d00b      	beq.n	8008d70 <prvTaskExitError+0x2c>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	60fb      	str	r3, [r7, #12]
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <prvTaskExitError+0x28>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60bb      	str	r3, [r7, #8]
}
 8008d82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d84:	bf00      	nop
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0fc      	beq.n	8008d86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	2000001c 	.word	0x2000001c

08008da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008da0:	4b07      	ldr	r3, [pc, #28]	@ (8008dc0 <pxCurrentTCBConst2>)
 8008da2:	6819      	ldr	r1, [r3, #0]
 8008da4:	6808      	ldr	r0, [r1, #0]
 8008da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008daa:	f380 8809 	msr	PSP, r0
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f04f 0000 	mov.w	r0, #0
 8008db6:	f380 8811 	msr	BASEPRI, r0
 8008dba:	4770      	bx	lr
 8008dbc:	f3af 8000 	nop.w

08008dc0 <pxCurrentTCBConst2>:
 8008dc0:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop

08008dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008dc8:	4808      	ldr	r0, [pc, #32]	@ (8008dec <prvPortStartFirstTask+0x24>)
 8008dca:	6800      	ldr	r0, [r0, #0]
 8008dcc:	6800      	ldr	r0, [r0, #0]
 8008dce:	f380 8808 	msr	MSP, r0
 8008dd2:	f04f 0000 	mov.w	r0, #0
 8008dd6:	f380 8814 	msr	CONTROL, r0
 8008dda:	b662      	cpsie	i
 8008ddc:	b661      	cpsie	f
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	df00      	svc	0
 8008de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dea:	bf00      	nop
 8008dec:	e000ed08 	.word	0xe000ed08

08008df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008df6:	4b47      	ldr	r3, [pc, #284]	@ (8008f14 <xPortStartScheduler+0x124>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a47      	ldr	r2, [pc, #284]	@ (8008f18 <xPortStartScheduler+0x128>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10b      	bne.n	8008e18 <xPortStartScheduler+0x28>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	613b      	str	r3, [r7, #16]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e18:	4b3e      	ldr	r3, [pc, #248]	@ (8008f14 <xPortStartScheduler+0x124>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f1c <xPortStartScheduler+0x12c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d10b      	bne.n	8008e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	60fb      	str	r3, [r7, #12]
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	e7fd      	b.n	8008e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e3a:	4b39      	ldr	r3, [pc, #228]	@ (8008f20 <xPortStartScheduler+0x130>)
 8008e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	22ff      	movs	r2, #255	@ 0xff
 8008e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	4b31      	ldr	r3, [pc, #196]	@ (8008f24 <xPortStartScheduler+0x134>)
 8008e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e62:	4b31      	ldr	r3, [pc, #196]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008e64:	2207      	movs	r2, #7
 8008e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e68:	e009      	b.n	8008e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	4a2d      	ldr	r2, [pc, #180]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e86:	2b80      	cmp	r3, #128	@ 0x80
 8008e88:	d0ef      	beq.n	8008e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e8a:	4b27      	ldr	r3, [pc, #156]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f1c3 0307 	rsb	r3, r3, #7
 8008e92:	2b04      	cmp	r3, #4
 8008e94:	d00b      	beq.n	8008eae <xPortStartScheduler+0xbe>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60bb      	str	r3, [r7, #8]
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008eae:	4b1e      	ldr	r3, [pc, #120]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ec0:	4a19      	ldr	r2, [pc, #100]	@ (8008f28 <xPortStartScheduler+0x138>)
 8008ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ecc:	4b17      	ldr	r3, [pc, #92]	@ (8008f2c <xPortStartScheduler+0x13c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a16      	ldr	r2, [pc, #88]	@ (8008f2c <xPortStartScheduler+0x13c>)
 8008ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ed8:	4b14      	ldr	r3, [pc, #80]	@ (8008f2c <xPortStartScheduler+0x13c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a13      	ldr	r2, [pc, #76]	@ (8008f2c <xPortStartScheduler+0x13c>)
 8008ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ee4:	f000 f8da 	bl	800909c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ee8:	4b11      	ldr	r3, [pc, #68]	@ (8008f30 <xPortStartScheduler+0x140>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008eee:	f000 f8f9 	bl	80090e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ef2:	4b10      	ldr	r3, [pc, #64]	@ (8008f34 <xPortStartScheduler+0x144>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8008f34 <xPortStartScheduler+0x144>)
 8008ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008efe:	f7ff ff63 	bl	8008dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f02:	f7ff f83f 	bl	8007f84 <vTaskSwitchContext>
	prvTaskExitError();
 8008f06:	f7ff ff1d 	bl	8008d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	e000ed00 	.word	0xe000ed00
 8008f18:	410fc271 	.word	0x410fc271
 8008f1c:	410fc270 	.word	0x410fc270
 8008f20:	e000e400 	.word	0xe000e400
 8008f24:	200011d8 	.word	0x200011d8
 8008f28:	200011dc 	.word	0x200011dc
 8008f2c:	e000ed20 	.word	0xe000ed20
 8008f30:	2000001c 	.word	0x2000001c
 8008f34:	e000ef34 	.word	0xe000ef34

08008f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	607b      	str	r3, [r7, #4]
}
 8008f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f52:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <vPortEnterCritical+0x5c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	4a0e      	ldr	r2, [pc, #56]	@ (8008f94 <vPortEnterCritical+0x5c>)
 8008f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f94 <vPortEnterCritical+0x5c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d110      	bne.n	8008f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f64:	4b0c      	ldr	r3, [pc, #48]	@ (8008f98 <vPortEnterCritical+0x60>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00b      	beq.n	8008f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	603b      	str	r3, [r7, #0]
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	e7fd      	b.n	8008f82 <vPortEnterCritical+0x4a>
	}
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	2000001c 	.word	0x2000001c
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fa2:	4b12      	ldr	r3, [pc, #72]	@ (8008fec <vPortExitCritical+0x50>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <vPortExitCritical+0x26>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	607b      	str	r3, [r7, #4]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fec <vPortExitCritical+0x50>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4a08      	ldr	r2, [pc, #32]	@ (8008fec <vPortExitCritical+0x50>)
 8008fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fcc:	4b07      	ldr	r3, [pc, #28]	@ (8008fec <vPortExitCritical+0x50>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d105      	bne.n	8008fe0 <vPortExitCritical+0x44>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	f383 8811 	msr	BASEPRI, r3
}
 8008fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	2000001c 	.word	0x2000001c

08008ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ff0:	f3ef 8009 	mrs	r0, PSP
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <pxCurrentTCBConst>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f01e 0f10 	tst.w	lr, #16
 8009000:	bf08      	it	eq
 8009002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900a:	6010      	str	r0, [r2, #0]
 800900c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009014:	f380 8811 	msr	BASEPRI, r0
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f7fe ffb0 	bl	8007f84 <vTaskSwitchContext>
 8009024:	f04f 0000 	mov.w	r0, #0
 8009028:	f380 8811 	msr	BASEPRI, r0
 800902c:	bc09      	pop	{r0, r3}
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	6808      	ldr	r0, [r1, #0]
 8009032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009036:	f01e 0f10 	tst.w	lr, #16
 800903a:	bf08      	it	eq
 800903c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009040:	f380 8809 	msr	PSP, r0
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w

08009050 <pxCurrentTCBConst>:
 8009050:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop

08009058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	607b      	str	r3, [r7, #4]
}
 8009070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009072:	f7fe fecd 	bl	8007e10 <xTaskIncrementTick>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800907c:	4b06      	ldr	r3, [pc, #24]	@ (8009098 <xPortSysTickHandler+0x40>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	2300      	movs	r3, #0
 8009086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f383 8811 	msr	BASEPRI, r3
}
 800908e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090a0:	4b0b      	ldr	r3, [pc, #44]	@ (80090d0 <vPortSetupTimerInterrupt+0x34>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090a6:	4b0b      	ldr	r3, [pc, #44]	@ (80090d4 <vPortSetupTimerInterrupt+0x38>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	@ (80090d8 <vPortSetupTimerInterrupt+0x3c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a0a      	ldr	r2, [pc, #40]	@ (80090dc <vPortSetupTimerInterrupt+0x40>)
 80090b2:	fba2 2303 	umull	r2, r3, r2, r3
 80090b6:	099b      	lsrs	r3, r3, #6
 80090b8:	4a09      	ldr	r2, [pc, #36]	@ (80090e0 <vPortSetupTimerInterrupt+0x44>)
 80090ba:	3b01      	subs	r3, #1
 80090bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090be:	4b04      	ldr	r3, [pc, #16]	@ (80090d0 <vPortSetupTimerInterrupt+0x34>)
 80090c0:	2207      	movs	r2, #7
 80090c2:	601a      	str	r2, [r3, #0]
}
 80090c4:	bf00      	nop
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	e000e010 	.word	0xe000e010
 80090d4:	e000e018 	.word	0xe000e018
 80090d8:	20000010 	.word	0x20000010
 80090dc:	10624dd3 	.word	0x10624dd3
 80090e0:	e000e014 	.word	0xe000e014

080090e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090f4 <vPortEnableVFP+0x10>
 80090e8:	6801      	ldr	r1, [r0, #0]
 80090ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090ee:	6001      	str	r1, [r0, #0]
 80090f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090f2:	bf00      	nop
 80090f4:	e000ed88 	.word	0xe000ed88

080090f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090fe:	f3ef 8305 	mrs	r3, IPSR
 8009102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b0f      	cmp	r3, #15
 8009108:	d915      	bls.n	8009136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800910a:	4a18      	ldr	r2, [pc, #96]	@ (800916c <vPortValidateInterruptPriority+0x74>)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009114:	4b16      	ldr	r3, [pc, #88]	@ (8009170 <vPortValidateInterruptPriority+0x78>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	7afa      	ldrb	r2, [r7, #11]
 800911a:	429a      	cmp	r2, r3
 800911c:	d20b      	bcs.n	8009136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	e7fd      	b.n	8009132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009136:	4b0f      	ldr	r3, [pc, #60]	@ (8009174 <vPortValidateInterruptPriority+0x7c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800913e:	4b0e      	ldr	r3, [pc, #56]	@ (8009178 <vPortValidateInterruptPriority+0x80>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d90b      	bls.n	800915e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	603b      	str	r3, [r7, #0]
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <vPortValidateInterruptPriority+0x62>
	}
 800915e:	bf00      	nop
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	e000e3f0 	.word	0xe000e3f0
 8009170:	200011d8 	.word	0x200011d8
 8009174:	e000ed0c 	.word	0xe000ed0c
 8009178:	200011dc 	.word	0x200011dc

0800917c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	@ 0x28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009188:	f7fe fd86 	bl	8007c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800918c:	4b5c      	ldr	r3, [pc, #368]	@ (8009300 <pvPortMalloc+0x184>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009194:	f000 f924 	bl	80093e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009198:	4b5a      	ldr	r3, [pc, #360]	@ (8009304 <pvPortMalloc+0x188>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f040 8095 	bne.w	80092d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01e      	beq.n	80091ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80091ac:	2208      	movs	r2, #8
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d015      	beq.n	80091ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f023 0307 	bic.w	r3, r3, #7
 80091c4:	3308      	adds	r3, #8
 80091c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00b      	beq.n	80091ea <pvPortMalloc+0x6e>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	617b      	str	r3, [r7, #20]
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop
 80091e8:	e7fd      	b.n	80091e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d06f      	beq.n	80092d0 <pvPortMalloc+0x154>
 80091f0:	4b45      	ldr	r3, [pc, #276]	@ (8009308 <pvPortMalloc+0x18c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d86a      	bhi.n	80092d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091fa:	4b44      	ldr	r3, [pc, #272]	@ (800930c <pvPortMalloc+0x190>)
 80091fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091fe:	4b43      	ldr	r3, [pc, #268]	@ (800930c <pvPortMalloc+0x190>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009204:	e004      	b.n	8009210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	429a      	cmp	r2, r3
 8009218:	d903      	bls.n	8009222 <pvPortMalloc+0xa6>
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f1      	bne.n	8009206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009222:	4b37      	ldr	r3, [pc, #220]	@ (8009300 <pvPortMalloc+0x184>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009228:	429a      	cmp	r2, r3
 800922a:	d051      	beq.n	80092d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2208      	movs	r2, #8
 8009232:	4413      	add	r3, r2
 8009234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	1ad2      	subs	r2, r2, r3
 8009246:	2308      	movs	r3, #8
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	429a      	cmp	r2, r3
 800924c:	d920      	bls.n	8009290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800924e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4413      	add	r3, r2
 8009254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <pvPortMalloc+0xfc>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	613b      	str	r3, [r7, #16]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800928a:	69b8      	ldr	r0, [r7, #24]
 800928c:	f000 f90a 	bl	80094a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009290:	4b1d      	ldr	r3, [pc, #116]	@ (8009308 <pvPortMalloc+0x18c>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	4a1b      	ldr	r2, [pc, #108]	@ (8009308 <pvPortMalloc+0x18c>)
 800929c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800929e:	4b1a      	ldr	r3, [pc, #104]	@ (8009308 <pvPortMalloc+0x18c>)
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009310 <pvPortMalloc+0x194>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d203      	bcs.n	80092b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092aa:	4b17      	ldr	r3, [pc, #92]	@ (8009308 <pvPortMalloc+0x18c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a18      	ldr	r2, [pc, #96]	@ (8009310 <pvPortMalloc+0x194>)
 80092b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	4b13      	ldr	r3, [pc, #76]	@ (8009304 <pvPortMalloc+0x188>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092c6:	4b13      	ldr	r3, [pc, #76]	@ (8009314 <pvPortMalloc+0x198>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3301      	adds	r3, #1
 80092cc:	4a11      	ldr	r2, [pc, #68]	@ (8009314 <pvPortMalloc+0x198>)
 80092ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092d0:	f7fe fcf0 	bl	8007cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <pvPortMalloc+0x17a>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60fb      	str	r3, [r7, #12]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <pvPortMalloc+0x176>
	return pvReturn;
 80092f6:	69fb      	ldr	r3, [r7, #28]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3728      	adds	r7, #40	@ 0x28
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	20004de8 	.word	0x20004de8
 8009304:	20004dfc 	.word	0x20004dfc
 8009308:	20004dec 	.word	0x20004dec
 800930c:	20004de0 	.word	0x20004de0
 8009310:	20004df0 	.word	0x20004df0
 8009314:	20004df4 	.word	0x20004df4

08009318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d04f      	beq.n	80093ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800932a:	2308      	movs	r3, #8
 800932c:	425b      	negs	r3, r3
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	4413      	add	r3, r2
 8009332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	4b25      	ldr	r3, [pc, #148]	@ (80093d4 <vPortFree+0xbc>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4013      	ands	r3, r2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <vPortFree+0x46>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	60fb      	str	r3, [r7, #12]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <vPortFree+0x66>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	60bb      	str	r3, [r7, #8]
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	e7fd      	b.n	800937a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	4b14      	ldr	r3, [pc, #80]	@ (80093d4 <vPortFree+0xbc>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4013      	ands	r3, r2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d01e      	beq.n	80093ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11a      	bne.n	80093ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	4b0e      	ldr	r3, [pc, #56]	@ (80093d4 <vPortFree+0xbc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	43db      	mvns	r3, r3
 800939e:	401a      	ands	r2, r3
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093a4:	f7fe fc78 	bl	8007c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	4b0a      	ldr	r3, [pc, #40]	@ (80093d8 <vPortFree+0xc0>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4413      	add	r3, r2
 80093b2:	4a09      	ldr	r2, [pc, #36]	@ (80093d8 <vPortFree+0xc0>)
 80093b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093b6:	6938      	ldr	r0, [r7, #16]
 80093b8:	f000 f874 	bl	80094a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093bc:	4b07      	ldr	r3, [pc, #28]	@ (80093dc <vPortFree+0xc4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3301      	adds	r3, #1
 80093c2:	4a06      	ldr	r2, [pc, #24]	@ (80093dc <vPortFree+0xc4>)
 80093c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093c6:	f7fe fc75 	bl	8007cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093ca:	bf00      	nop
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20004dfc 	.word	0x20004dfc
 80093d8:	20004dec 	.word	0x20004dec
 80093dc:	20004df8 	.word	0x20004df8

080093e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80093ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093ec:	4b27      	ldr	r3, [pc, #156]	@ (800948c <prvHeapInit+0xac>)
 80093ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00c      	beq.n	8009414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3307      	adds	r3, #7
 80093fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0307 	bic.w	r3, r3, #7
 8009406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	4a1f      	ldr	r2, [pc, #124]	@ (800948c <prvHeapInit+0xac>)
 8009410:	4413      	add	r3, r2
 8009412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009418:	4a1d      	ldr	r2, [pc, #116]	@ (8009490 <prvHeapInit+0xb0>)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800941e:	4b1c      	ldr	r3, [pc, #112]	@ (8009490 <prvHeapInit+0xb0>)
 8009420:	2200      	movs	r2, #0
 8009422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4413      	add	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800942c:	2208      	movs	r2, #8
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0307 	bic.w	r3, r3, #7
 800943a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a15      	ldr	r2, [pc, #84]	@ (8009494 <prvHeapInit+0xb4>)
 8009440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009442:	4b14      	ldr	r3, [pc, #80]	@ (8009494 <prvHeapInit+0xb4>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2200      	movs	r2, #0
 8009448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800944a:	4b12      	ldr	r3, [pc, #72]	@ (8009494 <prvHeapInit+0xb4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009460:	4b0c      	ldr	r3, [pc, #48]	@ (8009494 <prvHeapInit+0xb4>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	4a0a      	ldr	r2, [pc, #40]	@ (8009498 <prvHeapInit+0xb8>)
 800946e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4a09      	ldr	r2, [pc, #36]	@ (800949c <prvHeapInit+0xbc>)
 8009476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009478:	4b09      	ldr	r3, [pc, #36]	@ (80094a0 <prvHeapInit+0xc0>)
 800947a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800947e:	601a      	str	r2, [r3, #0]
}
 8009480:	bf00      	nop
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	200011e0 	.word	0x200011e0
 8009490:	20004de0 	.word	0x20004de0
 8009494:	20004de8 	.word	0x20004de8
 8009498:	20004df0 	.word	0x20004df0
 800949c:	20004dec 	.word	0x20004dec
 80094a0:	20004dfc 	.word	0x20004dfc

080094a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094ac:	4b28      	ldr	r3, [pc, #160]	@ (8009550 <prvInsertBlockIntoFreeList+0xac>)
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e002      	b.n	80094b8 <prvInsertBlockIntoFreeList+0x14>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d8f7      	bhi.n	80094b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	4413      	add	r3, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d108      	bne.n	80094e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	441a      	add	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	441a      	add	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d118      	bne.n	800952c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b15      	ldr	r3, [pc, #84]	@ (8009554 <prvInsertBlockIntoFreeList+0xb0>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d00d      	beq.n	8009522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	441a      	add	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	e008      	b.n	8009534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009522:	4b0c      	ldr	r3, [pc, #48]	@ (8009554 <prvInsertBlockIntoFreeList+0xb0>)
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	e003      	b.n	8009534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	429a      	cmp	r2, r3
 800953a:	d002      	beq.n	8009542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009542:	bf00      	nop
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20004de0 	.word	0x20004de0
 8009554:	20004de8 	.word	0x20004de8

08009558 <__cvt>:
 8009558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800955c:	ec57 6b10 	vmov	r6, r7, d0
 8009560:	2f00      	cmp	r7, #0
 8009562:	460c      	mov	r4, r1
 8009564:	4619      	mov	r1, r3
 8009566:	463b      	mov	r3, r7
 8009568:	bfbb      	ittet	lt
 800956a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800956e:	461f      	movlt	r7, r3
 8009570:	2300      	movge	r3, #0
 8009572:	232d      	movlt	r3, #45	@ 0x2d
 8009574:	700b      	strb	r3, [r1, #0]
 8009576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009578:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800957c:	4691      	mov	r9, r2
 800957e:	f023 0820 	bic.w	r8, r3, #32
 8009582:	bfbc      	itt	lt
 8009584:	4632      	movlt	r2, r6
 8009586:	4616      	movlt	r6, r2
 8009588:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800958c:	d005      	beq.n	800959a <__cvt+0x42>
 800958e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009592:	d100      	bne.n	8009596 <__cvt+0x3e>
 8009594:	3401      	adds	r4, #1
 8009596:	2102      	movs	r1, #2
 8009598:	e000      	b.n	800959c <__cvt+0x44>
 800959a:	2103      	movs	r1, #3
 800959c:	ab03      	add	r3, sp, #12
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	ab02      	add	r3, sp, #8
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	ec47 6b10 	vmov	d0, r6, r7
 80095a8:	4653      	mov	r3, sl
 80095aa:	4622      	mov	r2, r4
 80095ac:	f001 f894 	bl	800a6d8 <_dtoa_r>
 80095b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095b4:	4605      	mov	r5, r0
 80095b6:	d119      	bne.n	80095ec <__cvt+0x94>
 80095b8:	f019 0f01 	tst.w	r9, #1
 80095bc:	d00e      	beq.n	80095dc <__cvt+0x84>
 80095be:	eb00 0904 	add.w	r9, r0, r4
 80095c2:	2200      	movs	r2, #0
 80095c4:	2300      	movs	r3, #0
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f7 fa85 	bl	8000ad8 <__aeabi_dcmpeq>
 80095ce:	b108      	cbz	r0, 80095d4 <__cvt+0x7c>
 80095d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80095d4:	2230      	movs	r2, #48	@ 0x30
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	454b      	cmp	r3, r9
 80095da:	d31e      	bcc.n	800961a <__cvt+0xc2>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095e0:	1b5b      	subs	r3, r3, r5
 80095e2:	4628      	mov	r0, r5
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	b004      	add	sp, #16
 80095e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095f0:	eb00 0904 	add.w	r9, r0, r4
 80095f4:	d1e5      	bne.n	80095c2 <__cvt+0x6a>
 80095f6:	7803      	ldrb	r3, [r0, #0]
 80095f8:	2b30      	cmp	r3, #48	@ 0x30
 80095fa:	d10a      	bne.n	8009612 <__cvt+0xba>
 80095fc:	2200      	movs	r2, #0
 80095fe:	2300      	movs	r3, #0
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f7 fa68 	bl	8000ad8 <__aeabi_dcmpeq>
 8009608:	b918      	cbnz	r0, 8009612 <__cvt+0xba>
 800960a:	f1c4 0401 	rsb	r4, r4, #1
 800960e:	f8ca 4000 	str.w	r4, [sl]
 8009612:	f8da 3000 	ldr.w	r3, [sl]
 8009616:	4499      	add	r9, r3
 8009618:	e7d3      	b.n	80095c2 <__cvt+0x6a>
 800961a:	1c59      	adds	r1, r3, #1
 800961c:	9103      	str	r1, [sp, #12]
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	e7d9      	b.n	80095d6 <__cvt+0x7e>

08009622 <__exponent>:
 8009622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009624:	2900      	cmp	r1, #0
 8009626:	bfba      	itte	lt
 8009628:	4249      	neglt	r1, r1
 800962a:	232d      	movlt	r3, #45	@ 0x2d
 800962c:	232b      	movge	r3, #43	@ 0x2b
 800962e:	2909      	cmp	r1, #9
 8009630:	7002      	strb	r2, [r0, #0]
 8009632:	7043      	strb	r3, [r0, #1]
 8009634:	dd29      	ble.n	800968a <__exponent+0x68>
 8009636:	f10d 0307 	add.w	r3, sp, #7
 800963a:	461d      	mov	r5, r3
 800963c:	270a      	movs	r7, #10
 800963e:	461a      	mov	r2, r3
 8009640:	fbb1 f6f7 	udiv	r6, r1, r7
 8009644:	fb07 1416 	mls	r4, r7, r6, r1
 8009648:	3430      	adds	r4, #48	@ 0x30
 800964a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800964e:	460c      	mov	r4, r1
 8009650:	2c63      	cmp	r4, #99	@ 0x63
 8009652:	f103 33ff 	add.w	r3, r3, #4294967295
 8009656:	4631      	mov	r1, r6
 8009658:	dcf1      	bgt.n	800963e <__exponent+0x1c>
 800965a:	3130      	adds	r1, #48	@ 0x30
 800965c:	1e94      	subs	r4, r2, #2
 800965e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009662:	1c41      	adds	r1, r0, #1
 8009664:	4623      	mov	r3, r4
 8009666:	42ab      	cmp	r3, r5
 8009668:	d30a      	bcc.n	8009680 <__exponent+0x5e>
 800966a:	f10d 0309 	add.w	r3, sp, #9
 800966e:	1a9b      	subs	r3, r3, r2
 8009670:	42ac      	cmp	r4, r5
 8009672:	bf88      	it	hi
 8009674:	2300      	movhi	r3, #0
 8009676:	3302      	adds	r3, #2
 8009678:	4403      	add	r3, r0
 800967a:	1a18      	subs	r0, r3, r0
 800967c:	b003      	add	sp, #12
 800967e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009680:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009684:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009688:	e7ed      	b.n	8009666 <__exponent+0x44>
 800968a:	2330      	movs	r3, #48	@ 0x30
 800968c:	3130      	adds	r1, #48	@ 0x30
 800968e:	7083      	strb	r3, [r0, #2]
 8009690:	70c1      	strb	r1, [r0, #3]
 8009692:	1d03      	adds	r3, r0, #4
 8009694:	e7f1      	b.n	800967a <__exponent+0x58>
	...

08009698 <_printf_float>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	b08d      	sub	sp, #52	@ 0x34
 800969e:	460c      	mov	r4, r1
 80096a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80096a4:	4616      	mov	r6, r2
 80096a6:	461f      	mov	r7, r3
 80096a8:	4605      	mov	r5, r0
 80096aa:	f000 ff01 	bl	800a4b0 <_localeconv_r>
 80096ae:	6803      	ldr	r3, [r0, #0]
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f6 fde4 	bl	8000280 <strlen>
 80096b8:	2300      	movs	r3, #0
 80096ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80096bc:	f8d8 3000 	ldr.w	r3, [r8]
 80096c0:	9005      	str	r0, [sp, #20]
 80096c2:	3307      	adds	r3, #7
 80096c4:	f023 0307 	bic.w	r3, r3, #7
 80096c8:	f103 0208 	add.w	r2, r3, #8
 80096cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096d0:	f8d4 b000 	ldr.w	fp, [r4]
 80096d4:	f8c8 2000 	str.w	r2, [r8]
 80096d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096e0:	9307      	str	r3, [sp, #28]
 80096e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80096e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096ee:	4b9c      	ldr	r3, [pc, #624]	@ (8009960 <_printf_float+0x2c8>)
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	f7f7 fa22 	bl	8000b3c <__aeabi_dcmpun>
 80096f8:	bb70      	cbnz	r0, 8009758 <_printf_float+0xc0>
 80096fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096fe:	4b98      	ldr	r3, [pc, #608]	@ (8009960 <_printf_float+0x2c8>)
 8009700:	f04f 32ff 	mov.w	r2, #4294967295
 8009704:	f7f7 f9fc 	bl	8000b00 <__aeabi_dcmple>
 8009708:	bb30      	cbnz	r0, 8009758 <_printf_float+0xc0>
 800970a:	2200      	movs	r2, #0
 800970c:	2300      	movs	r3, #0
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f7 f9eb 	bl	8000aec <__aeabi_dcmplt>
 8009716:	b110      	cbz	r0, 800971e <_printf_float+0x86>
 8009718:	232d      	movs	r3, #45	@ 0x2d
 800971a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800971e:	4a91      	ldr	r2, [pc, #580]	@ (8009964 <_printf_float+0x2cc>)
 8009720:	4b91      	ldr	r3, [pc, #580]	@ (8009968 <_printf_float+0x2d0>)
 8009722:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009726:	bf94      	ite	ls
 8009728:	4690      	movls	r8, r2
 800972a:	4698      	movhi	r8, r3
 800972c:	2303      	movs	r3, #3
 800972e:	6123      	str	r3, [r4, #16]
 8009730:	f02b 0304 	bic.w	r3, fp, #4
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	f04f 0900 	mov.w	r9, #0
 800973a:	9700      	str	r7, [sp, #0]
 800973c:	4633      	mov	r3, r6
 800973e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009740:	4621      	mov	r1, r4
 8009742:	4628      	mov	r0, r5
 8009744:	f000 f9d2 	bl	8009aec <_printf_common>
 8009748:	3001      	adds	r0, #1
 800974a:	f040 808d 	bne.w	8009868 <_printf_float+0x1d0>
 800974e:	f04f 30ff 	mov.w	r0, #4294967295
 8009752:	b00d      	add	sp, #52	@ 0x34
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	4642      	mov	r2, r8
 800975a:	464b      	mov	r3, r9
 800975c:	4640      	mov	r0, r8
 800975e:	4649      	mov	r1, r9
 8009760:	f7f7 f9ec 	bl	8000b3c <__aeabi_dcmpun>
 8009764:	b140      	cbz	r0, 8009778 <_printf_float+0xe0>
 8009766:	464b      	mov	r3, r9
 8009768:	2b00      	cmp	r3, #0
 800976a:	bfbc      	itt	lt
 800976c:	232d      	movlt	r3, #45	@ 0x2d
 800976e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009772:	4a7e      	ldr	r2, [pc, #504]	@ (800996c <_printf_float+0x2d4>)
 8009774:	4b7e      	ldr	r3, [pc, #504]	@ (8009970 <_printf_float+0x2d8>)
 8009776:	e7d4      	b.n	8009722 <_printf_float+0x8a>
 8009778:	6863      	ldr	r3, [r4, #4]
 800977a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800977e:	9206      	str	r2, [sp, #24]
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	d13b      	bne.n	80097fc <_printf_float+0x164>
 8009784:	2306      	movs	r3, #6
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800978c:	2300      	movs	r3, #0
 800978e:	6022      	str	r2, [r4, #0]
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	ab0a      	add	r3, sp, #40	@ 0x28
 8009794:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009798:	ab09      	add	r3, sp, #36	@ 0x24
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	6861      	ldr	r1, [r4, #4]
 800979e:	ec49 8b10 	vmov	d0, r8, r9
 80097a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7ff fed6 	bl	8009558 <__cvt>
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097b0:	2b47      	cmp	r3, #71	@ 0x47
 80097b2:	4680      	mov	r8, r0
 80097b4:	d129      	bne.n	800980a <_printf_float+0x172>
 80097b6:	1cc8      	adds	r0, r1, #3
 80097b8:	db02      	blt.n	80097c0 <_printf_float+0x128>
 80097ba:	6863      	ldr	r3, [r4, #4]
 80097bc:	4299      	cmp	r1, r3
 80097be:	dd41      	ble.n	8009844 <_printf_float+0x1ac>
 80097c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80097c4:	fa5f fa8a 	uxtb.w	sl, sl
 80097c8:	3901      	subs	r1, #1
 80097ca:	4652      	mov	r2, sl
 80097cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80097d2:	f7ff ff26 	bl	8009622 <__exponent>
 80097d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097d8:	1813      	adds	r3, r2, r0
 80097da:	2a01      	cmp	r2, #1
 80097dc:	4681      	mov	r9, r0
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	dc02      	bgt.n	80097e8 <_printf_float+0x150>
 80097e2:	6822      	ldr	r2, [r4, #0]
 80097e4:	07d2      	lsls	r2, r2, #31
 80097e6:	d501      	bpl.n	80097ec <_printf_float+0x154>
 80097e8:	3301      	adds	r3, #1
 80097ea:	6123      	str	r3, [r4, #16]
 80097ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0a2      	beq.n	800973a <_printf_float+0xa2>
 80097f4:	232d      	movs	r3, #45	@ 0x2d
 80097f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097fa:	e79e      	b.n	800973a <_printf_float+0xa2>
 80097fc:	9a06      	ldr	r2, [sp, #24]
 80097fe:	2a47      	cmp	r2, #71	@ 0x47
 8009800:	d1c2      	bne.n	8009788 <_printf_float+0xf0>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1c0      	bne.n	8009788 <_printf_float+0xf0>
 8009806:	2301      	movs	r3, #1
 8009808:	e7bd      	b.n	8009786 <_printf_float+0xee>
 800980a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800980e:	d9db      	bls.n	80097c8 <_printf_float+0x130>
 8009810:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009814:	d118      	bne.n	8009848 <_printf_float+0x1b0>
 8009816:	2900      	cmp	r1, #0
 8009818:	6863      	ldr	r3, [r4, #4]
 800981a:	dd0b      	ble.n	8009834 <_printf_float+0x19c>
 800981c:	6121      	str	r1, [r4, #16]
 800981e:	b913      	cbnz	r3, 8009826 <_printf_float+0x18e>
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	07d0      	lsls	r0, r2, #31
 8009824:	d502      	bpl.n	800982c <_printf_float+0x194>
 8009826:	3301      	adds	r3, #1
 8009828:	440b      	add	r3, r1
 800982a:	6123      	str	r3, [r4, #16]
 800982c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800982e:	f04f 0900 	mov.w	r9, #0
 8009832:	e7db      	b.n	80097ec <_printf_float+0x154>
 8009834:	b913      	cbnz	r3, 800983c <_printf_float+0x1a4>
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	07d2      	lsls	r2, r2, #31
 800983a:	d501      	bpl.n	8009840 <_printf_float+0x1a8>
 800983c:	3302      	adds	r3, #2
 800983e:	e7f4      	b.n	800982a <_printf_float+0x192>
 8009840:	2301      	movs	r3, #1
 8009842:	e7f2      	b.n	800982a <_printf_float+0x192>
 8009844:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800984a:	4299      	cmp	r1, r3
 800984c:	db05      	blt.n	800985a <_printf_float+0x1c2>
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	6121      	str	r1, [r4, #16]
 8009852:	07d8      	lsls	r0, r3, #31
 8009854:	d5ea      	bpl.n	800982c <_printf_float+0x194>
 8009856:	1c4b      	adds	r3, r1, #1
 8009858:	e7e7      	b.n	800982a <_printf_float+0x192>
 800985a:	2900      	cmp	r1, #0
 800985c:	bfd4      	ite	le
 800985e:	f1c1 0202 	rsble	r2, r1, #2
 8009862:	2201      	movgt	r2, #1
 8009864:	4413      	add	r3, r2
 8009866:	e7e0      	b.n	800982a <_printf_float+0x192>
 8009868:	6823      	ldr	r3, [r4, #0]
 800986a:	055a      	lsls	r2, r3, #21
 800986c:	d407      	bmi.n	800987e <_printf_float+0x1e6>
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	4642      	mov	r2, r8
 8009872:	4631      	mov	r1, r6
 8009874:	4628      	mov	r0, r5
 8009876:	47b8      	blx	r7
 8009878:	3001      	adds	r0, #1
 800987a:	d12b      	bne.n	80098d4 <_printf_float+0x23c>
 800987c:	e767      	b.n	800974e <_printf_float+0xb6>
 800987e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009882:	f240 80dd 	bls.w	8009a40 <_printf_float+0x3a8>
 8009886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	f7f7 f923 	bl	8000ad8 <__aeabi_dcmpeq>
 8009892:	2800      	cmp	r0, #0
 8009894:	d033      	beq.n	80098fe <_printf_float+0x266>
 8009896:	4a37      	ldr	r2, [pc, #220]	@ (8009974 <_printf_float+0x2dc>)
 8009898:	2301      	movs	r3, #1
 800989a:	4631      	mov	r1, r6
 800989c:	4628      	mov	r0, r5
 800989e:	47b8      	blx	r7
 80098a0:	3001      	adds	r0, #1
 80098a2:	f43f af54 	beq.w	800974e <_printf_float+0xb6>
 80098a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80098aa:	4543      	cmp	r3, r8
 80098ac:	db02      	blt.n	80098b4 <_printf_float+0x21c>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	07d8      	lsls	r0, r3, #31
 80098b2:	d50f      	bpl.n	80098d4 <_printf_float+0x23c>
 80098b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b8      	blx	r7
 80098be:	3001      	adds	r0, #1
 80098c0:	f43f af45 	beq.w	800974e <_printf_float+0xb6>
 80098c4:	f04f 0900 	mov.w	r9, #0
 80098c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098cc:	f104 0a1a 	add.w	sl, r4, #26
 80098d0:	45c8      	cmp	r8, r9
 80098d2:	dc09      	bgt.n	80098e8 <_printf_float+0x250>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	079b      	lsls	r3, r3, #30
 80098d8:	f100 8103 	bmi.w	8009ae2 <_printf_float+0x44a>
 80098dc:	68e0      	ldr	r0, [r4, #12]
 80098de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098e0:	4298      	cmp	r0, r3
 80098e2:	bfb8      	it	lt
 80098e4:	4618      	movlt	r0, r3
 80098e6:	e734      	b.n	8009752 <_printf_float+0xba>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4652      	mov	r2, sl
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	f43f af2b 	beq.w	800974e <_printf_float+0xb6>
 80098f8:	f109 0901 	add.w	r9, r9, #1
 80098fc:	e7e8      	b.n	80098d0 <_printf_float+0x238>
 80098fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009900:	2b00      	cmp	r3, #0
 8009902:	dc39      	bgt.n	8009978 <_printf_float+0x2e0>
 8009904:	4a1b      	ldr	r2, [pc, #108]	@ (8009974 <_printf_float+0x2dc>)
 8009906:	2301      	movs	r3, #1
 8009908:	4631      	mov	r1, r6
 800990a:	4628      	mov	r0, r5
 800990c:	47b8      	blx	r7
 800990e:	3001      	adds	r0, #1
 8009910:	f43f af1d 	beq.w	800974e <_printf_float+0xb6>
 8009914:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009918:	ea59 0303 	orrs.w	r3, r9, r3
 800991c:	d102      	bne.n	8009924 <_printf_float+0x28c>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	07d9      	lsls	r1, r3, #31
 8009922:	d5d7      	bpl.n	80098d4 <_printf_float+0x23c>
 8009924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009928:	4631      	mov	r1, r6
 800992a:	4628      	mov	r0, r5
 800992c:	47b8      	blx	r7
 800992e:	3001      	adds	r0, #1
 8009930:	f43f af0d 	beq.w	800974e <_printf_float+0xb6>
 8009934:	f04f 0a00 	mov.w	sl, #0
 8009938:	f104 0b1a 	add.w	fp, r4, #26
 800993c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993e:	425b      	negs	r3, r3
 8009940:	4553      	cmp	r3, sl
 8009942:	dc01      	bgt.n	8009948 <_printf_float+0x2b0>
 8009944:	464b      	mov	r3, r9
 8009946:	e793      	b.n	8009870 <_printf_float+0x1d8>
 8009948:	2301      	movs	r3, #1
 800994a:	465a      	mov	r2, fp
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	47b8      	blx	r7
 8009952:	3001      	adds	r0, #1
 8009954:	f43f aefb 	beq.w	800974e <_printf_float+0xb6>
 8009958:	f10a 0a01 	add.w	sl, sl, #1
 800995c:	e7ee      	b.n	800993c <_printf_float+0x2a4>
 800995e:	bf00      	nop
 8009960:	7fefffff 	.word	0x7fefffff
 8009964:	0800f270 	.word	0x0800f270
 8009968:	0800f274 	.word	0x0800f274
 800996c:	0800f278 	.word	0x0800f278
 8009970:	0800f27c 	.word	0x0800f27c
 8009974:	0800f280 	.word	0x0800f280
 8009978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800997a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800997e:	4553      	cmp	r3, sl
 8009980:	bfa8      	it	ge
 8009982:	4653      	movge	r3, sl
 8009984:	2b00      	cmp	r3, #0
 8009986:	4699      	mov	r9, r3
 8009988:	dc36      	bgt.n	80099f8 <_printf_float+0x360>
 800998a:	f04f 0b00 	mov.w	fp, #0
 800998e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009992:	f104 021a 	add.w	r2, r4, #26
 8009996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009998:	9306      	str	r3, [sp, #24]
 800999a:	eba3 0309 	sub.w	r3, r3, r9
 800999e:	455b      	cmp	r3, fp
 80099a0:	dc31      	bgt.n	8009a06 <_printf_float+0x36e>
 80099a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a4:	459a      	cmp	sl, r3
 80099a6:	dc3a      	bgt.n	8009a1e <_printf_float+0x386>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	07da      	lsls	r2, r3, #31
 80099ac:	d437      	bmi.n	8009a1e <_printf_float+0x386>
 80099ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b0:	ebaa 0903 	sub.w	r9, sl, r3
 80099b4:	9b06      	ldr	r3, [sp, #24]
 80099b6:	ebaa 0303 	sub.w	r3, sl, r3
 80099ba:	4599      	cmp	r9, r3
 80099bc:	bfa8      	it	ge
 80099be:	4699      	movge	r9, r3
 80099c0:	f1b9 0f00 	cmp.w	r9, #0
 80099c4:	dc33      	bgt.n	8009a2e <_printf_float+0x396>
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099ce:	f104 0b1a 	add.w	fp, r4, #26
 80099d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d4:	ebaa 0303 	sub.w	r3, sl, r3
 80099d8:	eba3 0309 	sub.w	r3, r3, r9
 80099dc:	4543      	cmp	r3, r8
 80099de:	f77f af79 	ble.w	80098d4 <_printf_float+0x23c>
 80099e2:	2301      	movs	r3, #1
 80099e4:	465a      	mov	r2, fp
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f aeae 	beq.w	800974e <_printf_float+0xb6>
 80099f2:	f108 0801 	add.w	r8, r8, #1
 80099f6:	e7ec      	b.n	80099d2 <_printf_float+0x33a>
 80099f8:	4642      	mov	r2, r8
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	d1c2      	bne.n	800998a <_printf_float+0x2f2>
 8009a04:	e6a3      	b.n	800974e <_printf_float+0xb6>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	9206      	str	r2, [sp, #24]
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f ae9c 	beq.w	800974e <_printf_float+0xb6>
 8009a16:	9a06      	ldr	r2, [sp, #24]
 8009a18:	f10b 0b01 	add.w	fp, fp, #1
 8009a1c:	e7bb      	b.n	8009996 <_printf_float+0x2fe>
 8009a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a22:	4631      	mov	r1, r6
 8009a24:	4628      	mov	r0, r5
 8009a26:	47b8      	blx	r7
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d1c0      	bne.n	80099ae <_printf_float+0x316>
 8009a2c:	e68f      	b.n	800974e <_printf_float+0xb6>
 8009a2e:	9a06      	ldr	r2, [sp, #24]
 8009a30:	464b      	mov	r3, r9
 8009a32:	4442      	add	r2, r8
 8009a34:	4631      	mov	r1, r6
 8009a36:	4628      	mov	r0, r5
 8009a38:	47b8      	blx	r7
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d1c3      	bne.n	80099c6 <_printf_float+0x32e>
 8009a3e:	e686      	b.n	800974e <_printf_float+0xb6>
 8009a40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a44:	f1ba 0f01 	cmp.w	sl, #1
 8009a48:	dc01      	bgt.n	8009a4e <_printf_float+0x3b6>
 8009a4a:	07db      	lsls	r3, r3, #31
 8009a4c:	d536      	bpl.n	8009abc <_printf_float+0x424>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4642      	mov	r2, r8
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f ae78 	beq.w	800974e <_printf_float+0xb6>
 8009a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f ae70 	beq.w	800974e <_printf_float+0xb6>
 8009a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a72:	2200      	movs	r2, #0
 8009a74:	2300      	movs	r3, #0
 8009a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a7a:	f7f7 f82d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a7e:	b9c0      	cbnz	r0, 8009ab2 <_printf_float+0x41a>
 8009a80:	4653      	mov	r3, sl
 8009a82:	f108 0201 	add.w	r2, r8, #1
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d10c      	bne.n	8009aaa <_printf_float+0x412>
 8009a90:	e65d      	b.n	800974e <_printf_float+0xb6>
 8009a92:	2301      	movs	r3, #1
 8009a94:	465a      	mov	r2, fp
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b8      	blx	r7
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	f43f ae56 	beq.w	800974e <_printf_float+0xb6>
 8009aa2:	f108 0801 	add.w	r8, r8, #1
 8009aa6:	45d0      	cmp	r8, sl
 8009aa8:	dbf3      	blt.n	8009a92 <_printf_float+0x3fa>
 8009aaa:	464b      	mov	r3, r9
 8009aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ab0:	e6df      	b.n	8009872 <_printf_float+0x1da>
 8009ab2:	f04f 0800 	mov.w	r8, #0
 8009ab6:	f104 0b1a 	add.w	fp, r4, #26
 8009aba:	e7f4      	b.n	8009aa6 <_printf_float+0x40e>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4642      	mov	r2, r8
 8009ac0:	e7e1      	b.n	8009a86 <_printf_float+0x3ee>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	464a      	mov	r2, r9
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	f43f ae3e 	beq.w	800974e <_printf_float+0xb6>
 8009ad2:	f108 0801 	add.w	r8, r8, #1
 8009ad6:	68e3      	ldr	r3, [r4, #12]
 8009ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ada:	1a5b      	subs	r3, r3, r1
 8009adc:	4543      	cmp	r3, r8
 8009ade:	dcf0      	bgt.n	8009ac2 <_printf_float+0x42a>
 8009ae0:	e6fc      	b.n	80098dc <_printf_float+0x244>
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	f104 0919 	add.w	r9, r4, #25
 8009aea:	e7f4      	b.n	8009ad6 <_printf_float+0x43e>

08009aec <_printf_common>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	4616      	mov	r6, r2
 8009af2:	4698      	mov	r8, r3
 8009af4:	688a      	ldr	r2, [r1, #8]
 8009af6:	690b      	ldr	r3, [r1, #16]
 8009af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bfb8      	it	lt
 8009b00:	4613      	movlt	r3, r2
 8009b02:	6033      	str	r3, [r6, #0]
 8009b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b08:	4607      	mov	r7, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	b10a      	cbz	r2, 8009b12 <_printf_common+0x26>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	6033      	str	r3, [r6, #0]
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	0699      	lsls	r1, r3, #26
 8009b16:	bf42      	ittt	mi
 8009b18:	6833      	ldrmi	r3, [r6, #0]
 8009b1a:	3302      	addmi	r3, #2
 8009b1c:	6033      	strmi	r3, [r6, #0]
 8009b1e:	6825      	ldr	r5, [r4, #0]
 8009b20:	f015 0506 	ands.w	r5, r5, #6
 8009b24:	d106      	bne.n	8009b34 <_printf_common+0x48>
 8009b26:	f104 0a19 	add.w	sl, r4, #25
 8009b2a:	68e3      	ldr	r3, [r4, #12]
 8009b2c:	6832      	ldr	r2, [r6, #0]
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc26      	bgt.n	8009b82 <_printf_common+0x96>
 8009b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b38:	6822      	ldr	r2, [r4, #0]
 8009b3a:	3b00      	subs	r3, #0
 8009b3c:	bf18      	it	ne
 8009b3e:	2301      	movne	r3, #1
 8009b40:	0692      	lsls	r2, r2, #26
 8009b42:	d42b      	bmi.n	8009b9c <_printf_common+0xb0>
 8009b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b48:	4641      	mov	r1, r8
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c8      	blx	r9
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d01e      	beq.n	8009b90 <_printf_common+0xa4>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	f003 0306 	and.w	r3, r3, #6
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	bf02      	ittt	eq
 8009b5e:	68e5      	ldreq	r5, [r4, #12]
 8009b60:	6833      	ldreq	r3, [r6, #0]
 8009b62:	1aed      	subeq	r5, r5, r3
 8009b64:	68a3      	ldr	r3, [r4, #8]
 8009b66:	bf0c      	ite	eq
 8009b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b6c:	2500      	movne	r5, #0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bfc4      	itt	gt
 8009b72:	1a9b      	subgt	r3, r3, r2
 8009b74:	18ed      	addgt	r5, r5, r3
 8009b76:	2600      	movs	r6, #0
 8009b78:	341a      	adds	r4, #26
 8009b7a:	42b5      	cmp	r5, r6
 8009b7c:	d11a      	bne.n	8009bb4 <_printf_common+0xc8>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e008      	b.n	8009b94 <_printf_common+0xa8>
 8009b82:	2301      	movs	r3, #1
 8009b84:	4652      	mov	r2, sl
 8009b86:	4641      	mov	r1, r8
 8009b88:	4638      	mov	r0, r7
 8009b8a:	47c8      	blx	r9
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d103      	bne.n	8009b98 <_printf_common+0xac>
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295
 8009b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b98:	3501      	adds	r5, #1
 8009b9a:	e7c6      	b.n	8009b2a <_printf_common+0x3e>
 8009b9c:	18e1      	adds	r1, r4, r3
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	2030      	movs	r0, #48	@ 0x30
 8009ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ba6:	4422      	add	r2, r4
 8009ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	e7c7      	b.n	8009b44 <_printf_common+0x58>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	4641      	mov	r1, r8
 8009bba:	4638      	mov	r0, r7
 8009bbc:	47c8      	blx	r9
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d0e6      	beq.n	8009b90 <_printf_common+0xa4>
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7d9      	b.n	8009b7a <_printf_common+0x8e>
	...

08009bc8 <_printf_i>:
 8009bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	7e0f      	ldrb	r7, [r1, #24]
 8009bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bd0:	2f78      	cmp	r7, #120	@ 0x78
 8009bd2:	4691      	mov	r9, r2
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	469a      	mov	sl, r3
 8009bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bde:	d807      	bhi.n	8009bf0 <_printf_i+0x28>
 8009be0:	2f62      	cmp	r7, #98	@ 0x62
 8009be2:	d80a      	bhi.n	8009bfa <_printf_i+0x32>
 8009be4:	2f00      	cmp	r7, #0
 8009be6:	f000 80d2 	beq.w	8009d8e <_printf_i+0x1c6>
 8009bea:	2f58      	cmp	r7, #88	@ 0x58
 8009bec:	f000 80b9 	beq.w	8009d62 <_printf_i+0x19a>
 8009bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bf8:	e03a      	b.n	8009c70 <_printf_i+0xa8>
 8009bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bfe:	2b15      	cmp	r3, #21
 8009c00:	d8f6      	bhi.n	8009bf0 <_printf_i+0x28>
 8009c02:	a101      	add	r1, pc, #4	@ (adr r1, 8009c08 <_printf_i+0x40>)
 8009c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c08:	08009c61 	.word	0x08009c61
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009bf1 	.word	0x08009bf1
 8009c14:	08009bf1 	.word	0x08009bf1
 8009c18:	08009bf1 	.word	0x08009bf1
 8009c1c:	08009bf1 	.word	0x08009bf1
 8009c20:	08009c75 	.word	0x08009c75
 8009c24:	08009bf1 	.word	0x08009bf1
 8009c28:	08009bf1 	.word	0x08009bf1
 8009c2c:	08009bf1 	.word	0x08009bf1
 8009c30:	08009bf1 	.word	0x08009bf1
 8009c34:	08009d75 	.word	0x08009d75
 8009c38:	08009c9f 	.word	0x08009c9f
 8009c3c:	08009d2f 	.word	0x08009d2f
 8009c40:	08009bf1 	.word	0x08009bf1
 8009c44:	08009bf1 	.word	0x08009bf1
 8009c48:	08009d97 	.word	0x08009d97
 8009c4c:	08009bf1 	.word	0x08009bf1
 8009c50:	08009c9f 	.word	0x08009c9f
 8009c54:	08009bf1 	.word	0x08009bf1
 8009c58:	08009bf1 	.word	0x08009bf1
 8009c5c:	08009d37 	.word	0x08009d37
 8009c60:	6833      	ldr	r3, [r6, #0]
 8009c62:	1d1a      	adds	r2, r3, #4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6032      	str	r2, [r6, #0]
 8009c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c70:	2301      	movs	r3, #1
 8009c72:	e09d      	b.n	8009db0 <_printf_i+0x1e8>
 8009c74:	6833      	ldr	r3, [r6, #0]
 8009c76:	6820      	ldr	r0, [r4, #0]
 8009c78:	1d19      	adds	r1, r3, #4
 8009c7a:	6031      	str	r1, [r6, #0]
 8009c7c:	0606      	lsls	r6, r0, #24
 8009c7e:	d501      	bpl.n	8009c84 <_printf_i+0xbc>
 8009c80:	681d      	ldr	r5, [r3, #0]
 8009c82:	e003      	b.n	8009c8c <_printf_i+0xc4>
 8009c84:	0645      	lsls	r5, r0, #25
 8009c86:	d5fb      	bpl.n	8009c80 <_printf_i+0xb8>
 8009c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	da03      	bge.n	8009c98 <_printf_i+0xd0>
 8009c90:	232d      	movs	r3, #45	@ 0x2d
 8009c92:	426d      	negs	r5, r5
 8009c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c98:	4859      	ldr	r0, [pc, #356]	@ (8009e00 <_printf_i+0x238>)
 8009c9a:	230a      	movs	r3, #10
 8009c9c:	e011      	b.n	8009cc2 <_printf_i+0xfa>
 8009c9e:	6821      	ldr	r1, [r4, #0]
 8009ca0:	6833      	ldr	r3, [r6, #0]
 8009ca2:	0608      	lsls	r0, r1, #24
 8009ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ca8:	d402      	bmi.n	8009cb0 <_printf_i+0xe8>
 8009caa:	0649      	lsls	r1, r1, #25
 8009cac:	bf48      	it	mi
 8009cae:	b2ad      	uxthmi	r5, r5
 8009cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cb2:	4853      	ldr	r0, [pc, #332]	@ (8009e00 <_printf_i+0x238>)
 8009cb4:	6033      	str	r3, [r6, #0]
 8009cb6:	bf14      	ite	ne
 8009cb8:	230a      	movne	r3, #10
 8009cba:	2308      	moveq	r3, #8
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cc2:	6866      	ldr	r6, [r4, #4]
 8009cc4:	60a6      	str	r6, [r4, #8]
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	bfa2      	ittt	ge
 8009cca:	6821      	ldrge	r1, [r4, #0]
 8009ccc:	f021 0104 	bicge.w	r1, r1, #4
 8009cd0:	6021      	strge	r1, [r4, #0]
 8009cd2:	b90d      	cbnz	r5, 8009cd8 <_printf_i+0x110>
 8009cd4:	2e00      	cmp	r6, #0
 8009cd6:	d04b      	beq.n	8009d70 <_printf_i+0x1a8>
 8009cd8:	4616      	mov	r6, r2
 8009cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cde:	fb03 5711 	mls	r7, r3, r1, r5
 8009ce2:	5dc7      	ldrb	r7, [r0, r7]
 8009ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ce8:	462f      	mov	r7, r5
 8009cea:	42bb      	cmp	r3, r7
 8009cec:	460d      	mov	r5, r1
 8009cee:	d9f4      	bls.n	8009cda <_printf_i+0x112>
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	d10b      	bne.n	8009d0c <_printf_i+0x144>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	07df      	lsls	r7, r3, #31
 8009cf8:	d508      	bpl.n	8009d0c <_printf_i+0x144>
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	6861      	ldr	r1, [r4, #4]
 8009cfe:	4299      	cmp	r1, r3
 8009d00:	bfde      	ittt	le
 8009d02:	2330      	movle	r3, #48	@ 0x30
 8009d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d0c:	1b92      	subs	r2, r2, r6
 8009d0e:	6122      	str	r2, [r4, #16]
 8009d10:	f8cd a000 	str.w	sl, [sp]
 8009d14:	464b      	mov	r3, r9
 8009d16:	aa03      	add	r2, sp, #12
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	f7ff fee6 	bl	8009aec <_printf_common>
 8009d20:	3001      	adds	r0, #1
 8009d22:	d14a      	bne.n	8009dba <_printf_i+0x1f2>
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295
 8009d28:	b004      	add	sp, #16
 8009d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	f043 0320 	orr.w	r3, r3, #32
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	4833      	ldr	r0, [pc, #204]	@ (8009e04 <_printf_i+0x23c>)
 8009d38:	2778      	movs	r7, #120	@ 0x78
 8009d3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	6831      	ldr	r1, [r6, #0]
 8009d42:	061f      	lsls	r7, r3, #24
 8009d44:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d48:	d402      	bmi.n	8009d50 <_printf_i+0x188>
 8009d4a:	065f      	lsls	r7, r3, #25
 8009d4c:	bf48      	it	mi
 8009d4e:	b2ad      	uxthmi	r5, r5
 8009d50:	6031      	str	r1, [r6, #0]
 8009d52:	07d9      	lsls	r1, r3, #31
 8009d54:	bf44      	itt	mi
 8009d56:	f043 0320 	orrmi.w	r3, r3, #32
 8009d5a:	6023      	strmi	r3, [r4, #0]
 8009d5c:	b11d      	cbz	r5, 8009d66 <_printf_i+0x19e>
 8009d5e:	2310      	movs	r3, #16
 8009d60:	e7ac      	b.n	8009cbc <_printf_i+0xf4>
 8009d62:	4827      	ldr	r0, [pc, #156]	@ (8009e00 <_printf_i+0x238>)
 8009d64:	e7e9      	b.n	8009d3a <_printf_i+0x172>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	f023 0320 	bic.w	r3, r3, #32
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	e7f6      	b.n	8009d5e <_printf_i+0x196>
 8009d70:	4616      	mov	r6, r2
 8009d72:	e7bd      	b.n	8009cf0 <_printf_i+0x128>
 8009d74:	6833      	ldr	r3, [r6, #0]
 8009d76:	6825      	ldr	r5, [r4, #0]
 8009d78:	6961      	ldr	r1, [r4, #20]
 8009d7a:	1d18      	adds	r0, r3, #4
 8009d7c:	6030      	str	r0, [r6, #0]
 8009d7e:	062e      	lsls	r6, r5, #24
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	d501      	bpl.n	8009d88 <_printf_i+0x1c0>
 8009d84:	6019      	str	r1, [r3, #0]
 8009d86:	e002      	b.n	8009d8e <_printf_i+0x1c6>
 8009d88:	0668      	lsls	r0, r5, #25
 8009d8a:	d5fb      	bpl.n	8009d84 <_printf_i+0x1bc>
 8009d8c:	8019      	strh	r1, [r3, #0]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	4616      	mov	r6, r2
 8009d94:	e7bc      	b.n	8009d10 <_printf_i+0x148>
 8009d96:	6833      	ldr	r3, [r6, #0]
 8009d98:	1d1a      	adds	r2, r3, #4
 8009d9a:	6032      	str	r2, [r6, #0]
 8009d9c:	681e      	ldr	r6, [r3, #0]
 8009d9e:	6862      	ldr	r2, [r4, #4]
 8009da0:	2100      	movs	r1, #0
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7f6 fa1c 	bl	80001e0 <memchr>
 8009da8:	b108      	cbz	r0, 8009dae <_printf_i+0x1e6>
 8009daa:	1b80      	subs	r0, r0, r6
 8009dac:	6060      	str	r0, [r4, #4]
 8009dae:	6863      	ldr	r3, [r4, #4]
 8009db0:	6123      	str	r3, [r4, #16]
 8009db2:	2300      	movs	r3, #0
 8009db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009db8:	e7aa      	b.n	8009d10 <_printf_i+0x148>
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	47d0      	blx	sl
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d0ad      	beq.n	8009d24 <_printf_i+0x15c>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	079b      	lsls	r3, r3, #30
 8009dcc:	d413      	bmi.n	8009df6 <_printf_i+0x22e>
 8009dce:	68e0      	ldr	r0, [r4, #12]
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	4298      	cmp	r0, r3
 8009dd4:	bfb8      	it	lt
 8009dd6:	4618      	movlt	r0, r3
 8009dd8:	e7a6      	b.n	8009d28 <_printf_i+0x160>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	4632      	mov	r2, r6
 8009dde:	4649      	mov	r1, r9
 8009de0:	4640      	mov	r0, r8
 8009de2:	47d0      	blx	sl
 8009de4:	3001      	adds	r0, #1
 8009de6:	d09d      	beq.n	8009d24 <_printf_i+0x15c>
 8009de8:	3501      	adds	r5, #1
 8009dea:	68e3      	ldr	r3, [r4, #12]
 8009dec:	9903      	ldr	r1, [sp, #12]
 8009dee:	1a5b      	subs	r3, r3, r1
 8009df0:	42ab      	cmp	r3, r5
 8009df2:	dcf2      	bgt.n	8009dda <_printf_i+0x212>
 8009df4:	e7eb      	b.n	8009dce <_printf_i+0x206>
 8009df6:	2500      	movs	r5, #0
 8009df8:	f104 0619 	add.w	r6, r4, #25
 8009dfc:	e7f5      	b.n	8009dea <_printf_i+0x222>
 8009dfe:	bf00      	nop
 8009e00:	0800f282 	.word	0x0800f282
 8009e04:	0800f293 	.word	0x0800f293

08009e08 <_scanf_float>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	b087      	sub	sp, #28
 8009e0e:	4617      	mov	r7, r2
 8009e10:	9303      	str	r3, [sp, #12]
 8009e12:	688b      	ldr	r3, [r1, #8]
 8009e14:	1e5a      	subs	r2, r3, #1
 8009e16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e1a:	bf81      	itttt	hi
 8009e1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e20:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e28:	608b      	strhi	r3, [r1, #8]
 8009e2a:	680b      	ldr	r3, [r1, #0]
 8009e2c:	460a      	mov	r2, r1
 8009e2e:	f04f 0500 	mov.w	r5, #0
 8009e32:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e36:	f842 3b1c 	str.w	r3, [r2], #28
 8009e3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e3e:	4680      	mov	r8, r0
 8009e40:	460c      	mov	r4, r1
 8009e42:	bf98      	it	ls
 8009e44:	f04f 0b00 	movls.w	fp, #0
 8009e48:	9201      	str	r2, [sp, #4]
 8009e4a:	4616      	mov	r6, r2
 8009e4c:	46aa      	mov	sl, r5
 8009e4e:	46a9      	mov	r9, r5
 8009e50:	9502      	str	r5, [sp, #8]
 8009e52:	68a2      	ldr	r2, [r4, #8]
 8009e54:	b152      	cbz	r2, 8009e6c <_scanf_float+0x64>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e5c:	d864      	bhi.n	8009f28 <_scanf_float+0x120>
 8009e5e:	2b40      	cmp	r3, #64	@ 0x40
 8009e60:	d83c      	bhi.n	8009edc <_scanf_float+0xd4>
 8009e62:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009e66:	b2c8      	uxtb	r0, r1
 8009e68:	280e      	cmp	r0, #14
 8009e6a:	d93a      	bls.n	8009ee2 <_scanf_float+0xda>
 8009e6c:	f1b9 0f00 	cmp.w	r9, #0
 8009e70:	d003      	beq.n	8009e7a <_scanf_float+0x72>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e7e:	f1ba 0f01 	cmp.w	sl, #1
 8009e82:	f200 8117 	bhi.w	800a0b4 <_scanf_float+0x2ac>
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	429e      	cmp	r6, r3
 8009e8a:	f200 8108 	bhi.w	800a09e <_scanf_float+0x296>
 8009e8e:	2001      	movs	r0, #1
 8009e90:	b007      	add	sp, #28
 8009e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e96:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009e9a:	2a0d      	cmp	r2, #13
 8009e9c:	d8e6      	bhi.n	8009e6c <_scanf_float+0x64>
 8009e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8009ea4 <_scanf_float+0x9c>)
 8009ea0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ea4:	08009feb 	.word	0x08009feb
 8009ea8:	08009e6d 	.word	0x08009e6d
 8009eac:	08009e6d 	.word	0x08009e6d
 8009eb0:	08009e6d 	.word	0x08009e6d
 8009eb4:	0800a04b 	.word	0x0800a04b
 8009eb8:	0800a023 	.word	0x0800a023
 8009ebc:	08009e6d 	.word	0x08009e6d
 8009ec0:	08009e6d 	.word	0x08009e6d
 8009ec4:	08009ff9 	.word	0x08009ff9
 8009ec8:	08009e6d 	.word	0x08009e6d
 8009ecc:	08009e6d 	.word	0x08009e6d
 8009ed0:	08009e6d 	.word	0x08009e6d
 8009ed4:	08009e6d 	.word	0x08009e6d
 8009ed8:	08009fb1 	.word	0x08009fb1
 8009edc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009ee0:	e7db      	b.n	8009e9a <_scanf_float+0x92>
 8009ee2:	290e      	cmp	r1, #14
 8009ee4:	d8c2      	bhi.n	8009e6c <_scanf_float+0x64>
 8009ee6:	a001      	add	r0, pc, #4	@ (adr r0, 8009eec <_scanf_float+0xe4>)
 8009ee8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009eec:	08009fa1 	.word	0x08009fa1
 8009ef0:	08009e6d 	.word	0x08009e6d
 8009ef4:	08009fa1 	.word	0x08009fa1
 8009ef8:	0800a037 	.word	0x0800a037
 8009efc:	08009e6d 	.word	0x08009e6d
 8009f00:	08009f49 	.word	0x08009f49
 8009f04:	08009f87 	.word	0x08009f87
 8009f08:	08009f87 	.word	0x08009f87
 8009f0c:	08009f87 	.word	0x08009f87
 8009f10:	08009f87 	.word	0x08009f87
 8009f14:	08009f87 	.word	0x08009f87
 8009f18:	08009f87 	.word	0x08009f87
 8009f1c:	08009f87 	.word	0x08009f87
 8009f20:	08009f87 	.word	0x08009f87
 8009f24:	08009f87 	.word	0x08009f87
 8009f28:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f2a:	d809      	bhi.n	8009f40 <_scanf_float+0x138>
 8009f2c:	2b60      	cmp	r3, #96	@ 0x60
 8009f2e:	d8b2      	bhi.n	8009e96 <_scanf_float+0x8e>
 8009f30:	2b54      	cmp	r3, #84	@ 0x54
 8009f32:	d07b      	beq.n	800a02c <_scanf_float+0x224>
 8009f34:	2b59      	cmp	r3, #89	@ 0x59
 8009f36:	d199      	bne.n	8009e6c <_scanf_float+0x64>
 8009f38:	2d07      	cmp	r5, #7
 8009f3a:	d197      	bne.n	8009e6c <_scanf_float+0x64>
 8009f3c:	2508      	movs	r5, #8
 8009f3e:	e02c      	b.n	8009f9a <_scanf_float+0x192>
 8009f40:	2b74      	cmp	r3, #116	@ 0x74
 8009f42:	d073      	beq.n	800a02c <_scanf_float+0x224>
 8009f44:	2b79      	cmp	r3, #121	@ 0x79
 8009f46:	e7f6      	b.n	8009f36 <_scanf_float+0x12e>
 8009f48:	6821      	ldr	r1, [r4, #0]
 8009f4a:	05c8      	lsls	r0, r1, #23
 8009f4c:	d51b      	bpl.n	8009f86 <_scanf_float+0x17e>
 8009f4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009f52:	6021      	str	r1, [r4, #0]
 8009f54:	f109 0901 	add.w	r9, r9, #1
 8009f58:	f1bb 0f00 	cmp.w	fp, #0
 8009f5c:	d003      	beq.n	8009f66 <_scanf_float+0x15e>
 8009f5e:	3201      	adds	r2, #1
 8009f60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f64:	60a2      	str	r2, [r4, #8]
 8009f66:	68a3      	ldr	r3, [r4, #8]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	60a3      	str	r3, [r4, #8]
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	6123      	str	r3, [r4, #16]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	607b      	str	r3, [r7, #4]
 8009f7a:	f340 8087 	ble.w	800a08c <_scanf_float+0x284>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	3301      	adds	r3, #1
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	e765      	b.n	8009e52 <_scanf_float+0x4a>
 8009f86:	eb1a 0105 	adds.w	r1, sl, r5
 8009f8a:	f47f af6f 	bne.w	8009e6c <_scanf_float+0x64>
 8009f8e:	6822      	ldr	r2, [r4, #0]
 8009f90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	460d      	mov	r5, r1
 8009f98:	468a      	mov	sl, r1
 8009f9a:	f806 3b01 	strb.w	r3, [r6], #1
 8009f9e:	e7e2      	b.n	8009f66 <_scanf_float+0x15e>
 8009fa0:	6822      	ldr	r2, [r4, #0]
 8009fa2:	0610      	lsls	r0, r2, #24
 8009fa4:	f57f af62 	bpl.w	8009e6c <_scanf_float+0x64>
 8009fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fac:	6022      	str	r2, [r4, #0]
 8009fae:	e7f4      	b.n	8009f9a <_scanf_float+0x192>
 8009fb0:	f1ba 0f00 	cmp.w	sl, #0
 8009fb4:	d10e      	bne.n	8009fd4 <_scanf_float+0x1cc>
 8009fb6:	f1b9 0f00 	cmp.w	r9, #0
 8009fba:	d10e      	bne.n	8009fda <_scanf_float+0x1d2>
 8009fbc:	6822      	ldr	r2, [r4, #0]
 8009fbe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009fc2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009fc6:	d108      	bne.n	8009fda <_scanf_float+0x1d2>
 8009fc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fcc:	6022      	str	r2, [r4, #0]
 8009fce:	f04f 0a01 	mov.w	sl, #1
 8009fd2:	e7e2      	b.n	8009f9a <_scanf_float+0x192>
 8009fd4:	f1ba 0f02 	cmp.w	sl, #2
 8009fd8:	d055      	beq.n	800a086 <_scanf_float+0x27e>
 8009fda:	2d01      	cmp	r5, #1
 8009fdc:	d002      	beq.n	8009fe4 <_scanf_float+0x1dc>
 8009fde:	2d04      	cmp	r5, #4
 8009fe0:	f47f af44 	bne.w	8009e6c <_scanf_float+0x64>
 8009fe4:	3501      	adds	r5, #1
 8009fe6:	b2ed      	uxtb	r5, r5
 8009fe8:	e7d7      	b.n	8009f9a <_scanf_float+0x192>
 8009fea:	f1ba 0f01 	cmp.w	sl, #1
 8009fee:	f47f af3d 	bne.w	8009e6c <_scanf_float+0x64>
 8009ff2:	f04f 0a02 	mov.w	sl, #2
 8009ff6:	e7d0      	b.n	8009f9a <_scanf_float+0x192>
 8009ff8:	b97d      	cbnz	r5, 800a01a <_scanf_float+0x212>
 8009ffa:	f1b9 0f00 	cmp.w	r9, #0
 8009ffe:	f47f af38 	bne.w	8009e72 <_scanf_float+0x6a>
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a008:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a00c:	f040 8108 	bne.w	800a220 <_scanf_float+0x418>
 800a010:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a014:	6022      	str	r2, [r4, #0]
 800a016:	2501      	movs	r5, #1
 800a018:	e7bf      	b.n	8009f9a <_scanf_float+0x192>
 800a01a:	2d03      	cmp	r5, #3
 800a01c:	d0e2      	beq.n	8009fe4 <_scanf_float+0x1dc>
 800a01e:	2d05      	cmp	r5, #5
 800a020:	e7de      	b.n	8009fe0 <_scanf_float+0x1d8>
 800a022:	2d02      	cmp	r5, #2
 800a024:	f47f af22 	bne.w	8009e6c <_scanf_float+0x64>
 800a028:	2503      	movs	r5, #3
 800a02a:	e7b6      	b.n	8009f9a <_scanf_float+0x192>
 800a02c:	2d06      	cmp	r5, #6
 800a02e:	f47f af1d 	bne.w	8009e6c <_scanf_float+0x64>
 800a032:	2507      	movs	r5, #7
 800a034:	e7b1      	b.n	8009f9a <_scanf_float+0x192>
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	0591      	lsls	r1, r2, #22
 800a03a:	f57f af17 	bpl.w	8009e6c <_scanf_float+0x64>
 800a03e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a042:	6022      	str	r2, [r4, #0]
 800a044:	f8cd 9008 	str.w	r9, [sp, #8]
 800a048:	e7a7      	b.n	8009f9a <_scanf_float+0x192>
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a050:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a054:	d006      	beq.n	800a064 <_scanf_float+0x25c>
 800a056:	0550      	lsls	r0, r2, #21
 800a058:	f57f af08 	bpl.w	8009e6c <_scanf_float+0x64>
 800a05c:	f1b9 0f00 	cmp.w	r9, #0
 800a060:	f000 80de 	beq.w	800a220 <_scanf_float+0x418>
 800a064:	0591      	lsls	r1, r2, #22
 800a066:	bf58      	it	pl
 800a068:	9902      	ldrpl	r1, [sp, #8]
 800a06a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a06e:	bf58      	it	pl
 800a070:	eba9 0101 	subpl.w	r1, r9, r1
 800a074:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a078:	bf58      	it	pl
 800a07a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	f04f 0900 	mov.w	r9, #0
 800a084:	e789      	b.n	8009f9a <_scanf_float+0x192>
 800a086:	f04f 0a03 	mov.w	sl, #3
 800a08a:	e786      	b.n	8009f9a <_scanf_float+0x192>
 800a08c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a090:	4639      	mov	r1, r7
 800a092:	4640      	mov	r0, r8
 800a094:	4798      	blx	r3
 800a096:	2800      	cmp	r0, #0
 800a098:	f43f aedb 	beq.w	8009e52 <_scanf_float+0x4a>
 800a09c:	e6e6      	b.n	8009e6c <_scanf_float+0x64>
 800a09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0a6:	463a      	mov	r2, r7
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	4798      	blx	r3
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	e6e8      	b.n	8009e86 <_scanf_float+0x7e>
 800a0b4:	1e6b      	subs	r3, r5, #1
 800a0b6:	2b06      	cmp	r3, #6
 800a0b8:	d824      	bhi.n	800a104 <_scanf_float+0x2fc>
 800a0ba:	2d02      	cmp	r5, #2
 800a0bc:	d836      	bhi.n	800a12c <_scanf_float+0x324>
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	429e      	cmp	r6, r3
 800a0c2:	f67f aee4 	bls.w	8009e8e <_scanf_float+0x86>
 800a0c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0ce:	463a      	mov	r2, r7
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4798      	blx	r3
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	6123      	str	r3, [r4, #16]
 800a0da:	e7f0      	b.n	800a0be <_scanf_float+0x2b6>
 800a0dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a0e4:	463a      	mov	r2, r7
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	4798      	blx	r3
 800a0ea:	6923      	ldr	r3, [r4, #16]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	6123      	str	r3, [r4, #16]
 800a0f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0f4:	fa5f fa8a 	uxtb.w	sl, sl
 800a0f8:	f1ba 0f02 	cmp.w	sl, #2
 800a0fc:	d1ee      	bne.n	800a0dc <_scanf_float+0x2d4>
 800a0fe:	3d03      	subs	r5, #3
 800a100:	b2ed      	uxtb	r5, r5
 800a102:	1b76      	subs	r6, r6, r5
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	05da      	lsls	r2, r3, #23
 800a108:	d530      	bpl.n	800a16c <_scanf_float+0x364>
 800a10a:	055b      	lsls	r3, r3, #21
 800a10c:	d511      	bpl.n	800a132 <_scanf_float+0x32a>
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	429e      	cmp	r6, r3
 800a112:	f67f aebc 	bls.w	8009e8e <_scanf_float+0x86>
 800a116:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a11a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a11e:	463a      	mov	r2, r7
 800a120:	4640      	mov	r0, r8
 800a122:	4798      	blx	r3
 800a124:	6923      	ldr	r3, [r4, #16]
 800a126:	3b01      	subs	r3, #1
 800a128:	6123      	str	r3, [r4, #16]
 800a12a:	e7f0      	b.n	800a10e <_scanf_float+0x306>
 800a12c:	46aa      	mov	sl, r5
 800a12e:	46b3      	mov	fp, r6
 800a130:	e7de      	b.n	800a0f0 <_scanf_float+0x2e8>
 800a132:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	2965      	cmp	r1, #101	@ 0x65
 800a13a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a13e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a142:	6123      	str	r3, [r4, #16]
 800a144:	d00c      	beq.n	800a160 <_scanf_float+0x358>
 800a146:	2945      	cmp	r1, #69	@ 0x45
 800a148:	d00a      	beq.n	800a160 <_scanf_float+0x358>
 800a14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a14e:	463a      	mov	r2, r7
 800a150:	4640      	mov	r0, r8
 800a152:	4798      	blx	r3
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	1eb5      	subs	r5, r6, #2
 800a15e:	6123      	str	r3, [r4, #16]
 800a160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a164:	463a      	mov	r2, r7
 800a166:	4640      	mov	r0, r8
 800a168:	4798      	blx	r3
 800a16a:	462e      	mov	r6, r5
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	f012 0210 	ands.w	r2, r2, #16
 800a172:	d001      	beq.n	800a178 <_scanf_float+0x370>
 800a174:	2000      	movs	r0, #0
 800a176:	e68b      	b.n	8009e90 <_scanf_float+0x88>
 800a178:	7032      	strb	r2, [r6, #0]
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a184:	d11c      	bne.n	800a1c0 <_scanf_float+0x3b8>
 800a186:	9b02      	ldr	r3, [sp, #8]
 800a188:	454b      	cmp	r3, r9
 800a18a:	eba3 0209 	sub.w	r2, r3, r9
 800a18e:	d123      	bne.n	800a1d8 <_scanf_float+0x3d0>
 800a190:	9901      	ldr	r1, [sp, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	4640      	mov	r0, r8
 800a196:	f002 fc17 	bl	800c9c8 <_strtod_r>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	6821      	ldr	r1, [r4, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f011 0f02 	tst.w	r1, #2
 800a1a4:	ec57 6b10 	vmov	r6, r7, d0
 800a1a8:	f103 0204 	add.w	r2, r3, #4
 800a1ac:	d01f      	beq.n	800a1ee <_scanf_float+0x3e6>
 800a1ae:	9903      	ldr	r1, [sp, #12]
 800a1b0:	600a      	str	r2, [r1, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	e9c3 6700 	strd	r6, r7, [r3]
 800a1b8:	68e3      	ldr	r3, [r4, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60e3      	str	r3, [r4, #12]
 800a1be:	e7d9      	b.n	800a174 <_scanf_float+0x36c>
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0e4      	beq.n	800a190 <_scanf_float+0x388>
 800a1c6:	9905      	ldr	r1, [sp, #20]
 800a1c8:	230a      	movs	r3, #10
 800a1ca:	3101      	adds	r1, #1
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	f002 fc7b 	bl	800cac8 <_strtol_r>
 800a1d2:	9b04      	ldr	r3, [sp, #16]
 800a1d4:	9e05      	ldr	r6, [sp, #20]
 800a1d6:	1ac2      	subs	r2, r0, r3
 800a1d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a1dc:	429e      	cmp	r6, r3
 800a1de:	bf28      	it	cs
 800a1e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a1e4:	4910      	ldr	r1, [pc, #64]	@ (800a228 <_scanf_float+0x420>)
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f000 f8e4 	bl	800a3b4 <siprintf>
 800a1ec:	e7d0      	b.n	800a190 <_scanf_float+0x388>
 800a1ee:	f011 0f04 	tst.w	r1, #4
 800a1f2:	9903      	ldr	r1, [sp, #12]
 800a1f4:	600a      	str	r2, [r1, #0]
 800a1f6:	d1dc      	bne.n	800a1b2 <_scanf_float+0x3aa>
 800a1f8:	681d      	ldr	r5, [r3, #0]
 800a1fa:	4632      	mov	r2, r6
 800a1fc:	463b      	mov	r3, r7
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	f7f6 fc9b 	bl	8000b3c <__aeabi_dcmpun>
 800a206:	b128      	cbz	r0, 800a214 <_scanf_float+0x40c>
 800a208:	4808      	ldr	r0, [pc, #32]	@ (800a22c <_scanf_float+0x424>)
 800a20a:	f000 f9d7 	bl	800a5bc <nanf>
 800a20e:	ed85 0a00 	vstr	s0, [r5]
 800a212:	e7d1      	b.n	800a1b8 <_scanf_float+0x3b0>
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f7f6 fcee 	bl	8000bf8 <__aeabi_d2f>
 800a21c:	6028      	str	r0, [r5, #0]
 800a21e:	e7cb      	b.n	800a1b8 <_scanf_float+0x3b0>
 800a220:	f04f 0900 	mov.w	r9, #0
 800a224:	e629      	b.n	8009e7a <_scanf_float+0x72>
 800a226:	bf00      	nop
 800a228:	0800f2a4 	.word	0x0800f2a4
 800a22c:	0800f63d 	.word	0x0800f63d

0800a230 <std>:
 800a230:	2300      	movs	r3, #0
 800a232:	b510      	push	{r4, lr}
 800a234:	4604      	mov	r4, r0
 800a236:	e9c0 3300 	strd	r3, r3, [r0]
 800a23a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a23e:	6083      	str	r3, [r0, #8]
 800a240:	8181      	strh	r1, [r0, #12]
 800a242:	6643      	str	r3, [r0, #100]	@ 0x64
 800a244:	81c2      	strh	r2, [r0, #14]
 800a246:	6183      	str	r3, [r0, #24]
 800a248:	4619      	mov	r1, r3
 800a24a:	2208      	movs	r2, #8
 800a24c:	305c      	adds	r0, #92	@ 0x5c
 800a24e:	f000 f914 	bl	800a47a <memset>
 800a252:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <std+0x58>)
 800a254:	6263      	str	r3, [r4, #36]	@ 0x24
 800a256:	4b0d      	ldr	r3, [pc, #52]	@ (800a28c <std+0x5c>)
 800a258:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a25a:	4b0d      	ldr	r3, [pc, #52]	@ (800a290 <std+0x60>)
 800a25c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a25e:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <std+0x64>)
 800a260:	6323      	str	r3, [r4, #48]	@ 0x30
 800a262:	4b0d      	ldr	r3, [pc, #52]	@ (800a298 <std+0x68>)
 800a264:	6224      	str	r4, [r4, #32]
 800a266:	429c      	cmp	r4, r3
 800a268:	d006      	beq.n	800a278 <std+0x48>
 800a26a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a26e:	4294      	cmp	r4, r2
 800a270:	d002      	beq.n	800a278 <std+0x48>
 800a272:	33d0      	adds	r3, #208	@ 0xd0
 800a274:	429c      	cmp	r4, r3
 800a276:	d105      	bne.n	800a284 <std+0x54>
 800a278:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a280:	f000 b98a 	b.w	800a598 <__retarget_lock_init_recursive>
 800a284:	bd10      	pop	{r4, pc}
 800a286:	bf00      	nop
 800a288:	0800a3f5 	.word	0x0800a3f5
 800a28c:	0800a417 	.word	0x0800a417
 800a290:	0800a44f 	.word	0x0800a44f
 800a294:	0800a473 	.word	0x0800a473
 800a298:	20004e00 	.word	0x20004e00

0800a29c <stdio_exit_handler>:
 800a29c:	4a02      	ldr	r2, [pc, #8]	@ (800a2a8 <stdio_exit_handler+0xc>)
 800a29e:	4903      	ldr	r1, [pc, #12]	@ (800a2ac <stdio_exit_handler+0x10>)
 800a2a0:	4803      	ldr	r0, [pc, #12]	@ (800a2b0 <stdio_exit_handler+0x14>)
 800a2a2:	f000 b869 	b.w	800a378 <_fwalk_sglue>
 800a2a6:	bf00      	nop
 800a2a8:	20000020 	.word	0x20000020
 800a2ac:	0800ce85 	.word	0x0800ce85
 800a2b0:	20000030 	.word	0x20000030

0800a2b4 <cleanup_stdio>:
 800a2b4:	6841      	ldr	r1, [r0, #4]
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e8 <cleanup_stdio+0x34>)
 800a2b8:	4299      	cmp	r1, r3
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	d001      	beq.n	800a2c4 <cleanup_stdio+0x10>
 800a2c0:	f002 fde0 	bl	800ce84 <_fflush_r>
 800a2c4:	68a1      	ldr	r1, [r4, #8]
 800a2c6:	4b09      	ldr	r3, [pc, #36]	@ (800a2ec <cleanup_stdio+0x38>)
 800a2c8:	4299      	cmp	r1, r3
 800a2ca:	d002      	beq.n	800a2d2 <cleanup_stdio+0x1e>
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f002 fdd9 	bl	800ce84 <_fflush_r>
 800a2d2:	68e1      	ldr	r1, [r4, #12]
 800a2d4:	4b06      	ldr	r3, [pc, #24]	@ (800a2f0 <cleanup_stdio+0x3c>)
 800a2d6:	4299      	cmp	r1, r3
 800a2d8:	d004      	beq.n	800a2e4 <cleanup_stdio+0x30>
 800a2da:	4620      	mov	r0, r4
 800a2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e0:	f002 bdd0 	b.w	800ce84 <_fflush_r>
 800a2e4:	bd10      	pop	{r4, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20004e00 	.word	0x20004e00
 800a2ec:	20004e68 	.word	0x20004e68
 800a2f0:	20004ed0 	.word	0x20004ed0

0800a2f4 <global_stdio_init.part.0>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a324 <global_stdio_init.part.0+0x30>)
 800a2f8:	4c0b      	ldr	r4, [pc, #44]	@ (800a328 <global_stdio_init.part.0+0x34>)
 800a2fa:	4a0c      	ldr	r2, [pc, #48]	@ (800a32c <global_stdio_init.part.0+0x38>)
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	4620      	mov	r0, r4
 800a300:	2200      	movs	r2, #0
 800a302:	2104      	movs	r1, #4
 800a304:	f7ff ff94 	bl	800a230 <std>
 800a308:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a30c:	2201      	movs	r2, #1
 800a30e:	2109      	movs	r1, #9
 800a310:	f7ff ff8e 	bl	800a230 <std>
 800a314:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a318:	2202      	movs	r2, #2
 800a31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a31e:	2112      	movs	r1, #18
 800a320:	f7ff bf86 	b.w	800a230 <std>
 800a324:	20004f38 	.word	0x20004f38
 800a328:	20004e00 	.word	0x20004e00
 800a32c:	0800a29d 	.word	0x0800a29d

0800a330 <__sfp_lock_acquire>:
 800a330:	4801      	ldr	r0, [pc, #4]	@ (800a338 <__sfp_lock_acquire+0x8>)
 800a332:	f000 b932 	b.w	800a59a <__retarget_lock_acquire_recursive>
 800a336:	bf00      	nop
 800a338:	20004f41 	.word	0x20004f41

0800a33c <__sfp_lock_release>:
 800a33c:	4801      	ldr	r0, [pc, #4]	@ (800a344 <__sfp_lock_release+0x8>)
 800a33e:	f000 b92d 	b.w	800a59c <__retarget_lock_release_recursive>
 800a342:	bf00      	nop
 800a344:	20004f41 	.word	0x20004f41

0800a348 <__sinit>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	4604      	mov	r4, r0
 800a34c:	f7ff fff0 	bl	800a330 <__sfp_lock_acquire>
 800a350:	6a23      	ldr	r3, [r4, #32]
 800a352:	b11b      	cbz	r3, 800a35c <__sinit+0x14>
 800a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a358:	f7ff bff0 	b.w	800a33c <__sfp_lock_release>
 800a35c:	4b04      	ldr	r3, [pc, #16]	@ (800a370 <__sinit+0x28>)
 800a35e:	6223      	str	r3, [r4, #32]
 800a360:	4b04      	ldr	r3, [pc, #16]	@ (800a374 <__sinit+0x2c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1f5      	bne.n	800a354 <__sinit+0xc>
 800a368:	f7ff ffc4 	bl	800a2f4 <global_stdio_init.part.0>
 800a36c:	e7f2      	b.n	800a354 <__sinit+0xc>
 800a36e:	bf00      	nop
 800a370:	0800a2b5 	.word	0x0800a2b5
 800a374:	20004f38 	.word	0x20004f38

0800a378 <_fwalk_sglue>:
 800a378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a37c:	4607      	mov	r7, r0
 800a37e:	4688      	mov	r8, r1
 800a380:	4614      	mov	r4, r2
 800a382:	2600      	movs	r6, #0
 800a384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a388:	f1b9 0901 	subs.w	r9, r9, #1
 800a38c:	d505      	bpl.n	800a39a <_fwalk_sglue+0x22>
 800a38e:	6824      	ldr	r4, [r4, #0]
 800a390:	2c00      	cmp	r4, #0
 800a392:	d1f7      	bne.n	800a384 <_fwalk_sglue+0xc>
 800a394:	4630      	mov	r0, r6
 800a396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a39a:	89ab      	ldrh	r3, [r5, #12]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d907      	bls.n	800a3b0 <_fwalk_sglue+0x38>
 800a3a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	d003      	beq.n	800a3b0 <_fwalk_sglue+0x38>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	47c0      	blx	r8
 800a3ae:	4306      	orrs	r6, r0
 800a3b0:	3568      	adds	r5, #104	@ 0x68
 800a3b2:	e7e9      	b.n	800a388 <_fwalk_sglue+0x10>

0800a3b4 <siprintf>:
 800a3b4:	b40e      	push	{r1, r2, r3}
 800a3b6:	b500      	push	{lr}
 800a3b8:	b09c      	sub	sp, #112	@ 0x70
 800a3ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3bc:	9002      	str	r0, [sp, #8]
 800a3be:	9006      	str	r0, [sp, #24]
 800a3c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3c4:	4809      	ldr	r0, [pc, #36]	@ (800a3ec <siprintf+0x38>)
 800a3c6:	9107      	str	r1, [sp, #28]
 800a3c8:	9104      	str	r1, [sp, #16]
 800a3ca:	4909      	ldr	r1, [pc, #36]	@ (800a3f0 <siprintf+0x3c>)
 800a3cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d0:	9105      	str	r1, [sp, #20]
 800a3d2:	6800      	ldr	r0, [r0, #0]
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	a902      	add	r1, sp, #8
 800a3d8:	f002 fbd4 	bl	800cb84 <_svfiprintf_r>
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	701a      	strb	r2, [r3, #0]
 800a3e2:	b01c      	add	sp, #112	@ 0x70
 800a3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e8:	b003      	add	sp, #12
 800a3ea:	4770      	bx	lr
 800a3ec:	2000002c 	.word	0x2000002c
 800a3f0:	ffff0208 	.word	0xffff0208

0800a3f4 <__sread>:
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fc:	f000 f87e 	bl	800a4fc <_read_r>
 800a400:	2800      	cmp	r0, #0
 800a402:	bfab      	itete	ge
 800a404:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a406:	89a3      	ldrhlt	r3, [r4, #12]
 800a408:	181b      	addge	r3, r3, r0
 800a40a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a40e:	bfac      	ite	ge
 800a410:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a412:	81a3      	strhlt	r3, [r4, #12]
 800a414:	bd10      	pop	{r4, pc}

0800a416 <__swrite>:
 800a416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41a:	461f      	mov	r7, r3
 800a41c:	898b      	ldrh	r3, [r1, #12]
 800a41e:	05db      	lsls	r3, r3, #23
 800a420:	4605      	mov	r5, r0
 800a422:	460c      	mov	r4, r1
 800a424:	4616      	mov	r6, r2
 800a426:	d505      	bpl.n	800a434 <__swrite+0x1e>
 800a428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42c:	2302      	movs	r3, #2
 800a42e:	2200      	movs	r2, #0
 800a430:	f000 f852 	bl	800a4d8 <_lseek_r>
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a43a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a43e:	81a3      	strh	r3, [r4, #12]
 800a440:	4632      	mov	r2, r6
 800a442:	463b      	mov	r3, r7
 800a444:	4628      	mov	r0, r5
 800a446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a44a:	f000 b869 	b.w	800a520 <_write_r>

0800a44e <__sseek>:
 800a44e:	b510      	push	{r4, lr}
 800a450:	460c      	mov	r4, r1
 800a452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a456:	f000 f83f 	bl	800a4d8 <_lseek_r>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	bf15      	itete	ne
 800a460:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a46a:	81a3      	strheq	r3, [r4, #12]
 800a46c:	bf18      	it	ne
 800a46e:	81a3      	strhne	r3, [r4, #12]
 800a470:	bd10      	pop	{r4, pc}

0800a472 <__sclose>:
 800a472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a476:	f000 b81f 	b.w	800a4b8 <_close_r>

0800a47a <memset>:
 800a47a:	4402      	add	r2, r0
 800a47c:	4603      	mov	r3, r0
 800a47e:	4293      	cmp	r3, r2
 800a480:	d100      	bne.n	800a484 <memset+0xa>
 800a482:	4770      	bx	lr
 800a484:	f803 1b01 	strb.w	r1, [r3], #1
 800a488:	e7f9      	b.n	800a47e <memset+0x4>

0800a48a <strncpy>:
 800a48a:	b510      	push	{r4, lr}
 800a48c:	3901      	subs	r1, #1
 800a48e:	4603      	mov	r3, r0
 800a490:	b132      	cbz	r2, 800a4a0 <strncpy+0x16>
 800a492:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a496:	f803 4b01 	strb.w	r4, [r3], #1
 800a49a:	3a01      	subs	r2, #1
 800a49c:	2c00      	cmp	r4, #0
 800a49e:	d1f7      	bne.n	800a490 <strncpy+0x6>
 800a4a0:	441a      	add	r2, r3
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d100      	bne.n	800a4aa <strncpy+0x20>
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ae:	e7f9      	b.n	800a4a4 <strncpy+0x1a>

0800a4b0 <_localeconv_r>:
 800a4b0:	4800      	ldr	r0, [pc, #0]	@ (800a4b4 <_localeconv_r+0x4>)
 800a4b2:	4770      	bx	lr
 800a4b4:	2000016c 	.word	0x2000016c

0800a4b8 <_close_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d06      	ldr	r5, [pc, #24]	@ (800a4d4 <_close_r+0x1c>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f8 f940 	bl	8002748 <_close>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_close_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_close_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20004f3c 	.word	0x20004f3c

0800a4d8 <_lseek_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d07      	ldr	r5, [pc, #28]	@ (800a4f8 <_lseek_r+0x20>)
 800a4dc:	4604      	mov	r4, r0
 800a4de:	4608      	mov	r0, r1
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	602a      	str	r2, [r5, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f7f8 f955 	bl	8002796 <_lseek>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d102      	bne.n	800a4f6 <_lseek_r+0x1e>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	b103      	cbz	r3, 800a4f6 <_lseek_r+0x1e>
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	20004f3c 	.word	0x20004f3c

0800a4fc <_read_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4d07      	ldr	r5, [pc, #28]	@ (800a51c <_read_r+0x20>)
 800a500:	4604      	mov	r4, r0
 800a502:	4608      	mov	r0, r1
 800a504:	4611      	mov	r1, r2
 800a506:	2200      	movs	r2, #0
 800a508:	602a      	str	r2, [r5, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f7f8 f8e3 	bl	80026d6 <_read>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_read_r+0x1e>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b103      	cbz	r3, 800a51a <_read_r+0x1e>
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	20004f3c 	.word	0x20004f3c

0800a520 <_write_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d07      	ldr	r5, [pc, #28]	@ (800a540 <_write_r+0x20>)
 800a524:	4604      	mov	r4, r0
 800a526:	4608      	mov	r0, r1
 800a528:	4611      	mov	r1, r2
 800a52a:	2200      	movs	r2, #0
 800a52c:	602a      	str	r2, [r5, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	f7f8 f8ee 	bl	8002710 <_write>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d102      	bne.n	800a53e <_write_r+0x1e>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	b103      	cbz	r3, 800a53e <_write_r+0x1e>
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	20004f3c 	.word	0x20004f3c

0800a544 <__errno>:
 800a544:	4b01      	ldr	r3, [pc, #4]	@ (800a54c <__errno+0x8>)
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	2000002c 	.word	0x2000002c

0800a550 <__libc_init_array>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	4d0d      	ldr	r5, [pc, #52]	@ (800a588 <__libc_init_array+0x38>)
 800a554:	4c0d      	ldr	r4, [pc, #52]	@ (800a58c <__libc_init_array+0x3c>)
 800a556:	1b64      	subs	r4, r4, r5
 800a558:	10a4      	asrs	r4, r4, #2
 800a55a:	2600      	movs	r6, #0
 800a55c:	42a6      	cmp	r6, r4
 800a55e:	d109      	bne.n	800a574 <__libc_init_array+0x24>
 800a560:	4d0b      	ldr	r5, [pc, #44]	@ (800a590 <__libc_init_array+0x40>)
 800a562:	4c0c      	ldr	r4, [pc, #48]	@ (800a594 <__libc_init_array+0x44>)
 800a564:	f003 fb72 	bl	800dc4c <_init>
 800a568:	1b64      	subs	r4, r4, r5
 800a56a:	10a4      	asrs	r4, r4, #2
 800a56c:	2600      	movs	r6, #0
 800a56e:	42a6      	cmp	r6, r4
 800a570:	d105      	bne.n	800a57e <__libc_init_array+0x2e>
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	f855 3b04 	ldr.w	r3, [r5], #4
 800a578:	4798      	blx	r3
 800a57a:	3601      	adds	r6, #1
 800a57c:	e7ee      	b.n	800a55c <__libc_init_array+0xc>
 800a57e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a582:	4798      	blx	r3
 800a584:	3601      	adds	r6, #1
 800a586:	e7f2      	b.n	800a56e <__libc_init_array+0x1e>
 800a588:	0800f6a8 	.word	0x0800f6a8
 800a58c:	0800f6a8 	.word	0x0800f6a8
 800a590:	0800f6a8 	.word	0x0800f6a8
 800a594:	0800f6ac 	.word	0x0800f6ac

0800a598 <__retarget_lock_init_recursive>:
 800a598:	4770      	bx	lr

0800a59a <__retarget_lock_acquire_recursive>:
 800a59a:	4770      	bx	lr

0800a59c <__retarget_lock_release_recursive>:
 800a59c:	4770      	bx	lr

0800a59e <memcpy>:
 800a59e:	440a      	add	r2, r1
 800a5a0:	4291      	cmp	r1, r2
 800a5a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5a6:	d100      	bne.n	800a5aa <memcpy+0xc>
 800a5a8:	4770      	bx	lr
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5b4:	4291      	cmp	r1, r2
 800a5b6:	d1f9      	bne.n	800a5ac <memcpy+0xe>
 800a5b8:	bd10      	pop	{r4, pc}
	...

0800a5bc <nanf>:
 800a5bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a5c4 <nanf+0x8>
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	7fc00000 	.word	0x7fc00000

0800a5c8 <quorem>:
 800a5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	6903      	ldr	r3, [r0, #16]
 800a5ce:	690c      	ldr	r4, [r1, #16]
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	db7e      	blt.n	800a6d4 <quorem+0x10c>
 800a5d6:	3c01      	subs	r4, #1
 800a5d8:	f101 0814 	add.w	r8, r1, #20
 800a5dc:	00a3      	lsls	r3, r4, #2
 800a5de:	f100 0514 	add.w	r5, r0, #20
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5fa:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5fe:	d32e      	bcc.n	800a65e <quorem+0x96>
 800a600:	f04f 0a00 	mov.w	sl, #0
 800a604:	46c4      	mov	ip, r8
 800a606:	46ae      	mov	lr, r5
 800a608:	46d3      	mov	fp, sl
 800a60a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a60e:	b298      	uxth	r0, r3
 800a610:	fb06 a000 	mla	r0, r6, r0, sl
 800a614:	0c02      	lsrs	r2, r0, #16
 800a616:	0c1b      	lsrs	r3, r3, #16
 800a618:	fb06 2303 	mla	r3, r6, r3, r2
 800a61c:	f8de 2000 	ldr.w	r2, [lr]
 800a620:	b280      	uxth	r0, r0
 800a622:	b292      	uxth	r2, r2
 800a624:	1a12      	subs	r2, r2, r0
 800a626:	445a      	add	r2, fp
 800a628:	f8de 0000 	ldr.w	r0, [lr]
 800a62c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a630:	b29b      	uxth	r3, r3
 800a632:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a636:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a63a:	b292      	uxth	r2, r2
 800a63c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a640:	45e1      	cmp	r9, ip
 800a642:	f84e 2b04 	str.w	r2, [lr], #4
 800a646:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a64a:	d2de      	bcs.n	800a60a <quorem+0x42>
 800a64c:	9b00      	ldr	r3, [sp, #0]
 800a64e:	58eb      	ldr	r3, [r5, r3]
 800a650:	b92b      	cbnz	r3, 800a65e <quorem+0x96>
 800a652:	9b01      	ldr	r3, [sp, #4]
 800a654:	3b04      	subs	r3, #4
 800a656:	429d      	cmp	r5, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	d32f      	bcc.n	800a6bc <quorem+0xf4>
 800a65c:	613c      	str	r4, [r7, #16]
 800a65e:	4638      	mov	r0, r7
 800a660:	f001 f9c2 	bl	800b9e8 <__mcmp>
 800a664:	2800      	cmp	r0, #0
 800a666:	db25      	blt.n	800a6b4 <quorem+0xec>
 800a668:	4629      	mov	r1, r5
 800a66a:	2000      	movs	r0, #0
 800a66c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a670:	f8d1 c000 	ldr.w	ip, [r1]
 800a674:	fa1f fe82 	uxth.w	lr, r2
 800a678:	fa1f f38c 	uxth.w	r3, ip
 800a67c:	eba3 030e 	sub.w	r3, r3, lr
 800a680:	4403      	add	r3, r0
 800a682:	0c12      	lsrs	r2, r2, #16
 800a684:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a688:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a692:	45c1      	cmp	r9, r8
 800a694:	f841 3b04 	str.w	r3, [r1], #4
 800a698:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a69c:	d2e6      	bcs.n	800a66c <quorem+0xa4>
 800a69e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6a6:	b922      	cbnz	r2, 800a6b2 <quorem+0xea>
 800a6a8:	3b04      	subs	r3, #4
 800a6aa:	429d      	cmp	r5, r3
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	d30b      	bcc.n	800a6c8 <quorem+0x100>
 800a6b0:	613c      	str	r4, [r7, #16]
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	b003      	add	sp, #12
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	3b04      	subs	r3, #4
 800a6c0:	2a00      	cmp	r2, #0
 800a6c2:	d1cb      	bne.n	800a65c <quorem+0x94>
 800a6c4:	3c01      	subs	r4, #1
 800a6c6:	e7c6      	b.n	800a656 <quorem+0x8e>
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	d1ef      	bne.n	800a6b0 <quorem+0xe8>
 800a6d0:	3c01      	subs	r4, #1
 800a6d2:	e7ea      	b.n	800a6aa <quorem+0xe2>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7ee      	b.n	800a6b6 <quorem+0xee>

0800a6d8 <_dtoa_r>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	69c7      	ldr	r7, [r0, #28]
 800a6de:	b099      	sub	sp, #100	@ 0x64
 800a6e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6e4:	ec55 4b10 	vmov	r4, r5, d0
 800a6e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a6ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6ec:	4683      	mov	fp, r0
 800a6ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6f2:	b97f      	cbnz	r7, 800a714 <_dtoa_r+0x3c>
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	f000 fdfd 	bl	800b2f4 <malloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a700:	b920      	cbnz	r0, 800a70c <_dtoa_r+0x34>
 800a702:	4ba7      	ldr	r3, [pc, #668]	@ (800a9a0 <_dtoa_r+0x2c8>)
 800a704:	21ef      	movs	r1, #239	@ 0xef
 800a706:	48a7      	ldr	r0, [pc, #668]	@ (800a9a4 <_dtoa_r+0x2cc>)
 800a708:	f002 fc2a 	bl	800cf60 <__assert_func>
 800a70c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a710:	6007      	str	r7, [r0, #0]
 800a712:	60c7      	str	r7, [r0, #12]
 800a714:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	b159      	cbz	r1, 800a734 <_dtoa_r+0x5c>
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	604a      	str	r2, [r1, #4]
 800a720:	2301      	movs	r3, #1
 800a722:	4093      	lsls	r3, r2
 800a724:	608b      	str	r3, [r1, #8]
 800a726:	4658      	mov	r0, fp
 800a728:	f000 feda 	bl	800b4e0 <_Bfree>
 800a72c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	1e2b      	subs	r3, r5, #0
 800a736:	bfb9      	ittee	lt
 800a738:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a73c:	9303      	strlt	r3, [sp, #12]
 800a73e:	2300      	movge	r3, #0
 800a740:	6033      	strge	r3, [r6, #0]
 800a742:	9f03      	ldr	r7, [sp, #12]
 800a744:	4b98      	ldr	r3, [pc, #608]	@ (800a9a8 <_dtoa_r+0x2d0>)
 800a746:	bfbc      	itt	lt
 800a748:	2201      	movlt	r2, #1
 800a74a:	6032      	strlt	r2, [r6, #0]
 800a74c:	43bb      	bics	r3, r7
 800a74e:	d112      	bne.n	800a776 <_dtoa_r+0x9e>
 800a750:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a752:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a75c:	4323      	orrs	r3, r4
 800a75e:	f000 854d 	beq.w	800b1fc <_dtoa_r+0xb24>
 800a762:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a764:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a9bc <_dtoa_r+0x2e4>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 854f 	beq.w	800b20c <_dtoa_r+0xb34>
 800a76e:	f10a 0303 	add.w	r3, sl, #3
 800a772:	f000 bd49 	b.w	800b208 <_dtoa_r+0xb30>
 800a776:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a77a:	2200      	movs	r2, #0
 800a77c:	ec51 0b17 	vmov	r0, r1, d7
 800a780:	2300      	movs	r3, #0
 800a782:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a786:	f7f6 f9a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a78a:	4680      	mov	r8, r0
 800a78c:	b158      	cbz	r0, 800a7a6 <_dtoa_r+0xce>
 800a78e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a790:	2301      	movs	r3, #1
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a796:	b113      	cbz	r3, 800a79e <_dtoa_r+0xc6>
 800a798:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a79a:	4b84      	ldr	r3, [pc, #528]	@ (800a9ac <_dtoa_r+0x2d4>)
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a9c0 <_dtoa_r+0x2e8>
 800a7a2:	f000 bd33 	b.w	800b20c <_dtoa_r+0xb34>
 800a7a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7aa:	aa16      	add	r2, sp, #88	@ 0x58
 800a7ac:	a917      	add	r1, sp, #92	@ 0x5c
 800a7ae:	4658      	mov	r0, fp
 800a7b0:	f001 fa3a 	bl	800bc28 <__d2b>
 800a7b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a7b8:	4681      	mov	r9, r0
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	d077      	beq.n	800a8ae <_dtoa_r+0x1d6>
 800a7be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a7c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a7d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a7d8:	4619      	mov	r1, r3
 800a7da:	2200      	movs	r2, #0
 800a7dc:	4b74      	ldr	r3, [pc, #464]	@ (800a9b0 <_dtoa_r+0x2d8>)
 800a7de:	f7f5 fd5b 	bl	8000298 <__aeabi_dsub>
 800a7e2:	a369      	add	r3, pc, #420	@ (adr r3, 800a988 <_dtoa_r+0x2b0>)
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	f7f5 ff0e 	bl	8000608 <__aeabi_dmul>
 800a7ec:	a368      	add	r3, pc, #416	@ (adr r3, 800a990 <_dtoa_r+0x2b8>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fd53 	bl	800029c <__adddf3>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	460d      	mov	r5, r1
 800a7fc:	f7f5 fe9a 	bl	8000534 <__aeabi_i2d>
 800a800:	a365      	add	r3, pc, #404	@ (adr r3, 800a998 <_dtoa_r+0x2c0>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 feff 	bl	8000608 <__aeabi_dmul>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4620      	mov	r0, r4
 800a810:	4629      	mov	r1, r5
 800a812:	f7f5 fd43 	bl	800029c <__adddf3>
 800a816:	4604      	mov	r4, r0
 800a818:	460d      	mov	r5, r1
 800a81a:	f7f6 f9a5 	bl	8000b68 <__aeabi_d2iz>
 800a81e:	2200      	movs	r2, #0
 800a820:	4607      	mov	r7, r0
 800a822:	2300      	movs	r3, #0
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f7f6 f960 	bl	8000aec <__aeabi_dcmplt>
 800a82c:	b140      	cbz	r0, 800a840 <_dtoa_r+0x168>
 800a82e:	4638      	mov	r0, r7
 800a830:	f7f5 fe80 	bl	8000534 <__aeabi_i2d>
 800a834:	4622      	mov	r2, r4
 800a836:	462b      	mov	r3, r5
 800a838:	f7f6 f94e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a83c:	b900      	cbnz	r0, 800a840 <_dtoa_r+0x168>
 800a83e:	3f01      	subs	r7, #1
 800a840:	2f16      	cmp	r7, #22
 800a842:	d851      	bhi.n	800a8e8 <_dtoa_r+0x210>
 800a844:	4b5b      	ldr	r3, [pc, #364]	@ (800a9b4 <_dtoa_r+0x2dc>)
 800a846:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a852:	f7f6 f94b 	bl	8000aec <__aeabi_dcmplt>
 800a856:	2800      	cmp	r0, #0
 800a858:	d048      	beq.n	800a8ec <_dtoa_r+0x214>
 800a85a:	3f01      	subs	r7, #1
 800a85c:	2300      	movs	r3, #0
 800a85e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a860:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a862:	1b9b      	subs	r3, r3, r6
 800a864:	1e5a      	subs	r2, r3, #1
 800a866:	bf44      	itt	mi
 800a868:	f1c3 0801 	rsbmi	r8, r3, #1
 800a86c:	2300      	movmi	r3, #0
 800a86e:	9208      	str	r2, [sp, #32]
 800a870:	bf54      	ite	pl
 800a872:	f04f 0800 	movpl.w	r8, #0
 800a876:	9308      	strmi	r3, [sp, #32]
 800a878:	2f00      	cmp	r7, #0
 800a87a:	db39      	blt.n	800a8f0 <_dtoa_r+0x218>
 800a87c:	9b08      	ldr	r3, [sp, #32]
 800a87e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a880:	443b      	add	r3, r7
 800a882:	9308      	str	r3, [sp, #32]
 800a884:	2300      	movs	r3, #0
 800a886:	930a      	str	r3, [sp, #40]	@ 0x28
 800a888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88a:	2b09      	cmp	r3, #9
 800a88c:	d864      	bhi.n	800a958 <_dtoa_r+0x280>
 800a88e:	2b05      	cmp	r3, #5
 800a890:	bfc4      	itt	gt
 800a892:	3b04      	subgt	r3, #4
 800a894:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a898:	f1a3 0302 	sub.w	r3, r3, #2
 800a89c:	bfcc      	ite	gt
 800a89e:	2400      	movgt	r4, #0
 800a8a0:	2401      	movle	r4, #1
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d863      	bhi.n	800a96e <_dtoa_r+0x296>
 800a8a6:	e8df f003 	tbb	[pc, r3]
 800a8aa:	372a      	.short	0x372a
 800a8ac:	5535      	.short	0x5535
 800a8ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a8b2:	441e      	add	r6, r3
 800a8b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	bfc1      	itttt	gt
 800a8bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8c0:	409f      	lslgt	r7, r3
 800a8c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a8ca:	bfd6      	itet	le
 800a8cc:	f1c3 0320 	rsble	r3, r3, #32
 800a8d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a8d4:	fa04 f003 	lslle.w	r0, r4, r3
 800a8d8:	f7f5 fe1c 	bl	8000514 <__aeabi_ui2d>
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8e2:	3e01      	subs	r6, #1
 800a8e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a8e6:	e777      	b.n	800a7d8 <_dtoa_r+0x100>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e7b8      	b.n	800a85e <_dtoa_r+0x186>
 800a8ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800a8ee:	e7b7      	b.n	800a860 <_dtoa_r+0x188>
 800a8f0:	427b      	negs	r3, r7
 800a8f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	eba8 0807 	sub.w	r8, r8, r7
 800a8fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8fc:	e7c4      	b.n	800a888 <_dtoa_r+0x1b0>
 800a8fe:	2300      	movs	r3, #0
 800a900:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	dc35      	bgt.n	800a974 <_dtoa_r+0x29c>
 800a908:	2301      	movs	r3, #1
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	9307      	str	r3, [sp, #28]
 800a90e:	461a      	mov	r2, r3
 800a910:	920e      	str	r2, [sp, #56]	@ 0x38
 800a912:	e00b      	b.n	800a92c <_dtoa_r+0x254>
 800a914:	2301      	movs	r3, #1
 800a916:	e7f3      	b.n	800a900 <_dtoa_r+0x228>
 800a918:	2300      	movs	r3, #0
 800a91a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a91c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a91e:	18fb      	adds	r3, r7, r3
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	2b01      	cmp	r3, #1
 800a926:	9307      	str	r3, [sp, #28]
 800a928:	bfb8      	it	lt
 800a92a:	2301      	movlt	r3, #1
 800a92c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a930:	2100      	movs	r1, #0
 800a932:	2204      	movs	r2, #4
 800a934:	f102 0514 	add.w	r5, r2, #20
 800a938:	429d      	cmp	r5, r3
 800a93a:	d91f      	bls.n	800a97c <_dtoa_r+0x2a4>
 800a93c:	6041      	str	r1, [r0, #4]
 800a93e:	4658      	mov	r0, fp
 800a940:	f000 fd8e 	bl	800b460 <_Balloc>
 800a944:	4682      	mov	sl, r0
 800a946:	2800      	cmp	r0, #0
 800a948:	d13c      	bne.n	800a9c4 <_dtoa_r+0x2ec>
 800a94a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9b8 <_dtoa_r+0x2e0>)
 800a94c:	4602      	mov	r2, r0
 800a94e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a952:	e6d8      	b.n	800a706 <_dtoa_r+0x2e>
 800a954:	2301      	movs	r3, #1
 800a956:	e7e0      	b.n	800a91a <_dtoa_r+0x242>
 800a958:	2401      	movs	r4, #1
 800a95a:	2300      	movs	r3, #0
 800a95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a95e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a960:	f04f 33ff 	mov.w	r3, #4294967295
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	9307      	str	r3, [sp, #28]
 800a968:	2200      	movs	r2, #0
 800a96a:	2312      	movs	r3, #18
 800a96c:	e7d0      	b.n	800a910 <_dtoa_r+0x238>
 800a96e:	2301      	movs	r3, #1
 800a970:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a972:	e7f5      	b.n	800a960 <_dtoa_r+0x288>
 800a974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	9307      	str	r3, [sp, #28]
 800a97a:	e7d7      	b.n	800a92c <_dtoa_r+0x254>
 800a97c:	3101      	adds	r1, #1
 800a97e:	0052      	lsls	r2, r2, #1
 800a980:	e7d8      	b.n	800a934 <_dtoa_r+0x25c>
 800a982:	bf00      	nop
 800a984:	f3af 8000 	nop.w
 800a988:	636f4361 	.word	0x636f4361
 800a98c:	3fd287a7 	.word	0x3fd287a7
 800a990:	8b60c8b3 	.word	0x8b60c8b3
 800a994:	3fc68a28 	.word	0x3fc68a28
 800a998:	509f79fb 	.word	0x509f79fb
 800a99c:	3fd34413 	.word	0x3fd34413
 800a9a0:	0800f2b6 	.word	0x0800f2b6
 800a9a4:	0800f2cd 	.word	0x0800f2cd
 800a9a8:	7ff00000 	.word	0x7ff00000
 800a9ac:	0800f281 	.word	0x0800f281
 800a9b0:	3ff80000 	.word	0x3ff80000
 800a9b4:	0800f3c8 	.word	0x0800f3c8
 800a9b8:	0800f325 	.word	0x0800f325
 800a9bc:	0800f2b2 	.word	0x0800f2b2
 800a9c0:	0800f280 	.word	0x0800f280
 800a9c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9c8:	6018      	str	r0, [r3, #0]
 800a9ca:	9b07      	ldr	r3, [sp, #28]
 800a9cc:	2b0e      	cmp	r3, #14
 800a9ce:	f200 80a4 	bhi.w	800ab1a <_dtoa_r+0x442>
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	f000 80a1 	beq.w	800ab1a <_dtoa_r+0x442>
 800a9d8:	2f00      	cmp	r7, #0
 800a9da:	dd33      	ble.n	800aa44 <_dtoa_r+0x36c>
 800a9dc:	4bad      	ldr	r3, [pc, #692]	@ (800ac94 <_dtoa_r+0x5bc>)
 800a9de:	f007 020f 	and.w	r2, r7, #15
 800a9e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9e6:	ed93 7b00 	vldr	d7, [r3]
 800a9ea:	05f8      	lsls	r0, r7, #23
 800a9ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9f4:	d516      	bpl.n	800aa24 <_dtoa_r+0x34c>
 800a9f6:	4ba8      	ldr	r3, [pc, #672]	@ (800ac98 <_dtoa_r+0x5c0>)
 800a9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa00:	f7f5 ff2c 	bl	800085c <__aeabi_ddiv>
 800aa04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa08:	f004 040f 	and.w	r4, r4, #15
 800aa0c:	2603      	movs	r6, #3
 800aa0e:	4da2      	ldr	r5, [pc, #648]	@ (800ac98 <_dtoa_r+0x5c0>)
 800aa10:	b954      	cbnz	r4, 800aa28 <_dtoa_r+0x350>
 800aa12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa1a:	f7f5 ff1f 	bl	800085c <__aeabi_ddiv>
 800aa1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa22:	e028      	b.n	800aa76 <_dtoa_r+0x39e>
 800aa24:	2602      	movs	r6, #2
 800aa26:	e7f2      	b.n	800aa0e <_dtoa_r+0x336>
 800aa28:	07e1      	lsls	r1, r4, #31
 800aa2a:	d508      	bpl.n	800aa3e <_dtoa_r+0x366>
 800aa2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa34:	f7f5 fde8 	bl	8000608 <__aeabi_dmul>
 800aa38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa3c:	3601      	adds	r6, #1
 800aa3e:	1064      	asrs	r4, r4, #1
 800aa40:	3508      	adds	r5, #8
 800aa42:	e7e5      	b.n	800aa10 <_dtoa_r+0x338>
 800aa44:	f000 80d2 	beq.w	800abec <_dtoa_r+0x514>
 800aa48:	427c      	negs	r4, r7
 800aa4a:	4b92      	ldr	r3, [pc, #584]	@ (800ac94 <_dtoa_r+0x5bc>)
 800aa4c:	4d92      	ldr	r5, [pc, #584]	@ (800ac98 <_dtoa_r+0x5c0>)
 800aa4e:	f004 020f 	and.w	r2, r4, #15
 800aa52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa5e:	f7f5 fdd3 	bl	8000608 <__aeabi_dmul>
 800aa62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa66:	1124      	asrs	r4, r4, #4
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2602      	movs	r6, #2
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	f040 80b2 	bne.w	800abd6 <_dtoa_r+0x4fe>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1d3      	bne.n	800aa1e <_dtoa_r+0x346>
 800aa76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80b7 	beq.w	800abf0 <_dtoa_r+0x518>
 800aa82:	4b86      	ldr	r3, [pc, #536]	@ (800ac9c <_dtoa_r+0x5c4>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7f6 f82f 	bl	8000aec <__aeabi_dcmplt>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f000 80ae 	beq.w	800abf0 <_dtoa_r+0x518>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 80aa 	beq.w	800abf0 <_dtoa_r+0x518>
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dd37      	ble.n	800ab12 <_dtoa_r+0x43a>
 800aaa2:	1e7b      	subs	r3, r7, #1
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4b7d      	ldr	r3, [pc, #500]	@ (800aca0 <_dtoa_r+0x5c8>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4629      	mov	r1, r5
 800aaae:	f7f5 fdab 	bl	8000608 <__aeabi_dmul>
 800aab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab6:	9c00      	ldr	r4, [sp, #0]
 800aab8:	3601      	adds	r6, #1
 800aaba:	4630      	mov	r0, r6
 800aabc:	f7f5 fd3a 	bl	8000534 <__aeabi_i2d>
 800aac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aac4:	f7f5 fda0 	bl	8000608 <__aeabi_dmul>
 800aac8:	4b76      	ldr	r3, [pc, #472]	@ (800aca4 <_dtoa_r+0x5cc>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	f7f5 fbe6 	bl	800029c <__adddf3>
 800aad0:	4605      	mov	r5, r0
 800aad2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	f040 808d 	bne.w	800abf6 <_dtoa_r+0x51e>
 800aadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae0:	4b71      	ldr	r3, [pc, #452]	@ (800aca8 <_dtoa_r+0x5d0>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	f7f5 fbd8 	bl	8000298 <__aeabi_dsub>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4633      	mov	r3, r6
 800aaf4:	f7f6 f818 	bl	8000b28 <__aeabi_dcmpgt>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	f040 828b 	bne.w	800b014 <_dtoa_r+0x93c>
 800aafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab02:	462a      	mov	r2, r5
 800ab04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab08:	f7f5 fff0 	bl	8000aec <__aeabi_dcmplt>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f040 8128 	bne.w	800ad62 <_dtoa_r+0x68a>
 800ab12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f2c0 815a 	blt.w	800add6 <_dtoa_r+0x6fe>
 800ab22:	2f0e      	cmp	r7, #14
 800ab24:	f300 8157 	bgt.w	800add6 <_dtoa_r+0x6fe>
 800ab28:	4b5a      	ldr	r3, [pc, #360]	@ (800ac94 <_dtoa_r+0x5bc>)
 800ab2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab2e:	ed93 7b00 	vldr	d7, [r3]
 800ab32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	ed8d 7b00 	vstr	d7, [sp]
 800ab3a:	da03      	bge.n	800ab44 <_dtoa_r+0x46c>
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f340 8101 	ble.w	800ad46 <_dtoa_r+0x66e>
 800ab44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab48:	4656      	mov	r6, sl
 800ab4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	4629      	mov	r1, r5
 800ab52:	f7f5 fe83 	bl	800085c <__aeabi_ddiv>
 800ab56:	f7f6 f807 	bl	8000b68 <__aeabi_d2iz>
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	f7f5 fcea 	bl	8000534 <__aeabi_i2d>
 800ab60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab64:	f7f5 fd50 	bl	8000608 <__aeabi_dmul>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab74:	f7f5 fb90 	bl	8000298 <__aeabi_dsub>
 800ab78:	f806 4b01 	strb.w	r4, [r6], #1
 800ab7c:	9d07      	ldr	r5, [sp, #28]
 800ab7e:	eba6 040a 	sub.w	r4, r6, sl
 800ab82:	42a5      	cmp	r5, r4
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	f040 8117 	bne.w	800adba <_dtoa_r+0x6e2>
 800ab8c:	f7f5 fb86 	bl	800029c <__adddf3>
 800ab90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab94:	4604      	mov	r4, r0
 800ab96:	460d      	mov	r5, r1
 800ab98:	f7f5 ffc6 	bl	8000b28 <__aeabi_dcmpgt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f040 80f9 	bne.w	800ad94 <_dtoa_r+0x6bc>
 800aba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aba6:	4620      	mov	r0, r4
 800aba8:	4629      	mov	r1, r5
 800abaa:	f7f5 ff95 	bl	8000ad8 <__aeabi_dcmpeq>
 800abae:	b118      	cbz	r0, 800abb8 <_dtoa_r+0x4e0>
 800abb0:	f018 0f01 	tst.w	r8, #1
 800abb4:	f040 80ee 	bne.w	800ad94 <_dtoa_r+0x6bc>
 800abb8:	4649      	mov	r1, r9
 800abba:	4658      	mov	r0, fp
 800abbc:	f000 fc90 	bl	800b4e0 <_Bfree>
 800abc0:	2300      	movs	r3, #0
 800abc2:	7033      	strb	r3, [r6, #0]
 800abc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abc6:	3701      	adds	r7, #1
 800abc8:	601f      	str	r7, [r3, #0]
 800abca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 831d 	beq.w	800b20c <_dtoa_r+0xb34>
 800abd2:	601e      	str	r6, [r3, #0]
 800abd4:	e31a      	b.n	800b20c <_dtoa_r+0xb34>
 800abd6:	07e2      	lsls	r2, r4, #31
 800abd8:	d505      	bpl.n	800abe6 <_dtoa_r+0x50e>
 800abda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abde:	f7f5 fd13 	bl	8000608 <__aeabi_dmul>
 800abe2:	3601      	adds	r6, #1
 800abe4:	2301      	movs	r3, #1
 800abe6:	1064      	asrs	r4, r4, #1
 800abe8:	3508      	adds	r5, #8
 800abea:	e73f      	b.n	800aa6c <_dtoa_r+0x394>
 800abec:	2602      	movs	r6, #2
 800abee:	e742      	b.n	800aa76 <_dtoa_r+0x39e>
 800abf0:	9c07      	ldr	r4, [sp, #28]
 800abf2:	9704      	str	r7, [sp, #16]
 800abf4:	e761      	b.n	800aaba <_dtoa_r+0x3e2>
 800abf6:	4b27      	ldr	r3, [pc, #156]	@ (800ac94 <_dtoa_r+0x5bc>)
 800abf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac02:	4454      	add	r4, sl
 800ac04:	2900      	cmp	r1, #0
 800ac06:	d053      	beq.n	800acb0 <_dtoa_r+0x5d8>
 800ac08:	4928      	ldr	r1, [pc, #160]	@ (800acac <_dtoa_r+0x5d4>)
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f7f5 fe26 	bl	800085c <__aeabi_ddiv>
 800ac10:	4633      	mov	r3, r6
 800ac12:	462a      	mov	r2, r5
 800ac14:	f7f5 fb40 	bl	8000298 <__aeabi_dsub>
 800ac18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac1c:	4656      	mov	r6, sl
 800ac1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac22:	f7f5 ffa1 	bl	8000b68 <__aeabi_d2iz>
 800ac26:	4605      	mov	r5, r0
 800ac28:	f7f5 fc84 	bl	8000534 <__aeabi_i2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac34:	f7f5 fb30 	bl	8000298 <__aeabi_dsub>
 800ac38:	3530      	adds	r5, #48	@ 0x30
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac42:	f806 5b01 	strb.w	r5, [r6], #1
 800ac46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac4a:	f7f5 ff4f 	bl	8000aec <__aeabi_dcmplt>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d171      	bne.n	800ad36 <_dtoa_r+0x65e>
 800ac52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac56:	4911      	ldr	r1, [pc, #68]	@ (800ac9c <_dtoa_r+0x5c4>)
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f7f5 fb1d 	bl	8000298 <__aeabi_dsub>
 800ac5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac62:	f7f5 ff43 	bl	8000aec <__aeabi_dcmplt>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f040 8095 	bne.w	800ad96 <_dtoa_r+0x6be>
 800ac6c:	42a6      	cmp	r6, r4
 800ac6e:	f43f af50 	beq.w	800ab12 <_dtoa_r+0x43a>
 800ac72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac76:	4b0a      	ldr	r3, [pc, #40]	@ (800aca0 <_dtoa_r+0x5c8>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f7f5 fcc5 	bl	8000608 <__aeabi_dmul>
 800ac7e:	4b08      	ldr	r3, [pc, #32]	@ (800aca0 <_dtoa_r+0x5c8>)
 800ac80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac84:	2200      	movs	r2, #0
 800ac86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8a:	f7f5 fcbd 	bl	8000608 <__aeabi_dmul>
 800ac8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac92:	e7c4      	b.n	800ac1e <_dtoa_r+0x546>
 800ac94:	0800f3c8 	.word	0x0800f3c8
 800ac98:	0800f3a0 	.word	0x0800f3a0
 800ac9c:	3ff00000 	.word	0x3ff00000
 800aca0:	40240000 	.word	0x40240000
 800aca4:	401c0000 	.word	0x401c0000
 800aca8:	40140000 	.word	0x40140000
 800acac:	3fe00000 	.word	0x3fe00000
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	f7f5 fca8 	bl	8000608 <__aeabi_dmul>
 800acb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acbc:	9415      	str	r4, [sp, #84]	@ 0x54
 800acbe:	4656      	mov	r6, sl
 800acc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc4:	f7f5 ff50 	bl	8000b68 <__aeabi_d2iz>
 800acc8:	4605      	mov	r5, r0
 800acca:	f7f5 fc33 	bl	8000534 <__aeabi_i2d>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acd6:	f7f5 fadf 	bl	8000298 <__aeabi_dsub>
 800acda:	3530      	adds	r5, #48	@ 0x30
 800acdc:	f806 5b01 	strb.w	r5, [r6], #1
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	42a6      	cmp	r6, r4
 800ace6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acea:	f04f 0200 	mov.w	r2, #0
 800acee:	d124      	bne.n	800ad3a <_dtoa_r+0x662>
 800acf0:	4bac      	ldr	r3, [pc, #688]	@ (800afa4 <_dtoa_r+0x8cc>)
 800acf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acf6:	f7f5 fad1 	bl	800029c <__adddf3>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad02:	f7f5 ff11 	bl	8000b28 <__aeabi_dcmpgt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d145      	bne.n	800ad96 <_dtoa_r+0x6be>
 800ad0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad0e:	49a5      	ldr	r1, [pc, #660]	@ (800afa4 <_dtoa_r+0x8cc>)
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7f5 fac1 	bl	8000298 <__aeabi_dsub>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1e:	f7f5 fee5 	bl	8000aec <__aeabi_dcmplt>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	f43f aef5 	beq.w	800ab12 <_dtoa_r+0x43a>
 800ad28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad2a:	1e73      	subs	r3, r6, #1
 800ad2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad32:	2b30      	cmp	r3, #48	@ 0x30
 800ad34:	d0f8      	beq.n	800ad28 <_dtoa_r+0x650>
 800ad36:	9f04      	ldr	r7, [sp, #16]
 800ad38:	e73e      	b.n	800abb8 <_dtoa_r+0x4e0>
 800ad3a:	4b9b      	ldr	r3, [pc, #620]	@ (800afa8 <_dtoa_r+0x8d0>)
 800ad3c:	f7f5 fc64 	bl	8000608 <__aeabi_dmul>
 800ad40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad44:	e7bc      	b.n	800acc0 <_dtoa_r+0x5e8>
 800ad46:	d10c      	bne.n	800ad62 <_dtoa_r+0x68a>
 800ad48:	4b98      	ldr	r3, [pc, #608]	@ (800afac <_dtoa_r+0x8d4>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad50:	f7f5 fc5a 	bl	8000608 <__aeabi_dmul>
 800ad54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad58:	f7f5 fedc 	bl	8000b14 <__aeabi_dcmpge>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f000 8157 	beq.w	800b010 <_dtoa_r+0x938>
 800ad62:	2400      	movs	r4, #0
 800ad64:	4625      	mov	r5, r4
 800ad66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad68:	43db      	mvns	r3, r3
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	4656      	mov	r6, sl
 800ad6e:	2700      	movs	r7, #0
 800ad70:	4621      	mov	r1, r4
 800ad72:	4658      	mov	r0, fp
 800ad74:	f000 fbb4 	bl	800b4e0 <_Bfree>
 800ad78:	2d00      	cmp	r5, #0
 800ad7a:	d0dc      	beq.n	800ad36 <_dtoa_r+0x65e>
 800ad7c:	b12f      	cbz	r7, 800ad8a <_dtoa_r+0x6b2>
 800ad7e:	42af      	cmp	r7, r5
 800ad80:	d003      	beq.n	800ad8a <_dtoa_r+0x6b2>
 800ad82:	4639      	mov	r1, r7
 800ad84:	4658      	mov	r0, fp
 800ad86:	f000 fbab 	bl	800b4e0 <_Bfree>
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	f000 fba7 	bl	800b4e0 <_Bfree>
 800ad92:	e7d0      	b.n	800ad36 <_dtoa_r+0x65e>
 800ad94:	9704      	str	r7, [sp, #16]
 800ad96:	4633      	mov	r3, r6
 800ad98:	461e      	mov	r6, r3
 800ad9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad9e:	2a39      	cmp	r2, #57	@ 0x39
 800ada0:	d107      	bne.n	800adb2 <_dtoa_r+0x6da>
 800ada2:	459a      	cmp	sl, r3
 800ada4:	d1f8      	bne.n	800ad98 <_dtoa_r+0x6c0>
 800ada6:	9a04      	ldr	r2, [sp, #16]
 800ada8:	3201      	adds	r2, #1
 800adaa:	9204      	str	r2, [sp, #16]
 800adac:	2230      	movs	r2, #48	@ 0x30
 800adae:	f88a 2000 	strb.w	r2, [sl]
 800adb2:	781a      	ldrb	r2, [r3, #0]
 800adb4:	3201      	adds	r2, #1
 800adb6:	701a      	strb	r2, [r3, #0]
 800adb8:	e7bd      	b.n	800ad36 <_dtoa_r+0x65e>
 800adba:	4b7b      	ldr	r3, [pc, #492]	@ (800afa8 <_dtoa_r+0x8d0>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	f7f5 fc23 	bl	8000608 <__aeabi_dmul>
 800adc2:	2200      	movs	r2, #0
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
 800adca:	f7f5 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 800adce:	2800      	cmp	r0, #0
 800add0:	f43f aebb 	beq.w	800ab4a <_dtoa_r+0x472>
 800add4:	e6f0      	b.n	800abb8 <_dtoa_r+0x4e0>
 800add6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800add8:	2a00      	cmp	r2, #0
 800adda:	f000 80db 	beq.w	800af94 <_dtoa_r+0x8bc>
 800adde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade0:	2a01      	cmp	r2, #1
 800ade2:	f300 80bf 	bgt.w	800af64 <_dtoa_r+0x88c>
 800ade6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ade8:	2a00      	cmp	r2, #0
 800adea:	f000 80b7 	beq.w	800af5c <_dtoa_r+0x884>
 800adee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800adf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800adf4:	4646      	mov	r6, r8
 800adf6:	9a08      	ldr	r2, [sp, #32]
 800adf8:	2101      	movs	r1, #1
 800adfa:	441a      	add	r2, r3
 800adfc:	4658      	mov	r0, fp
 800adfe:	4498      	add	r8, r3
 800ae00:	9208      	str	r2, [sp, #32]
 800ae02:	f000 fc6b 	bl	800b6dc <__i2b>
 800ae06:	4605      	mov	r5, r0
 800ae08:	b15e      	cbz	r6, 800ae22 <_dtoa_r+0x74a>
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd08      	ble.n	800ae22 <_dtoa_r+0x74a>
 800ae10:	42b3      	cmp	r3, r6
 800ae12:	9a08      	ldr	r2, [sp, #32]
 800ae14:	bfa8      	it	ge
 800ae16:	4633      	movge	r3, r6
 800ae18:	eba8 0803 	sub.w	r8, r8, r3
 800ae1c:	1af6      	subs	r6, r6, r3
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	9308      	str	r3, [sp, #32]
 800ae22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae24:	b1f3      	cbz	r3, 800ae64 <_dtoa_r+0x78c>
 800ae26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 80b7 	beq.w	800af9c <_dtoa_r+0x8c4>
 800ae2e:	b18c      	cbz	r4, 800ae54 <_dtoa_r+0x77c>
 800ae30:	4629      	mov	r1, r5
 800ae32:	4622      	mov	r2, r4
 800ae34:	4658      	mov	r0, fp
 800ae36:	f000 fd11 	bl	800b85c <__pow5mult>
 800ae3a:	464a      	mov	r2, r9
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4605      	mov	r5, r0
 800ae40:	4658      	mov	r0, fp
 800ae42:	f000 fc61 	bl	800b708 <__multiply>
 800ae46:	4649      	mov	r1, r9
 800ae48:	9004      	str	r0, [sp, #16]
 800ae4a:	4658      	mov	r0, fp
 800ae4c:	f000 fb48 	bl	800b4e0 <_Bfree>
 800ae50:	9b04      	ldr	r3, [sp, #16]
 800ae52:	4699      	mov	r9, r3
 800ae54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae56:	1b1a      	subs	r2, r3, r4
 800ae58:	d004      	beq.n	800ae64 <_dtoa_r+0x78c>
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	4658      	mov	r0, fp
 800ae5e:	f000 fcfd 	bl	800b85c <__pow5mult>
 800ae62:	4681      	mov	r9, r0
 800ae64:	2101      	movs	r1, #1
 800ae66:	4658      	mov	r0, fp
 800ae68:	f000 fc38 	bl	800b6dc <__i2b>
 800ae6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae6e:	4604      	mov	r4, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 81cf 	beq.w	800b214 <_dtoa_r+0xb3c>
 800ae76:	461a      	mov	r2, r3
 800ae78:	4601      	mov	r1, r0
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f000 fcee 	bl	800b85c <__pow5mult>
 800ae80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	4604      	mov	r4, r0
 800ae86:	f300 8095 	bgt.w	800afb4 <_dtoa_r+0x8dc>
 800ae8a:	9b02      	ldr	r3, [sp, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f040 8087 	bne.w	800afa0 <_dtoa_r+0x8c8>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f040 8089 	bne.w	800afb0 <_dtoa_r+0x8d8>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aea4:	0d1b      	lsrs	r3, r3, #20
 800aea6:	051b      	lsls	r3, r3, #20
 800aea8:	b12b      	cbz	r3, 800aeb6 <_dtoa_r+0x7de>
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	3301      	adds	r3, #1
 800aeae:	9308      	str	r3, [sp, #32]
 800aeb0:	f108 0801 	add.w	r8, r8, #1
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 81b0 	beq.w	800b220 <_dtoa_r+0xb48>
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aec6:	6918      	ldr	r0, [r3, #16]
 800aec8:	f000 fbbc 	bl	800b644 <__hi0bits>
 800aecc:	f1c0 0020 	rsb	r0, r0, #32
 800aed0:	9b08      	ldr	r3, [sp, #32]
 800aed2:	4418      	add	r0, r3
 800aed4:	f010 001f 	ands.w	r0, r0, #31
 800aed8:	d077      	beq.n	800afca <_dtoa_r+0x8f2>
 800aeda:	f1c0 0320 	rsb	r3, r0, #32
 800aede:	2b04      	cmp	r3, #4
 800aee0:	dd6b      	ble.n	800afba <_dtoa_r+0x8e2>
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	f1c0 001c 	rsb	r0, r0, #28
 800aee8:	4403      	add	r3, r0
 800aeea:	4480      	add	r8, r0
 800aeec:	4406      	add	r6, r0
 800aeee:	9308      	str	r3, [sp, #32]
 800aef0:	f1b8 0f00 	cmp.w	r8, #0
 800aef4:	dd05      	ble.n	800af02 <_dtoa_r+0x82a>
 800aef6:	4649      	mov	r1, r9
 800aef8:	4642      	mov	r2, r8
 800aefa:	4658      	mov	r0, fp
 800aefc:	f000 fd08 	bl	800b910 <__lshift>
 800af00:	4681      	mov	r9, r0
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dd05      	ble.n	800af14 <_dtoa_r+0x83c>
 800af08:	4621      	mov	r1, r4
 800af0a:	461a      	mov	r2, r3
 800af0c:	4658      	mov	r0, fp
 800af0e:	f000 fcff 	bl	800b910 <__lshift>
 800af12:	4604      	mov	r4, r0
 800af14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af16:	2b00      	cmp	r3, #0
 800af18:	d059      	beq.n	800afce <_dtoa_r+0x8f6>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4648      	mov	r0, r9
 800af1e:	f000 fd63 	bl	800b9e8 <__mcmp>
 800af22:	2800      	cmp	r0, #0
 800af24:	da53      	bge.n	800afce <_dtoa_r+0x8f6>
 800af26:	1e7b      	subs	r3, r7, #1
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	4649      	mov	r1, r9
 800af2c:	2300      	movs	r3, #0
 800af2e:	220a      	movs	r2, #10
 800af30:	4658      	mov	r0, fp
 800af32:	f000 faf7 	bl	800b524 <__multadd>
 800af36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af38:	4681      	mov	r9, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 8172 	beq.w	800b224 <_dtoa_r+0xb4c>
 800af40:	2300      	movs	r3, #0
 800af42:	4629      	mov	r1, r5
 800af44:	220a      	movs	r2, #10
 800af46:	4658      	mov	r0, fp
 800af48:	f000 faec 	bl	800b524 <__multadd>
 800af4c:	9b00      	ldr	r3, [sp, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	4605      	mov	r5, r0
 800af52:	dc67      	bgt.n	800b024 <_dtoa_r+0x94c>
 800af54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af56:	2b02      	cmp	r3, #2
 800af58:	dc41      	bgt.n	800afde <_dtoa_r+0x906>
 800af5a:	e063      	b.n	800b024 <_dtoa_r+0x94c>
 800af5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af62:	e746      	b.n	800adf2 <_dtoa_r+0x71a>
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	1e5c      	subs	r4, r3, #1
 800af68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af6a:	42a3      	cmp	r3, r4
 800af6c:	bfbf      	itttt	lt
 800af6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af74:	1ae3      	sublt	r3, r4, r3
 800af76:	bfb4      	ite	lt
 800af78:	18d2      	addlt	r2, r2, r3
 800af7a:	1b1c      	subge	r4, r3, r4
 800af7c:	9b07      	ldr	r3, [sp, #28]
 800af7e:	bfbc      	itt	lt
 800af80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af82:	2400      	movlt	r4, #0
 800af84:	2b00      	cmp	r3, #0
 800af86:	bfb5      	itete	lt
 800af88:	eba8 0603 	sublt.w	r6, r8, r3
 800af8c:	9b07      	ldrge	r3, [sp, #28]
 800af8e:	2300      	movlt	r3, #0
 800af90:	4646      	movge	r6, r8
 800af92:	e730      	b.n	800adf6 <_dtoa_r+0x71e>
 800af94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af98:	4646      	mov	r6, r8
 800af9a:	e735      	b.n	800ae08 <_dtoa_r+0x730>
 800af9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af9e:	e75c      	b.n	800ae5a <_dtoa_r+0x782>
 800afa0:	2300      	movs	r3, #0
 800afa2:	e788      	b.n	800aeb6 <_dtoa_r+0x7de>
 800afa4:	3fe00000 	.word	0x3fe00000
 800afa8:	40240000 	.word	0x40240000
 800afac:	40140000 	.word	0x40140000
 800afb0:	9b02      	ldr	r3, [sp, #8]
 800afb2:	e780      	b.n	800aeb6 <_dtoa_r+0x7de>
 800afb4:	2300      	movs	r3, #0
 800afb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afb8:	e782      	b.n	800aec0 <_dtoa_r+0x7e8>
 800afba:	d099      	beq.n	800aef0 <_dtoa_r+0x818>
 800afbc:	9a08      	ldr	r2, [sp, #32]
 800afbe:	331c      	adds	r3, #28
 800afc0:	441a      	add	r2, r3
 800afc2:	4498      	add	r8, r3
 800afc4:	441e      	add	r6, r3
 800afc6:	9208      	str	r2, [sp, #32]
 800afc8:	e792      	b.n	800aef0 <_dtoa_r+0x818>
 800afca:	4603      	mov	r3, r0
 800afcc:	e7f6      	b.n	800afbc <_dtoa_r+0x8e4>
 800afce:	9b07      	ldr	r3, [sp, #28]
 800afd0:	9704      	str	r7, [sp, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dc20      	bgt.n	800b018 <_dtoa_r+0x940>
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afda:	2b02      	cmp	r3, #2
 800afdc:	dd1e      	ble.n	800b01c <_dtoa_r+0x944>
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f47f aec0 	bne.w	800ad66 <_dtoa_r+0x68e>
 800afe6:	4621      	mov	r1, r4
 800afe8:	2205      	movs	r2, #5
 800afea:	4658      	mov	r0, fp
 800afec:	f000 fa9a 	bl	800b524 <__multadd>
 800aff0:	4601      	mov	r1, r0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4648      	mov	r0, r9
 800aff6:	f000 fcf7 	bl	800b9e8 <__mcmp>
 800affa:	2800      	cmp	r0, #0
 800affc:	f77f aeb3 	ble.w	800ad66 <_dtoa_r+0x68e>
 800b000:	4656      	mov	r6, sl
 800b002:	2331      	movs	r3, #49	@ 0x31
 800b004:	f806 3b01 	strb.w	r3, [r6], #1
 800b008:	9b04      	ldr	r3, [sp, #16]
 800b00a:	3301      	adds	r3, #1
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	e6ae      	b.n	800ad6e <_dtoa_r+0x696>
 800b010:	9c07      	ldr	r4, [sp, #28]
 800b012:	9704      	str	r7, [sp, #16]
 800b014:	4625      	mov	r5, r4
 800b016:	e7f3      	b.n	800b000 <_dtoa_r+0x928>
 800b018:	9b07      	ldr	r3, [sp, #28]
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 8104 	beq.w	800b22c <_dtoa_r+0xb54>
 800b024:	2e00      	cmp	r6, #0
 800b026:	dd05      	ble.n	800b034 <_dtoa_r+0x95c>
 800b028:	4629      	mov	r1, r5
 800b02a:	4632      	mov	r2, r6
 800b02c:	4658      	mov	r0, fp
 800b02e:	f000 fc6f 	bl	800b910 <__lshift>
 800b032:	4605      	mov	r5, r0
 800b034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	d05a      	beq.n	800b0f0 <_dtoa_r+0xa18>
 800b03a:	6869      	ldr	r1, [r5, #4]
 800b03c:	4658      	mov	r0, fp
 800b03e:	f000 fa0f 	bl	800b460 <_Balloc>
 800b042:	4606      	mov	r6, r0
 800b044:	b928      	cbnz	r0, 800b052 <_dtoa_r+0x97a>
 800b046:	4b84      	ldr	r3, [pc, #528]	@ (800b258 <_dtoa_r+0xb80>)
 800b048:	4602      	mov	r2, r0
 800b04a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b04e:	f7ff bb5a 	b.w	800a706 <_dtoa_r+0x2e>
 800b052:	692a      	ldr	r2, [r5, #16]
 800b054:	3202      	adds	r2, #2
 800b056:	0092      	lsls	r2, r2, #2
 800b058:	f105 010c 	add.w	r1, r5, #12
 800b05c:	300c      	adds	r0, #12
 800b05e:	f7ff fa9e 	bl	800a59e <memcpy>
 800b062:	2201      	movs	r2, #1
 800b064:	4631      	mov	r1, r6
 800b066:	4658      	mov	r0, fp
 800b068:	f000 fc52 	bl	800b910 <__lshift>
 800b06c:	f10a 0301 	add.w	r3, sl, #1
 800b070:	9307      	str	r3, [sp, #28]
 800b072:	9b00      	ldr	r3, [sp, #0]
 800b074:	4453      	add	r3, sl
 800b076:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b078:	9b02      	ldr	r3, [sp, #8]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	462f      	mov	r7, r5
 800b080:	930a      	str	r3, [sp, #40]	@ 0x28
 800b082:	4605      	mov	r5, r0
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	4621      	mov	r1, r4
 800b088:	3b01      	subs	r3, #1
 800b08a:	4648      	mov	r0, r9
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	f7ff fa9b 	bl	800a5c8 <quorem>
 800b092:	4639      	mov	r1, r7
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b09a:	4648      	mov	r0, r9
 800b09c:	f000 fca4 	bl	800b9e8 <__mcmp>
 800b0a0:	462a      	mov	r2, r5
 800b0a2:	9008      	str	r0, [sp, #32]
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	4658      	mov	r0, fp
 800b0a8:	f000 fcba 	bl	800ba20 <__mdiff>
 800b0ac:	68c2      	ldr	r2, [r0, #12]
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	bb02      	cbnz	r2, 800b0f4 <_dtoa_r+0xa1c>
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	4648      	mov	r0, r9
 800b0b6:	f000 fc97 	bl	800b9e8 <__mcmp>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4658      	mov	r0, fp
 800b0c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0c2:	f000 fa0d 	bl	800b4e0 <_Bfree>
 800b0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ca:	9e07      	ldr	r6, [sp, #28]
 800b0cc:	ea43 0102 	orr.w	r1, r3, r2
 800b0d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0d2:	4319      	orrs	r1, r3
 800b0d4:	d110      	bne.n	800b0f8 <_dtoa_r+0xa20>
 800b0d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0da:	d029      	beq.n	800b130 <_dtoa_r+0xa58>
 800b0dc:	9b08      	ldr	r3, [sp, #32]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dd02      	ble.n	800b0e8 <_dtoa_r+0xa10>
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	f883 8000 	strb.w	r8, [r3]
 800b0ee:	e63f      	b.n	800ad70 <_dtoa_r+0x698>
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	e7bb      	b.n	800b06c <_dtoa_r+0x994>
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	e7e1      	b.n	800b0bc <_dtoa_r+0x9e4>
 800b0f8:	9b08      	ldr	r3, [sp, #32]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	db04      	blt.n	800b108 <_dtoa_r+0xa30>
 800b0fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b100:	430b      	orrs	r3, r1
 800b102:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b104:	430b      	orrs	r3, r1
 800b106:	d120      	bne.n	800b14a <_dtoa_r+0xa72>
 800b108:	2a00      	cmp	r2, #0
 800b10a:	dded      	ble.n	800b0e8 <_dtoa_r+0xa10>
 800b10c:	4649      	mov	r1, r9
 800b10e:	2201      	movs	r2, #1
 800b110:	4658      	mov	r0, fp
 800b112:	f000 fbfd 	bl	800b910 <__lshift>
 800b116:	4621      	mov	r1, r4
 800b118:	4681      	mov	r9, r0
 800b11a:	f000 fc65 	bl	800b9e8 <__mcmp>
 800b11e:	2800      	cmp	r0, #0
 800b120:	dc03      	bgt.n	800b12a <_dtoa_r+0xa52>
 800b122:	d1e1      	bne.n	800b0e8 <_dtoa_r+0xa10>
 800b124:	f018 0f01 	tst.w	r8, #1
 800b128:	d0de      	beq.n	800b0e8 <_dtoa_r+0xa10>
 800b12a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b12e:	d1d8      	bne.n	800b0e2 <_dtoa_r+0xa0a>
 800b130:	9a00      	ldr	r2, [sp, #0]
 800b132:	2339      	movs	r3, #57	@ 0x39
 800b134:	7013      	strb	r3, [r2, #0]
 800b136:	4633      	mov	r3, r6
 800b138:	461e      	mov	r6, r3
 800b13a:	3b01      	subs	r3, #1
 800b13c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b140:	2a39      	cmp	r2, #57	@ 0x39
 800b142:	d052      	beq.n	800b1ea <_dtoa_r+0xb12>
 800b144:	3201      	adds	r2, #1
 800b146:	701a      	strb	r2, [r3, #0]
 800b148:	e612      	b.n	800ad70 <_dtoa_r+0x698>
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	dd07      	ble.n	800b15e <_dtoa_r+0xa86>
 800b14e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b152:	d0ed      	beq.n	800b130 <_dtoa_r+0xa58>
 800b154:	9a00      	ldr	r2, [sp, #0]
 800b156:	f108 0301 	add.w	r3, r8, #1
 800b15a:	7013      	strb	r3, [r2, #0]
 800b15c:	e608      	b.n	800ad70 <_dtoa_r+0x698>
 800b15e:	9b07      	ldr	r3, [sp, #28]
 800b160:	9a07      	ldr	r2, [sp, #28]
 800b162:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b168:	4293      	cmp	r3, r2
 800b16a:	d028      	beq.n	800b1be <_dtoa_r+0xae6>
 800b16c:	4649      	mov	r1, r9
 800b16e:	2300      	movs	r3, #0
 800b170:	220a      	movs	r2, #10
 800b172:	4658      	mov	r0, fp
 800b174:	f000 f9d6 	bl	800b524 <__multadd>
 800b178:	42af      	cmp	r7, r5
 800b17a:	4681      	mov	r9, r0
 800b17c:	f04f 0300 	mov.w	r3, #0
 800b180:	f04f 020a 	mov.w	r2, #10
 800b184:	4639      	mov	r1, r7
 800b186:	4658      	mov	r0, fp
 800b188:	d107      	bne.n	800b19a <_dtoa_r+0xac2>
 800b18a:	f000 f9cb 	bl	800b524 <__multadd>
 800b18e:	4607      	mov	r7, r0
 800b190:	4605      	mov	r5, r0
 800b192:	9b07      	ldr	r3, [sp, #28]
 800b194:	3301      	adds	r3, #1
 800b196:	9307      	str	r3, [sp, #28]
 800b198:	e774      	b.n	800b084 <_dtoa_r+0x9ac>
 800b19a:	f000 f9c3 	bl	800b524 <__multadd>
 800b19e:	4629      	mov	r1, r5
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	4658      	mov	r0, fp
 800b1a8:	f000 f9bc 	bl	800b524 <__multadd>
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	e7f0      	b.n	800b192 <_dtoa_r+0xaba>
 800b1b0:	9b00      	ldr	r3, [sp, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bfcc      	ite	gt
 800b1b6:	461e      	movgt	r6, r3
 800b1b8:	2601      	movle	r6, #1
 800b1ba:	4456      	add	r6, sl
 800b1bc:	2700      	movs	r7, #0
 800b1be:	4649      	mov	r1, r9
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	4658      	mov	r0, fp
 800b1c4:	f000 fba4 	bl	800b910 <__lshift>
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4681      	mov	r9, r0
 800b1cc:	f000 fc0c 	bl	800b9e8 <__mcmp>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	dcb0      	bgt.n	800b136 <_dtoa_r+0xa5e>
 800b1d4:	d102      	bne.n	800b1dc <_dtoa_r+0xb04>
 800b1d6:	f018 0f01 	tst.w	r8, #1
 800b1da:	d1ac      	bne.n	800b136 <_dtoa_r+0xa5e>
 800b1dc:	4633      	mov	r3, r6
 800b1de:	461e      	mov	r6, r3
 800b1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1e4:	2a30      	cmp	r2, #48	@ 0x30
 800b1e6:	d0fa      	beq.n	800b1de <_dtoa_r+0xb06>
 800b1e8:	e5c2      	b.n	800ad70 <_dtoa_r+0x698>
 800b1ea:	459a      	cmp	sl, r3
 800b1ec:	d1a4      	bne.n	800b138 <_dtoa_r+0xa60>
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	2331      	movs	r3, #49	@ 0x31
 800b1f6:	f88a 3000 	strb.w	r3, [sl]
 800b1fa:	e5b9      	b.n	800ad70 <_dtoa_r+0x698>
 800b1fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b25c <_dtoa_r+0xb84>
 800b202:	b11b      	cbz	r3, 800b20c <_dtoa_r+0xb34>
 800b204:	f10a 0308 	add.w	r3, sl, #8
 800b208:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	4650      	mov	r0, sl
 800b20e:	b019      	add	sp, #100	@ 0x64
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b216:	2b01      	cmp	r3, #1
 800b218:	f77f ae37 	ble.w	800ae8a <_dtoa_r+0x7b2>
 800b21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b220:	2001      	movs	r0, #1
 800b222:	e655      	b.n	800aed0 <_dtoa_r+0x7f8>
 800b224:	9b00      	ldr	r3, [sp, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f77f aed6 	ble.w	800afd8 <_dtoa_r+0x900>
 800b22c:	4656      	mov	r6, sl
 800b22e:	4621      	mov	r1, r4
 800b230:	4648      	mov	r0, r9
 800b232:	f7ff f9c9 	bl	800a5c8 <quorem>
 800b236:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b23a:	f806 8b01 	strb.w	r8, [r6], #1
 800b23e:	9b00      	ldr	r3, [sp, #0]
 800b240:	eba6 020a 	sub.w	r2, r6, sl
 800b244:	4293      	cmp	r3, r2
 800b246:	ddb3      	ble.n	800b1b0 <_dtoa_r+0xad8>
 800b248:	4649      	mov	r1, r9
 800b24a:	2300      	movs	r3, #0
 800b24c:	220a      	movs	r2, #10
 800b24e:	4658      	mov	r0, fp
 800b250:	f000 f968 	bl	800b524 <__multadd>
 800b254:	4681      	mov	r9, r0
 800b256:	e7ea      	b.n	800b22e <_dtoa_r+0xb56>
 800b258:	0800f325 	.word	0x0800f325
 800b25c:	0800f2a9 	.word	0x0800f2a9

0800b260 <_free_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4605      	mov	r5, r0
 800b264:	2900      	cmp	r1, #0
 800b266:	d041      	beq.n	800b2ec <_free_r+0x8c>
 800b268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26c:	1f0c      	subs	r4, r1, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bfb8      	it	lt
 800b272:	18e4      	addlt	r4, r4, r3
 800b274:	f000 f8e8 	bl	800b448 <__malloc_lock>
 800b278:	4a1d      	ldr	r2, [pc, #116]	@ (800b2f0 <_free_r+0x90>)
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	b933      	cbnz	r3, 800b28c <_free_r+0x2c>
 800b27e:	6063      	str	r3, [r4, #4]
 800b280:	6014      	str	r4, [r2, #0]
 800b282:	4628      	mov	r0, r5
 800b284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b288:	f000 b8e4 	b.w	800b454 <__malloc_unlock>
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	d908      	bls.n	800b2a2 <_free_r+0x42>
 800b290:	6820      	ldr	r0, [r4, #0]
 800b292:	1821      	adds	r1, r4, r0
 800b294:	428b      	cmp	r3, r1
 800b296:	bf01      	itttt	eq
 800b298:	6819      	ldreq	r1, [r3, #0]
 800b29a:	685b      	ldreq	r3, [r3, #4]
 800b29c:	1809      	addeq	r1, r1, r0
 800b29e:	6021      	streq	r1, [r4, #0]
 800b2a0:	e7ed      	b.n	800b27e <_free_r+0x1e>
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	b10b      	cbz	r3, 800b2ac <_free_r+0x4c>
 800b2a8:	42a3      	cmp	r3, r4
 800b2aa:	d9fa      	bls.n	800b2a2 <_free_r+0x42>
 800b2ac:	6811      	ldr	r1, [r2, #0]
 800b2ae:	1850      	adds	r0, r2, r1
 800b2b0:	42a0      	cmp	r0, r4
 800b2b2:	d10b      	bne.n	800b2cc <_free_r+0x6c>
 800b2b4:	6820      	ldr	r0, [r4, #0]
 800b2b6:	4401      	add	r1, r0
 800b2b8:	1850      	adds	r0, r2, r1
 800b2ba:	4283      	cmp	r3, r0
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	d1e0      	bne.n	800b282 <_free_r+0x22>
 800b2c0:	6818      	ldr	r0, [r3, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	6053      	str	r3, [r2, #4]
 800b2c6:	4408      	add	r0, r1
 800b2c8:	6010      	str	r0, [r2, #0]
 800b2ca:	e7da      	b.n	800b282 <_free_r+0x22>
 800b2cc:	d902      	bls.n	800b2d4 <_free_r+0x74>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	602b      	str	r3, [r5, #0]
 800b2d2:	e7d6      	b.n	800b282 <_free_r+0x22>
 800b2d4:	6820      	ldr	r0, [r4, #0]
 800b2d6:	1821      	adds	r1, r4, r0
 800b2d8:	428b      	cmp	r3, r1
 800b2da:	bf04      	itt	eq
 800b2dc:	6819      	ldreq	r1, [r3, #0]
 800b2de:	685b      	ldreq	r3, [r3, #4]
 800b2e0:	6063      	str	r3, [r4, #4]
 800b2e2:	bf04      	itt	eq
 800b2e4:	1809      	addeq	r1, r1, r0
 800b2e6:	6021      	streq	r1, [r4, #0]
 800b2e8:	6054      	str	r4, [r2, #4]
 800b2ea:	e7ca      	b.n	800b282 <_free_r+0x22>
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20004f48 	.word	0x20004f48

0800b2f4 <malloc>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	@ (800b300 <malloc+0xc>)
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	f000 b825 	b.w	800b348 <_malloc_r>
 800b2fe:	bf00      	nop
 800b300:	2000002c 	.word	0x2000002c

0800b304 <sbrk_aligned>:
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	4e0f      	ldr	r6, [pc, #60]	@ (800b344 <sbrk_aligned+0x40>)
 800b308:	460c      	mov	r4, r1
 800b30a:	6831      	ldr	r1, [r6, #0]
 800b30c:	4605      	mov	r5, r0
 800b30e:	b911      	cbnz	r1, 800b316 <sbrk_aligned+0x12>
 800b310:	f001 fe0c 	bl	800cf2c <_sbrk_r>
 800b314:	6030      	str	r0, [r6, #0]
 800b316:	4621      	mov	r1, r4
 800b318:	4628      	mov	r0, r5
 800b31a:	f001 fe07 	bl	800cf2c <_sbrk_r>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	d103      	bne.n	800b32a <sbrk_aligned+0x26>
 800b322:	f04f 34ff 	mov.w	r4, #4294967295
 800b326:	4620      	mov	r0, r4
 800b328:	bd70      	pop	{r4, r5, r6, pc}
 800b32a:	1cc4      	adds	r4, r0, #3
 800b32c:	f024 0403 	bic.w	r4, r4, #3
 800b330:	42a0      	cmp	r0, r4
 800b332:	d0f8      	beq.n	800b326 <sbrk_aligned+0x22>
 800b334:	1a21      	subs	r1, r4, r0
 800b336:	4628      	mov	r0, r5
 800b338:	f001 fdf8 	bl	800cf2c <_sbrk_r>
 800b33c:	3001      	adds	r0, #1
 800b33e:	d1f2      	bne.n	800b326 <sbrk_aligned+0x22>
 800b340:	e7ef      	b.n	800b322 <sbrk_aligned+0x1e>
 800b342:	bf00      	nop
 800b344:	20004f44 	.word	0x20004f44

0800b348 <_malloc_r>:
 800b348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b34c:	1ccd      	adds	r5, r1, #3
 800b34e:	f025 0503 	bic.w	r5, r5, #3
 800b352:	3508      	adds	r5, #8
 800b354:	2d0c      	cmp	r5, #12
 800b356:	bf38      	it	cc
 800b358:	250c      	movcc	r5, #12
 800b35a:	2d00      	cmp	r5, #0
 800b35c:	4606      	mov	r6, r0
 800b35e:	db01      	blt.n	800b364 <_malloc_r+0x1c>
 800b360:	42a9      	cmp	r1, r5
 800b362:	d904      	bls.n	800b36e <_malloc_r+0x26>
 800b364:	230c      	movs	r3, #12
 800b366:	6033      	str	r3, [r6, #0]
 800b368:	2000      	movs	r0, #0
 800b36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b444 <_malloc_r+0xfc>
 800b372:	f000 f869 	bl	800b448 <__malloc_lock>
 800b376:	f8d8 3000 	ldr.w	r3, [r8]
 800b37a:	461c      	mov	r4, r3
 800b37c:	bb44      	cbnz	r4, 800b3d0 <_malloc_r+0x88>
 800b37e:	4629      	mov	r1, r5
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff ffbf 	bl	800b304 <sbrk_aligned>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	4604      	mov	r4, r0
 800b38a:	d158      	bne.n	800b43e <_malloc_r+0xf6>
 800b38c:	f8d8 4000 	ldr.w	r4, [r8]
 800b390:	4627      	mov	r7, r4
 800b392:	2f00      	cmp	r7, #0
 800b394:	d143      	bne.n	800b41e <_malloc_r+0xd6>
 800b396:	2c00      	cmp	r4, #0
 800b398:	d04b      	beq.n	800b432 <_malloc_r+0xea>
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	4639      	mov	r1, r7
 800b39e:	4630      	mov	r0, r6
 800b3a0:	eb04 0903 	add.w	r9, r4, r3
 800b3a4:	f001 fdc2 	bl	800cf2c <_sbrk_r>
 800b3a8:	4581      	cmp	r9, r0
 800b3aa:	d142      	bne.n	800b432 <_malloc_r+0xea>
 800b3ac:	6821      	ldr	r1, [r4, #0]
 800b3ae:	1a6d      	subs	r5, r5, r1
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7ff ffa6 	bl	800b304 <sbrk_aligned>
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d03a      	beq.n	800b432 <_malloc_r+0xea>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	442b      	add	r3, r5
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	bb62      	cbnz	r2, 800b424 <_malloc_r+0xdc>
 800b3ca:	f8c8 7000 	str.w	r7, [r8]
 800b3ce:	e00f      	b.n	800b3f0 <_malloc_r+0xa8>
 800b3d0:	6822      	ldr	r2, [r4, #0]
 800b3d2:	1b52      	subs	r2, r2, r5
 800b3d4:	d420      	bmi.n	800b418 <_malloc_r+0xd0>
 800b3d6:	2a0b      	cmp	r2, #11
 800b3d8:	d917      	bls.n	800b40a <_malloc_r+0xc2>
 800b3da:	1961      	adds	r1, r4, r5
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	6025      	str	r5, [r4, #0]
 800b3e0:	bf18      	it	ne
 800b3e2:	6059      	strne	r1, [r3, #4]
 800b3e4:	6863      	ldr	r3, [r4, #4]
 800b3e6:	bf08      	it	eq
 800b3e8:	f8c8 1000 	streq.w	r1, [r8]
 800b3ec:	5162      	str	r2, [r4, r5]
 800b3ee:	604b      	str	r3, [r1, #4]
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f000 f82f 	bl	800b454 <__malloc_unlock>
 800b3f6:	f104 000b 	add.w	r0, r4, #11
 800b3fa:	1d23      	adds	r3, r4, #4
 800b3fc:	f020 0007 	bic.w	r0, r0, #7
 800b400:	1ac2      	subs	r2, r0, r3
 800b402:	bf1c      	itt	ne
 800b404:	1a1b      	subne	r3, r3, r0
 800b406:	50a3      	strne	r3, [r4, r2]
 800b408:	e7af      	b.n	800b36a <_malloc_r+0x22>
 800b40a:	6862      	ldr	r2, [r4, #4]
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	bf0c      	ite	eq
 800b410:	f8c8 2000 	streq.w	r2, [r8]
 800b414:	605a      	strne	r2, [r3, #4]
 800b416:	e7eb      	b.n	800b3f0 <_malloc_r+0xa8>
 800b418:	4623      	mov	r3, r4
 800b41a:	6864      	ldr	r4, [r4, #4]
 800b41c:	e7ae      	b.n	800b37c <_malloc_r+0x34>
 800b41e:	463c      	mov	r4, r7
 800b420:	687f      	ldr	r7, [r7, #4]
 800b422:	e7b6      	b.n	800b392 <_malloc_r+0x4a>
 800b424:	461a      	mov	r2, r3
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d1fb      	bne.n	800b424 <_malloc_r+0xdc>
 800b42c:	2300      	movs	r3, #0
 800b42e:	6053      	str	r3, [r2, #4]
 800b430:	e7de      	b.n	800b3f0 <_malloc_r+0xa8>
 800b432:	230c      	movs	r3, #12
 800b434:	6033      	str	r3, [r6, #0]
 800b436:	4630      	mov	r0, r6
 800b438:	f000 f80c 	bl	800b454 <__malloc_unlock>
 800b43c:	e794      	b.n	800b368 <_malloc_r+0x20>
 800b43e:	6005      	str	r5, [r0, #0]
 800b440:	e7d6      	b.n	800b3f0 <_malloc_r+0xa8>
 800b442:	bf00      	nop
 800b444:	20004f48 	.word	0x20004f48

0800b448 <__malloc_lock>:
 800b448:	4801      	ldr	r0, [pc, #4]	@ (800b450 <__malloc_lock+0x8>)
 800b44a:	f7ff b8a6 	b.w	800a59a <__retarget_lock_acquire_recursive>
 800b44e:	bf00      	nop
 800b450:	20004f40 	.word	0x20004f40

0800b454 <__malloc_unlock>:
 800b454:	4801      	ldr	r0, [pc, #4]	@ (800b45c <__malloc_unlock+0x8>)
 800b456:	f7ff b8a1 	b.w	800a59c <__retarget_lock_release_recursive>
 800b45a:	bf00      	nop
 800b45c:	20004f40 	.word	0x20004f40

0800b460 <_Balloc>:
 800b460:	b570      	push	{r4, r5, r6, lr}
 800b462:	69c6      	ldr	r6, [r0, #28]
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	b976      	cbnz	r6, 800b488 <_Balloc+0x28>
 800b46a:	2010      	movs	r0, #16
 800b46c:	f7ff ff42 	bl	800b2f4 <malloc>
 800b470:	4602      	mov	r2, r0
 800b472:	61e0      	str	r0, [r4, #28]
 800b474:	b920      	cbnz	r0, 800b480 <_Balloc+0x20>
 800b476:	4b18      	ldr	r3, [pc, #96]	@ (800b4d8 <_Balloc+0x78>)
 800b478:	4818      	ldr	r0, [pc, #96]	@ (800b4dc <_Balloc+0x7c>)
 800b47a:	216b      	movs	r1, #107	@ 0x6b
 800b47c:	f001 fd70 	bl	800cf60 <__assert_func>
 800b480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b484:	6006      	str	r6, [r0, #0]
 800b486:	60c6      	str	r6, [r0, #12]
 800b488:	69e6      	ldr	r6, [r4, #28]
 800b48a:	68f3      	ldr	r3, [r6, #12]
 800b48c:	b183      	cbz	r3, 800b4b0 <_Balloc+0x50>
 800b48e:	69e3      	ldr	r3, [r4, #28]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b496:	b9b8      	cbnz	r0, 800b4c8 <_Balloc+0x68>
 800b498:	2101      	movs	r1, #1
 800b49a:	fa01 f605 	lsl.w	r6, r1, r5
 800b49e:	1d72      	adds	r2, r6, #5
 800b4a0:	0092      	lsls	r2, r2, #2
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f001 fd7a 	bl	800cf9c <_calloc_r>
 800b4a8:	b160      	cbz	r0, 800b4c4 <_Balloc+0x64>
 800b4aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4ae:	e00e      	b.n	800b4ce <_Balloc+0x6e>
 800b4b0:	2221      	movs	r2, #33	@ 0x21
 800b4b2:	2104      	movs	r1, #4
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f001 fd71 	bl	800cf9c <_calloc_r>
 800b4ba:	69e3      	ldr	r3, [r4, #28]
 800b4bc:	60f0      	str	r0, [r6, #12]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e4      	bne.n	800b48e <_Balloc+0x2e>
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	6802      	ldr	r2, [r0, #0]
 800b4ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4d4:	e7f7      	b.n	800b4c6 <_Balloc+0x66>
 800b4d6:	bf00      	nop
 800b4d8:	0800f2b6 	.word	0x0800f2b6
 800b4dc:	0800f336 	.word	0x0800f336

0800b4e0 <_Bfree>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	69c6      	ldr	r6, [r0, #28]
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	b976      	cbnz	r6, 800b508 <_Bfree+0x28>
 800b4ea:	2010      	movs	r0, #16
 800b4ec:	f7ff ff02 	bl	800b2f4 <malloc>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	61e8      	str	r0, [r5, #28]
 800b4f4:	b920      	cbnz	r0, 800b500 <_Bfree+0x20>
 800b4f6:	4b09      	ldr	r3, [pc, #36]	@ (800b51c <_Bfree+0x3c>)
 800b4f8:	4809      	ldr	r0, [pc, #36]	@ (800b520 <_Bfree+0x40>)
 800b4fa:	218f      	movs	r1, #143	@ 0x8f
 800b4fc:	f001 fd30 	bl	800cf60 <__assert_func>
 800b500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b504:	6006      	str	r6, [r0, #0]
 800b506:	60c6      	str	r6, [r0, #12]
 800b508:	b13c      	cbz	r4, 800b51a <_Bfree+0x3a>
 800b50a:	69eb      	ldr	r3, [r5, #28]
 800b50c:	6862      	ldr	r2, [r4, #4]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b514:	6021      	str	r1, [r4, #0]
 800b516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b51a:	bd70      	pop	{r4, r5, r6, pc}
 800b51c:	0800f2b6 	.word	0x0800f2b6
 800b520:	0800f336 	.word	0x0800f336

0800b524 <__multadd>:
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	690d      	ldr	r5, [r1, #16]
 800b52a:	4607      	mov	r7, r0
 800b52c:	460c      	mov	r4, r1
 800b52e:	461e      	mov	r6, r3
 800b530:	f101 0c14 	add.w	ip, r1, #20
 800b534:	2000      	movs	r0, #0
 800b536:	f8dc 3000 	ldr.w	r3, [ip]
 800b53a:	b299      	uxth	r1, r3
 800b53c:	fb02 6101 	mla	r1, r2, r1, r6
 800b540:	0c1e      	lsrs	r6, r3, #16
 800b542:	0c0b      	lsrs	r3, r1, #16
 800b544:	fb02 3306 	mla	r3, r2, r6, r3
 800b548:	b289      	uxth	r1, r1
 800b54a:	3001      	adds	r0, #1
 800b54c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b550:	4285      	cmp	r5, r0
 800b552:	f84c 1b04 	str.w	r1, [ip], #4
 800b556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b55a:	dcec      	bgt.n	800b536 <__multadd+0x12>
 800b55c:	b30e      	cbz	r6, 800b5a2 <__multadd+0x7e>
 800b55e:	68a3      	ldr	r3, [r4, #8]
 800b560:	42ab      	cmp	r3, r5
 800b562:	dc19      	bgt.n	800b598 <__multadd+0x74>
 800b564:	6861      	ldr	r1, [r4, #4]
 800b566:	4638      	mov	r0, r7
 800b568:	3101      	adds	r1, #1
 800b56a:	f7ff ff79 	bl	800b460 <_Balloc>
 800b56e:	4680      	mov	r8, r0
 800b570:	b928      	cbnz	r0, 800b57e <__multadd+0x5a>
 800b572:	4602      	mov	r2, r0
 800b574:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a8 <__multadd+0x84>)
 800b576:	480d      	ldr	r0, [pc, #52]	@ (800b5ac <__multadd+0x88>)
 800b578:	21ba      	movs	r1, #186	@ 0xba
 800b57a:	f001 fcf1 	bl	800cf60 <__assert_func>
 800b57e:	6922      	ldr	r2, [r4, #16]
 800b580:	3202      	adds	r2, #2
 800b582:	f104 010c 	add.w	r1, r4, #12
 800b586:	0092      	lsls	r2, r2, #2
 800b588:	300c      	adds	r0, #12
 800b58a:	f7ff f808 	bl	800a59e <memcpy>
 800b58e:	4621      	mov	r1, r4
 800b590:	4638      	mov	r0, r7
 800b592:	f7ff ffa5 	bl	800b4e0 <_Bfree>
 800b596:	4644      	mov	r4, r8
 800b598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b59c:	3501      	adds	r5, #1
 800b59e:	615e      	str	r6, [r3, #20]
 800b5a0:	6125      	str	r5, [r4, #16]
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	0800f325 	.word	0x0800f325
 800b5ac:	0800f336 	.word	0x0800f336

0800b5b0 <__s2b>:
 800b5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	4615      	mov	r5, r2
 800b5b8:	461f      	mov	r7, r3
 800b5ba:	2209      	movs	r2, #9
 800b5bc:	3308      	adds	r3, #8
 800b5be:	4606      	mov	r6, r0
 800b5c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	db09      	blt.n	800b5e0 <__s2b+0x30>
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7ff ff47 	bl	800b460 <_Balloc>
 800b5d2:	b940      	cbnz	r0, 800b5e6 <__s2b+0x36>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	4b19      	ldr	r3, [pc, #100]	@ (800b63c <__s2b+0x8c>)
 800b5d8:	4819      	ldr	r0, [pc, #100]	@ (800b640 <__s2b+0x90>)
 800b5da:	21d3      	movs	r1, #211	@ 0xd3
 800b5dc:	f001 fcc0 	bl	800cf60 <__assert_func>
 800b5e0:	0052      	lsls	r2, r2, #1
 800b5e2:	3101      	adds	r1, #1
 800b5e4:	e7f0      	b.n	800b5c8 <__s2b+0x18>
 800b5e6:	9b08      	ldr	r3, [sp, #32]
 800b5e8:	6143      	str	r3, [r0, #20]
 800b5ea:	2d09      	cmp	r5, #9
 800b5ec:	f04f 0301 	mov.w	r3, #1
 800b5f0:	6103      	str	r3, [r0, #16]
 800b5f2:	dd16      	ble.n	800b622 <__s2b+0x72>
 800b5f4:	f104 0909 	add.w	r9, r4, #9
 800b5f8:	46c8      	mov	r8, r9
 800b5fa:	442c      	add	r4, r5
 800b5fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b600:	4601      	mov	r1, r0
 800b602:	3b30      	subs	r3, #48	@ 0x30
 800b604:	220a      	movs	r2, #10
 800b606:	4630      	mov	r0, r6
 800b608:	f7ff ff8c 	bl	800b524 <__multadd>
 800b60c:	45a0      	cmp	r8, r4
 800b60e:	d1f5      	bne.n	800b5fc <__s2b+0x4c>
 800b610:	f1a5 0408 	sub.w	r4, r5, #8
 800b614:	444c      	add	r4, r9
 800b616:	1b2d      	subs	r5, r5, r4
 800b618:	1963      	adds	r3, r4, r5
 800b61a:	42bb      	cmp	r3, r7
 800b61c:	db04      	blt.n	800b628 <__s2b+0x78>
 800b61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b622:	340a      	adds	r4, #10
 800b624:	2509      	movs	r5, #9
 800b626:	e7f6      	b.n	800b616 <__s2b+0x66>
 800b628:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b62c:	4601      	mov	r1, r0
 800b62e:	3b30      	subs	r3, #48	@ 0x30
 800b630:	220a      	movs	r2, #10
 800b632:	4630      	mov	r0, r6
 800b634:	f7ff ff76 	bl	800b524 <__multadd>
 800b638:	e7ee      	b.n	800b618 <__s2b+0x68>
 800b63a:	bf00      	nop
 800b63c:	0800f325 	.word	0x0800f325
 800b640:	0800f336 	.word	0x0800f336

0800b644 <__hi0bits>:
 800b644:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b648:	4603      	mov	r3, r0
 800b64a:	bf36      	itet	cc
 800b64c:	0403      	lslcc	r3, r0, #16
 800b64e:	2000      	movcs	r0, #0
 800b650:	2010      	movcc	r0, #16
 800b652:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b656:	bf3c      	itt	cc
 800b658:	021b      	lslcc	r3, r3, #8
 800b65a:	3008      	addcc	r0, #8
 800b65c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b660:	bf3c      	itt	cc
 800b662:	011b      	lslcc	r3, r3, #4
 800b664:	3004      	addcc	r0, #4
 800b666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b66a:	bf3c      	itt	cc
 800b66c:	009b      	lslcc	r3, r3, #2
 800b66e:	3002      	addcc	r0, #2
 800b670:	2b00      	cmp	r3, #0
 800b672:	db05      	blt.n	800b680 <__hi0bits+0x3c>
 800b674:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b678:	f100 0001 	add.w	r0, r0, #1
 800b67c:	bf08      	it	eq
 800b67e:	2020      	moveq	r0, #32
 800b680:	4770      	bx	lr

0800b682 <__lo0bits>:
 800b682:	6803      	ldr	r3, [r0, #0]
 800b684:	4602      	mov	r2, r0
 800b686:	f013 0007 	ands.w	r0, r3, #7
 800b68a:	d00b      	beq.n	800b6a4 <__lo0bits+0x22>
 800b68c:	07d9      	lsls	r1, r3, #31
 800b68e:	d421      	bmi.n	800b6d4 <__lo0bits+0x52>
 800b690:	0798      	lsls	r0, r3, #30
 800b692:	bf49      	itett	mi
 800b694:	085b      	lsrmi	r3, r3, #1
 800b696:	089b      	lsrpl	r3, r3, #2
 800b698:	2001      	movmi	r0, #1
 800b69a:	6013      	strmi	r3, [r2, #0]
 800b69c:	bf5c      	itt	pl
 800b69e:	6013      	strpl	r3, [r2, #0]
 800b6a0:	2002      	movpl	r0, #2
 800b6a2:	4770      	bx	lr
 800b6a4:	b299      	uxth	r1, r3
 800b6a6:	b909      	cbnz	r1, 800b6ac <__lo0bits+0x2a>
 800b6a8:	0c1b      	lsrs	r3, r3, #16
 800b6aa:	2010      	movs	r0, #16
 800b6ac:	b2d9      	uxtb	r1, r3
 800b6ae:	b909      	cbnz	r1, 800b6b4 <__lo0bits+0x32>
 800b6b0:	3008      	adds	r0, #8
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	0719      	lsls	r1, r3, #28
 800b6b6:	bf04      	itt	eq
 800b6b8:	091b      	lsreq	r3, r3, #4
 800b6ba:	3004      	addeq	r0, #4
 800b6bc:	0799      	lsls	r1, r3, #30
 800b6be:	bf04      	itt	eq
 800b6c0:	089b      	lsreq	r3, r3, #2
 800b6c2:	3002      	addeq	r0, #2
 800b6c4:	07d9      	lsls	r1, r3, #31
 800b6c6:	d403      	bmi.n	800b6d0 <__lo0bits+0x4e>
 800b6c8:	085b      	lsrs	r3, r3, #1
 800b6ca:	f100 0001 	add.w	r0, r0, #1
 800b6ce:	d003      	beq.n	800b6d8 <__lo0bits+0x56>
 800b6d0:	6013      	str	r3, [r2, #0]
 800b6d2:	4770      	bx	lr
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	4770      	bx	lr
 800b6d8:	2020      	movs	r0, #32
 800b6da:	4770      	bx	lr

0800b6dc <__i2b>:
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	460c      	mov	r4, r1
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	f7ff febd 	bl	800b460 <_Balloc>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	b928      	cbnz	r0, 800b6f6 <__i2b+0x1a>
 800b6ea:	4b05      	ldr	r3, [pc, #20]	@ (800b700 <__i2b+0x24>)
 800b6ec:	4805      	ldr	r0, [pc, #20]	@ (800b704 <__i2b+0x28>)
 800b6ee:	f240 1145 	movw	r1, #325	@ 0x145
 800b6f2:	f001 fc35 	bl	800cf60 <__assert_func>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	6144      	str	r4, [r0, #20]
 800b6fa:	6103      	str	r3, [r0, #16]
 800b6fc:	bd10      	pop	{r4, pc}
 800b6fe:	bf00      	nop
 800b700:	0800f325 	.word	0x0800f325
 800b704:	0800f336 	.word	0x0800f336

0800b708 <__multiply>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	4614      	mov	r4, r2
 800b70e:	690a      	ldr	r2, [r1, #16]
 800b710:	6923      	ldr	r3, [r4, #16]
 800b712:	429a      	cmp	r2, r3
 800b714:	bfa8      	it	ge
 800b716:	4623      	movge	r3, r4
 800b718:	460f      	mov	r7, r1
 800b71a:	bfa4      	itt	ge
 800b71c:	460c      	movge	r4, r1
 800b71e:	461f      	movge	r7, r3
 800b720:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b724:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	6861      	ldr	r1, [r4, #4]
 800b72c:	eb0a 0609 	add.w	r6, sl, r9
 800b730:	42b3      	cmp	r3, r6
 800b732:	b085      	sub	sp, #20
 800b734:	bfb8      	it	lt
 800b736:	3101      	addlt	r1, #1
 800b738:	f7ff fe92 	bl	800b460 <_Balloc>
 800b73c:	b930      	cbnz	r0, 800b74c <__multiply+0x44>
 800b73e:	4602      	mov	r2, r0
 800b740:	4b44      	ldr	r3, [pc, #272]	@ (800b854 <__multiply+0x14c>)
 800b742:	4845      	ldr	r0, [pc, #276]	@ (800b858 <__multiply+0x150>)
 800b744:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b748:	f001 fc0a 	bl	800cf60 <__assert_func>
 800b74c:	f100 0514 	add.w	r5, r0, #20
 800b750:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b754:	462b      	mov	r3, r5
 800b756:	2200      	movs	r2, #0
 800b758:	4543      	cmp	r3, r8
 800b75a:	d321      	bcc.n	800b7a0 <__multiply+0x98>
 800b75c:	f107 0114 	add.w	r1, r7, #20
 800b760:	f104 0214 	add.w	r2, r4, #20
 800b764:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b768:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b76c:	9302      	str	r3, [sp, #8]
 800b76e:	1b13      	subs	r3, r2, r4
 800b770:	3b15      	subs	r3, #21
 800b772:	f023 0303 	bic.w	r3, r3, #3
 800b776:	3304      	adds	r3, #4
 800b778:	f104 0715 	add.w	r7, r4, #21
 800b77c:	42ba      	cmp	r2, r7
 800b77e:	bf38      	it	cc
 800b780:	2304      	movcc	r3, #4
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	9b02      	ldr	r3, [sp, #8]
 800b786:	9103      	str	r1, [sp, #12]
 800b788:	428b      	cmp	r3, r1
 800b78a:	d80c      	bhi.n	800b7a6 <__multiply+0x9e>
 800b78c:	2e00      	cmp	r6, #0
 800b78e:	dd03      	ble.n	800b798 <__multiply+0x90>
 800b790:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b794:	2b00      	cmp	r3, #0
 800b796:	d05b      	beq.n	800b850 <__multiply+0x148>
 800b798:	6106      	str	r6, [r0, #16]
 800b79a:	b005      	add	sp, #20
 800b79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a0:	f843 2b04 	str.w	r2, [r3], #4
 800b7a4:	e7d8      	b.n	800b758 <__multiply+0x50>
 800b7a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b7aa:	f1ba 0f00 	cmp.w	sl, #0
 800b7ae:	d024      	beq.n	800b7fa <__multiply+0xf2>
 800b7b0:	f104 0e14 	add.w	lr, r4, #20
 800b7b4:	46a9      	mov	r9, r5
 800b7b6:	f04f 0c00 	mov.w	ip, #0
 800b7ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b7be:	f8d9 3000 	ldr.w	r3, [r9]
 800b7c2:	fa1f fb87 	uxth.w	fp, r7
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b7cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b7d0:	f8d9 7000 	ldr.w	r7, [r9]
 800b7d4:	4463      	add	r3, ip
 800b7d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b7da:	fb0a c70b 	mla	r7, sl, fp, ip
 800b7de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7e8:	4572      	cmp	r2, lr
 800b7ea:	f849 3b04 	str.w	r3, [r9], #4
 800b7ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b7f2:	d8e2      	bhi.n	800b7ba <__multiply+0xb2>
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	f845 c003 	str.w	ip, [r5, r3]
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b800:	3104      	adds	r1, #4
 800b802:	f1b9 0f00 	cmp.w	r9, #0
 800b806:	d021      	beq.n	800b84c <__multiply+0x144>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	f104 0c14 	add.w	ip, r4, #20
 800b80e:	46ae      	mov	lr, r5
 800b810:	f04f 0a00 	mov.w	sl, #0
 800b814:	f8bc b000 	ldrh.w	fp, [ip]
 800b818:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b81c:	fb09 770b 	mla	r7, r9, fp, r7
 800b820:	4457      	add	r7, sl
 800b822:	b29b      	uxth	r3, r3
 800b824:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b828:	f84e 3b04 	str.w	r3, [lr], #4
 800b82c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b830:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b834:	f8be 3000 	ldrh.w	r3, [lr]
 800b838:	fb09 330a 	mla	r3, r9, sl, r3
 800b83c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b840:	4562      	cmp	r2, ip
 800b842:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b846:	d8e5      	bhi.n	800b814 <__multiply+0x10c>
 800b848:	9f01      	ldr	r7, [sp, #4]
 800b84a:	51eb      	str	r3, [r5, r7]
 800b84c:	3504      	adds	r5, #4
 800b84e:	e799      	b.n	800b784 <__multiply+0x7c>
 800b850:	3e01      	subs	r6, #1
 800b852:	e79b      	b.n	800b78c <__multiply+0x84>
 800b854:	0800f325 	.word	0x0800f325
 800b858:	0800f336 	.word	0x0800f336

0800b85c <__pow5mult>:
 800b85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b860:	4615      	mov	r5, r2
 800b862:	f012 0203 	ands.w	r2, r2, #3
 800b866:	4607      	mov	r7, r0
 800b868:	460e      	mov	r6, r1
 800b86a:	d007      	beq.n	800b87c <__pow5mult+0x20>
 800b86c:	4c25      	ldr	r4, [pc, #148]	@ (800b904 <__pow5mult+0xa8>)
 800b86e:	3a01      	subs	r2, #1
 800b870:	2300      	movs	r3, #0
 800b872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b876:	f7ff fe55 	bl	800b524 <__multadd>
 800b87a:	4606      	mov	r6, r0
 800b87c:	10ad      	asrs	r5, r5, #2
 800b87e:	d03d      	beq.n	800b8fc <__pow5mult+0xa0>
 800b880:	69fc      	ldr	r4, [r7, #28]
 800b882:	b97c      	cbnz	r4, 800b8a4 <__pow5mult+0x48>
 800b884:	2010      	movs	r0, #16
 800b886:	f7ff fd35 	bl	800b2f4 <malloc>
 800b88a:	4602      	mov	r2, r0
 800b88c:	61f8      	str	r0, [r7, #28]
 800b88e:	b928      	cbnz	r0, 800b89c <__pow5mult+0x40>
 800b890:	4b1d      	ldr	r3, [pc, #116]	@ (800b908 <__pow5mult+0xac>)
 800b892:	481e      	ldr	r0, [pc, #120]	@ (800b90c <__pow5mult+0xb0>)
 800b894:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b898:	f001 fb62 	bl	800cf60 <__assert_func>
 800b89c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8a0:	6004      	str	r4, [r0, #0]
 800b8a2:	60c4      	str	r4, [r0, #12]
 800b8a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b8a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8ac:	b94c      	cbnz	r4, 800b8c2 <__pow5mult+0x66>
 800b8ae:	f240 2171 	movw	r1, #625	@ 0x271
 800b8b2:	4638      	mov	r0, r7
 800b8b4:	f7ff ff12 	bl	800b6dc <__i2b>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8be:	4604      	mov	r4, r0
 800b8c0:	6003      	str	r3, [r0, #0]
 800b8c2:	f04f 0900 	mov.w	r9, #0
 800b8c6:	07eb      	lsls	r3, r5, #31
 800b8c8:	d50a      	bpl.n	800b8e0 <__pow5mult+0x84>
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f7ff ff1a 	bl	800b708 <__multiply>
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4638      	mov	r0, r7
 800b8da:	f7ff fe01 	bl	800b4e0 <_Bfree>
 800b8de:	4646      	mov	r6, r8
 800b8e0:	106d      	asrs	r5, r5, #1
 800b8e2:	d00b      	beq.n	800b8fc <__pow5mult+0xa0>
 800b8e4:	6820      	ldr	r0, [r4, #0]
 800b8e6:	b938      	cbnz	r0, 800b8f8 <__pow5mult+0x9c>
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f7ff ff0b 	bl	800b708 <__multiply>
 800b8f2:	6020      	str	r0, [r4, #0]
 800b8f4:	f8c0 9000 	str.w	r9, [r0]
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	e7e4      	b.n	800b8c6 <__pow5mult+0x6a>
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b902:	bf00      	nop
 800b904:	0800f390 	.word	0x0800f390
 800b908:	0800f2b6 	.word	0x0800f2b6
 800b90c:	0800f336 	.word	0x0800f336

0800b910 <__lshift>:
 800b910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b914:	460c      	mov	r4, r1
 800b916:	6849      	ldr	r1, [r1, #4]
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	4607      	mov	r7, r0
 800b922:	4691      	mov	r9, r2
 800b924:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b928:	f108 0601 	add.w	r6, r8, #1
 800b92c:	42b3      	cmp	r3, r6
 800b92e:	db0b      	blt.n	800b948 <__lshift+0x38>
 800b930:	4638      	mov	r0, r7
 800b932:	f7ff fd95 	bl	800b460 <_Balloc>
 800b936:	4605      	mov	r5, r0
 800b938:	b948      	cbnz	r0, 800b94e <__lshift+0x3e>
 800b93a:	4602      	mov	r2, r0
 800b93c:	4b28      	ldr	r3, [pc, #160]	@ (800b9e0 <__lshift+0xd0>)
 800b93e:	4829      	ldr	r0, [pc, #164]	@ (800b9e4 <__lshift+0xd4>)
 800b940:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b944:	f001 fb0c 	bl	800cf60 <__assert_func>
 800b948:	3101      	adds	r1, #1
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	e7ee      	b.n	800b92c <__lshift+0x1c>
 800b94e:	2300      	movs	r3, #0
 800b950:	f100 0114 	add.w	r1, r0, #20
 800b954:	f100 0210 	add.w	r2, r0, #16
 800b958:	4618      	mov	r0, r3
 800b95a:	4553      	cmp	r3, sl
 800b95c:	db33      	blt.n	800b9c6 <__lshift+0xb6>
 800b95e:	6920      	ldr	r0, [r4, #16]
 800b960:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b964:	f104 0314 	add.w	r3, r4, #20
 800b968:	f019 091f 	ands.w	r9, r9, #31
 800b96c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b970:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b974:	d02b      	beq.n	800b9ce <__lshift+0xbe>
 800b976:	f1c9 0e20 	rsb	lr, r9, #32
 800b97a:	468a      	mov	sl, r1
 800b97c:	2200      	movs	r2, #0
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	fa00 f009 	lsl.w	r0, r0, r9
 800b984:	4310      	orrs	r0, r2
 800b986:	f84a 0b04 	str.w	r0, [sl], #4
 800b98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98e:	459c      	cmp	ip, r3
 800b990:	fa22 f20e 	lsr.w	r2, r2, lr
 800b994:	d8f3      	bhi.n	800b97e <__lshift+0x6e>
 800b996:	ebac 0304 	sub.w	r3, ip, r4
 800b99a:	3b15      	subs	r3, #21
 800b99c:	f023 0303 	bic.w	r3, r3, #3
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	f104 0015 	add.w	r0, r4, #21
 800b9a6:	4584      	cmp	ip, r0
 800b9a8:	bf38      	it	cc
 800b9aa:	2304      	movcc	r3, #4
 800b9ac:	50ca      	str	r2, [r1, r3]
 800b9ae:	b10a      	cbz	r2, 800b9b4 <__lshift+0xa4>
 800b9b0:	f108 0602 	add.w	r6, r8, #2
 800b9b4:	3e01      	subs	r6, #1
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	612e      	str	r6, [r5, #16]
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	f7ff fd90 	bl	800b4e0 <_Bfree>
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	e7c5      	b.n	800b95a <__lshift+0x4a>
 800b9ce:	3904      	subs	r1, #4
 800b9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9d8:	459c      	cmp	ip, r3
 800b9da:	d8f9      	bhi.n	800b9d0 <__lshift+0xc0>
 800b9dc:	e7ea      	b.n	800b9b4 <__lshift+0xa4>
 800b9de:	bf00      	nop
 800b9e0:	0800f325 	.word	0x0800f325
 800b9e4:	0800f336 	.word	0x0800f336

0800b9e8 <__mcmp>:
 800b9e8:	690a      	ldr	r2, [r1, #16]
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	6900      	ldr	r0, [r0, #16]
 800b9ee:	1a80      	subs	r0, r0, r2
 800b9f0:	b530      	push	{r4, r5, lr}
 800b9f2:	d10e      	bne.n	800ba12 <__mcmp+0x2a>
 800b9f4:	3314      	adds	r3, #20
 800b9f6:	3114      	adds	r1, #20
 800b9f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba08:	4295      	cmp	r5, r2
 800ba0a:	d003      	beq.n	800ba14 <__mcmp+0x2c>
 800ba0c:	d205      	bcs.n	800ba1a <__mcmp+0x32>
 800ba0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba12:	bd30      	pop	{r4, r5, pc}
 800ba14:	42a3      	cmp	r3, r4
 800ba16:	d3f3      	bcc.n	800ba00 <__mcmp+0x18>
 800ba18:	e7fb      	b.n	800ba12 <__mcmp+0x2a>
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	e7f9      	b.n	800ba12 <__mcmp+0x2a>
	...

0800ba20 <__mdiff>:
 800ba20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	4689      	mov	r9, r1
 800ba26:	4606      	mov	r6, r0
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4648      	mov	r0, r9
 800ba2c:	4614      	mov	r4, r2
 800ba2e:	f7ff ffdb 	bl	800b9e8 <__mcmp>
 800ba32:	1e05      	subs	r5, r0, #0
 800ba34:	d112      	bne.n	800ba5c <__mdiff+0x3c>
 800ba36:	4629      	mov	r1, r5
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7ff fd11 	bl	800b460 <_Balloc>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	b928      	cbnz	r0, 800ba4e <__mdiff+0x2e>
 800ba42:	4b3f      	ldr	r3, [pc, #252]	@ (800bb40 <__mdiff+0x120>)
 800ba44:	f240 2137 	movw	r1, #567	@ 0x237
 800ba48:	483e      	ldr	r0, [pc, #248]	@ (800bb44 <__mdiff+0x124>)
 800ba4a:	f001 fa89 	bl	800cf60 <__assert_func>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba54:	4610      	mov	r0, r2
 800ba56:	b003      	add	sp, #12
 800ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5c:	bfbc      	itt	lt
 800ba5e:	464b      	movlt	r3, r9
 800ba60:	46a1      	movlt	r9, r4
 800ba62:	4630      	mov	r0, r6
 800ba64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba68:	bfba      	itte	lt
 800ba6a:	461c      	movlt	r4, r3
 800ba6c:	2501      	movlt	r5, #1
 800ba6e:	2500      	movge	r5, #0
 800ba70:	f7ff fcf6 	bl	800b460 <_Balloc>
 800ba74:	4602      	mov	r2, r0
 800ba76:	b918      	cbnz	r0, 800ba80 <__mdiff+0x60>
 800ba78:	4b31      	ldr	r3, [pc, #196]	@ (800bb40 <__mdiff+0x120>)
 800ba7a:	f240 2145 	movw	r1, #581	@ 0x245
 800ba7e:	e7e3      	b.n	800ba48 <__mdiff+0x28>
 800ba80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba84:	6926      	ldr	r6, [r4, #16]
 800ba86:	60c5      	str	r5, [r0, #12]
 800ba88:	f109 0310 	add.w	r3, r9, #16
 800ba8c:	f109 0514 	add.w	r5, r9, #20
 800ba90:	f104 0e14 	add.w	lr, r4, #20
 800ba94:	f100 0b14 	add.w	fp, r0, #20
 800ba98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	46d9      	mov	r9, fp
 800baa4:	f04f 0c00 	mov.w	ip, #0
 800baa8:	9b01      	ldr	r3, [sp, #4]
 800baaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800baae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bab2:	9301      	str	r3, [sp, #4]
 800bab4:	fa1f f38a 	uxth.w	r3, sl
 800bab8:	4619      	mov	r1, r3
 800baba:	b283      	uxth	r3, r0
 800babc:	1acb      	subs	r3, r1, r3
 800babe:	0c00      	lsrs	r0, r0, #16
 800bac0:	4463      	add	r3, ip
 800bac2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bac6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800baca:	b29b      	uxth	r3, r3
 800bacc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bad0:	4576      	cmp	r6, lr
 800bad2:	f849 3b04 	str.w	r3, [r9], #4
 800bad6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bada:	d8e5      	bhi.n	800baa8 <__mdiff+0x88>
 800badc:	1b33      	subs	r3, r6, r4
 800bade:	3b15      	subs	r3, #21
 800bae0:	f023 0303 	bic.w	r3, r3, #3
 800bae4:	3415      	adds	r4, #21
 800bae6:	3304      	adds	r3, #4
 800bae8:	42a6      	cmp	r6, r4
 800baea:	bf38      	it	cc
 800baec:	2304      	movcc	r3, #4
 800baee:	441d      	add	r5, r3
 800baf0:	445b      	add	r3, fp
 800baf2:	461e      	mov	r6, r3
 800baf4:	462c      	mov	r4, r5
 800baf6:	4544      	cmp	r4, r8
 800baf8:	d30e      	bcc.n	800bb18 <__mdiff+0xf8>
 800bafa:	f108 0103 	add.w	r1, r8, #3
 800bafe:	1b49      	subs	r1, r1, r5
 800bb00:	f021 0103 	bic.w	r1, r1, #3
 800bb04:	3d03      	subs	r5, #3
 800bb06:	45a8      	cmp	r8, r5
 800bb08:	bf38      	it	cc
 800bb0a:	2100      	movcc	r1, #0
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb12:	b191      	cbz	r1, 800bb3a <__mdiff+0x11a>
 800bb14:	6117      	str	r7, [r2, #16]
 800bb16:	e79d      	b.n	800ba54 <__mdiff+0x34>
 800bb18:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb1c:	46e6      	mov	lr, ip
 800bb1e:	0c08      	lsrs	r0, r1, #16
 800bb20:	fa1c fc81 	uxtah	ip, ip, r1
 800bb24:	4471      	add	r1, lr
 800bb26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb2a:	b289      	uxth	r1, r1
 800bb2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb30:	f846 1b04 	str.w	r1, [r6], #4
 800bb34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb38:	e7dd      	b.n	800baf6 <__mdiff+0xd6>
 800bb3a:	3f01      	subs	r7, #1
 800bb3c:	e7e7      	b.n	800bb0e <__mdiff+0xee>
 800bb3e:	bf00      	nop
 800bb40:	0800f325 	.word	0x0800f325
 800bb44:	0800f336 	.word	0x0800f336

0800bb48 <__ulp>:
 800bb48:	b082      	sub	sp, #8
 800bb4a:	ed8d 0b00 	vstr	d0, [sp]
 800bb4e:	9a01      	ldr	r2, [sp, #4]
 800bb50:	4b0f      	ldr	r3, [pc, #60]	@ (800bb90 <__ulp+0x48>)
 800bb52:	4013      	ands	r3, r2
 800bb54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dc08      	bgt.n	800bb6e <__ulp+0x26>
 800bb5c:	425b      	negs	r3, r3
 800bb5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bb62:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb66:	da04      	bge.n	800bb72 <__ulp+0x2a>
 800bb68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bb6c:	4113      	asrs	r3, r2
 800bb6e:	2200      	movs	r2, #0
 800bb70:	e008      	b.n	800bb84 <__ulp+0x3c>
 800bb72:	f1a2 0314 	sub.w	r3, r2, #20
 800bb76:	2b1e      	cmp	r3, #30
 800bb78:	bfda      	itte	le
 800bb7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bb7e:	40da      	lsrle	r2, r3
 800bb80:	2201      	movgt	r2, #1
 800bb82:	2300      	movs	r3, #0
 800bb84:	4619      	mov	r1, r3
 800bb86:	4610      	mov	r0, r2
 800bb88:	ec41 0b10 	vmov	d0, r0, r1
 800bb8c:	b002      	add	sp, #8
 800bb8e:	4770      	bx	lr
 800bb90:	7ff00000 	.word	0x7ff00000

0800bb94 <__b2d>:
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	6906      	ldr	r6, [r0, #16]
 800bb9a:	f100 0814 	add.w	r8, r0, #20
 800bb9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bba2:	1f37      	subs	r7, r6, #4
 800bba4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bba8:	4610      	mov	r0, r2
 800bbaa:	f7ff fd4b 	bl	800b644 <__hi0bits>
 800bbae:	f1c0 0320 	rsb	r3, r0, #32
 800bbb2:	280a      	cmp	r0, #10
 800bbb4:	600b      	str	r3, [r1, #0]
 800bbb6:	491b      	ldr	r1, [pc, #108]	@ (800bc24 <__b2d+0x90>)
 800bbb8:	dc15      	bgt.n	800bbe6 <__b2d+0x52>
 800bbba:	f1c0 0c0b 	rsb	ip, r0, #11
 800bbbe:	fa22 f30c 	lsr.w	r3, r2, ip
 800bbc2:	45b8      	cmp	r8, r7
 800bbc4:	ea43 0501 	orr.w	r5, r3, r1
 800bbc8:	bf34      	ite	cc
 800bbca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bbce:	2300      	movcs	r3, #0
 800bbd0:	3015      	adds	r0, #21
 800bbd2:	fa02 f000 	lsl.w	r0, r2, r0
 800bbd6:	fa23 f30c 	lsr.w	r3, r3, ip
 800bbda:	4303      	orrs	r3, r0
 800bbdc:	461c      	mov	r4, r3
 800bbde:	ec45 4b10 	vmov	d0, r4, r5
 800bbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe6:	45b8      	cmp	r8, r7
 800bbe8:	bf3a      	itte	cc
 800bbea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bbee:	f1a6 0708 	subcc.w	r7, r6, #8
 800bbf2:	2300      	movcs	r3, #0
 800bbf4:	380b      	subs	r0, #11
 800bbf6:	d012      	beq.n	800bc1e <__b2d+0x8a>
 800bbf8:	f1c0 0120 	rsb	r1, r0, #32
 800bbfc:	fa23 f401 	lsr.w	r4, r3, r1
 800bc00:	4082      	lsls	r2, r0
 800bc02:	4322      	orrs	r2, r4
 800bc04:	4547      	cmp	r7, r8
 800bc06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bc0a:	bf8c      	ite	hi
 800bc0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc10:	2200      	movls	r2, #0
 800bc12:	4083      	lsls	r3, r0
 800bc14:	40ca      	lsrs	r2, r1
 800bc16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	e7de      	b.n	800bbdc <__b2d+0x48>
 800bc1e:	ea42 0501 	orr.w	r5, r2, r1
 800bc22:	e7db      	b.n	800bbdc <__b2d+0x48>
 800bc24:	3ff00000 	.word	0x3ff00000

0800bc28 <__d2b>:
 800bc28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	460f      	mov	r7, r1
 800bc2e:	2101      	movs	r1, #1
 800bc30:	ec59 8b10 	vmov	r8, r9, d0
 800bc34:	4616      	mov	r6, r2
 800bc36:	f7ff fc13 	bl	800b460 <_Balloc>
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	b930      	cbnz	r0, 800bc4c <__d2b+0x24>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	4b23      	ldr	r3, [pc, #140]	@ (800bcd0 <__d2b+0xa8>)
 800bc42:	4824      	ldr	r0, [pc, #144]	@ (800bcd4 <__d2b+0xac>)
 800bc44:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc48:	f001 f98a 	bl	800cf60 <__assert_func>
 800bc4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc54:	b10d      	cbz	r5, 800bc5a <__d2b+0x32>
 800bc56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	f1b8 0300 	subs.w	r3, r8, #0
 800bc60:	d023      	beq.n	800bcaa <__d2b+0x82>
 800bc62:	4668      	mov	r0, sp
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	f7ff fd0c 	bl	800b682 <__lo0bits>
 800bc6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc6e:	b1d0      	cbz	r0, 800bca6 <__d2b+0x7e>
 800bc70:	f1c0 0320 	rsb	r3, r0, #32
 800bc74:	fa02 f303 	lsl.w	r3, r2, r3
 800bc78:	430b      	orrs	r3, r1
 800bc7a:	40c2      	lsrs	r2, r0
 800bc7c:	6163      	str	r3, [r4, #20]
 800bc7e:	9201      	str	r2, [sp, #4]
 800bc80:	9b01      	ldr	r3, [sp, #4]
 800bc82:	61a3      	str	r3, [r4, #24]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bf0c      	ite	eq
 800bc88:	2201      	moveq	r2, #1
 800bc8a:	2202      	movne	r2, #2
 800bc8c:	6122      	str	r2, [r4, #16]
 800bc8e:	b1a5      	cbz	r5, 800bcba <__d2b+0x92>
 800bc90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc94:	4405      	add	r5, r0
 800bc96:	603d      	str	r5, [r7, #0]
 800bc98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc9c:	6030      	str	r0, [r6, #0]
 800bc9e:	4620      	mov	r0, r4
 800bca0:	b003      	add	sp, #12
 800bca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bca6:	6161      	str	r1, [r4, #20]
 800bca8:	e7ea      	b.n	800bc80 <__d2b+0x58>
 800bcaa:	a801      	add	r0, sp, #4
 800bcac:	f7ff fce9 	bl	800b682 <__lo0bits>
 800bcb0:	9b01      	ldr	r3, [sp, #4]
 800bcb2:	6163      	str	r3, [r4, #20]
 800bcb4:	3020      	adds	r0, #32
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	e7e8      	b.n	800bc8c <__d2b+0x64>
 800bcba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bcc2:	6038      	str	r0, [r7, #0]
 800bcc4:	6918      	ldr	r0, [r3, #16]
 800bcc6:	f7ff fcbd 	bl	800b644 <__hi0bits>
 800bcca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcce:	e7e5      	b.n	800bc9c <__d2b+0x74>
 800bcd0:	0800f325 	.word	0x0800f325
 800bcd4:	0800f336 	.word	0x0800f336

0800bcd8 <__ratio>:
 800bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	b085      	sub	sp, #20
 800bcde:	e9cd 1000 	strd	r1, r0, [sp]
 800bce2:	a902      	add	r1, sp, #8
 800bce4:	f7ff ff56 	bl	800bb94 <__b2d>
 800bce8:	9800      	ldr	r0, [sp, #0]
 800bcea:	a903      	add	r1, sp, #12
 800bcec:	ec55 4b10 	vmov	r4, r5, d0
 800bcf0:	f7ff ff50 	bl	800bb94 <__b2d>
 800bcf4:	9b01      	ldr	r3, [sp, #4]
 800bcf6:	6919      	ldr	r1, [r3, #16]
 800bcf8:	9b00      	ldr	r3, [sp, #0]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	1ac9      	subs	r1, r1, r3
 800bcfe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	ec5b ab10 	vmov	sl, fp, d0
 800bd08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	bfce      	itee	gt
 800bd10:	462a      	movgt	r2, r5
 800bd12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd16:	465a      	movle	r2, fp
 800bd18:	462f      	mov	r7, r5
 800bd1a:	46d9      	mov	r9, fp
 800bd1c:	bfcc      	ite	gt
 800bd1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bd26:	464b      	mov	r3, r9
 800bd28:	4652      	mov	r2, sl
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7f4 fd95 	bl	800085c <__aeabi_ddiv>
 800bd32:	ec41 0b10 	vmov	d0, r0, r1
 800bd36:	b005      	add	sp, #20
 800bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd3c <__copybits>:
 800bd3c:	3901      	subs	r1, #1
 800bd3e:	b570      	push	{r4, r5, r6, lr}
 800bd40:	1149      	asrs	r1, r1, #5
 800bd42:	6914      	ldr	r4, [r2, #16]
 800bd44:	3101      	adds	r1, #1
 800bd46:	f102 0314 	add.w	r3, r2, #20
 800bd4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd52:	1f05      	subs	r5, r0, #4
 800bd54:	42a3      	cmp	r3, r4
 800bd56:	d30c      	bcc.n	800bd72 <__copybits+0x36>
 800bd58:	1aa3      	subs	r3, r4, r2
 800bd5a:	3b11      	subs	r3, #17
 800bd5c:	f023 0303 	bic.w	r3, r3, #3
 800bd60:	3211      	adds	r2, #17
 800bd62:	42a2      	cmp	r2, r4
 800bd64:	bf88      	it	hi
 800bd66:	2300      	movhi	r3, #0
 800bd68:	4418      	add	r0, r3
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	4288      	cmp	r0, r1
 800bd6e:	d305      	bcc.n	800bd7c <__copybits+0x40>
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd76:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd7a:	e7eb      	b.n	800bd54 <__copybits+0x18>
 800bd7c:	f840 3b04 	str.w	r3, [r0], #4
 800bd80:	e7f4      	b.n	800bd6c <__copybits+0x30>

0800bd82 <__any_on>:
 800bd82:	f100 0214 	add.w	r2, r0, #20
 800bd86:	6900      	ldr	r0, [r0, #16]
 800bd88:	114b      	asrs	r3, r1, #5
 800bd8a:	4298      	cmp	r0, r3
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	db11      	blt.n	800bdb4 <__any_on+0x32>
 800bd90:	dd0a      	ble.n	800bda8 <__any_on+0x26>
 800bd92:	f011 011f 	ands.w	r1, r1, #31
 800bd96:	d007      	beq.n	800bda8 <__any_on+0x26>
 800bd98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd9c:	fa24 f001 	lsr.w	r0, r4, r1
 800bda0:	fa00 f101 	lsl.w	r1, r0, r1
 800bda4:	428c      	cmp	r4, r1
 800bda6:	d10b      	bne.n	800bdc0 <__any_on+0x3e>
 800bda8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d803      	bhi.n	800bdb8 <__any_on+0x36>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	bd10      	pop	{r4, pc}
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	e7f7      	b.n	800bda8 <__any_on+0x26>
 800bdb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d0f5      	beq.n	800bdac <__any_on+0x2a>
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	e7f6      	b.n	800bdb2 <__any_on+0x30>

0800bdc4 <sulp>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	460d      	mov	r5, r1
 800bdca:	ec45 4b10 	vmov	d0, r4, r5
 800bdce:	4616      	mov	r6, r2
 800bdd0:	f7ff feba 	bl	800bb48 <__ulp>
 800bdd4:	ec51 0b10 	vmov	r0, r1, d0
 800bdd8:	b17e      	cbz	r6, 800bdfa <sulp+0x36>
 800bdda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bdde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dd09      	ble.n	800bdfa <sulp+0x36>
 800bde6:	051b      	lsls	r3, r3, #20
 800bde8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bdec:	2400      	movs	r4, #0
 800bdee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	462b      	mov	r3, r5
 800bdf6:	f7f4 fc07 	bl	8000608 <__aeabi_dmul>
 800bdfa:	ec41 0b10 	vmov	d0, r0, r1
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}

0800be00 <_strtod_l>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	b09f      	sub	sp, #124	@ 0x7c
 800be06:	460c      	mov	r4, r1
 800be08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800be0a:	2200      	movs	r2, #0
 800be0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800be0e:	9005      	str	r0, [sp, #20]
 800be10:	f04f 0a00 	mov.w	sl, #0
 800be14:	f04f 0b00 	mov.w	fp, #0
 800be18:	460a      	mov	r2, r1
 800be1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800be1c:	7811      	ldrb	r1, [r2, #0]
 800be1e:	292b      	cmp	r1, #43	@ 0x2b
 800be20:	d04a      	beq.n	800beb8 <_strtod_l+0xb8>
 800be22:	d838      	bhi.n	800be96 <_strtod_l+0x96>
 800be24:	290d      	cmp	r1, #13
 800be26:	d832      	bhi.n	800be8e <_strtod_l+0x8e>
 800be28:	2908      	cmp	r1, #8
 800be2a:	d832      	bhi.n	800be92 <_strtod_l+0x92>
 800be2c:	2900      	cmp	r1, #0
 800be2e:	d03b      	beq.n	800bea8 <_strtod_l+0xa8>
 800be30:	2200      	movs	r2, #0
 800be32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800be36:	782a      	ldrb	r2, [r5, #0]
 800be38:	2a30      	cmp	r2, #48	@ 0x30
 800be3a:	f040 80b3 	bne.w	800bfa4 <_strtod_l+0x1a4>
 800be3e:	786a      	ldrb	r2, [r5, #1]
 800be40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be44:	2a58      	cmp	r2, #88	@ 0x58
 800be46:	d16e      	bne.n	800bf26 <_strtod_l+0x126>
 800be48:	9302      	str	r3, [sp, #8]
 800be4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	4a8e      	ldr	r2, [pc, #568]	@ (800c08c <_strtod_l+0x28c>)
 800be54:	9805      	ldr	r0, [sp, #20]
 800be56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800be58:	a919      	add	r1, sp, #100	@ 0x64
 800be5a:	f001 f91b 	bl	800d094 <__gethex>
 800be5e:	f010 060f 	ands.w	r6, r0, #15
 800be62:	4604      	mov	r4, r0
 800be64:	d005      	beq.n	800be72 <_strtod_l+0x72>
 800be66:	2e06      	cmp	r6, #6
 800be68:	d128      	bne.n	800bebc <_strtod_l+0xbc>
 800be6a:	3501      	adds	r5, #1
 800be6c:	2300      	movs	r3, #0
 800be6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800be70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be74:	2b00      	cmp	r3, #0
 800be76:	f040 858e 	bne.w	800c996 <_strtod_l+0xb96>
 800be7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be7c:	b1cb      	cbz	r3, 800beb2 <_strtod_l+0xb2>
 800be7e:	4652      	mov	r2, sl
 800be80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800be84:	ec43 2b10 	vmov	d0, r2, r3
 800be88:	b01f      	add	sp, #124	@ 0x7c
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	2920      	cmp	r1, #32
 800be90:	d1ce      	bne.n	800be30 <_strtod_l+0x30>
 800be92:	3201      	adds	r2, #1
 800be94:	e7c1      	b.n	800be1a <_strtod_l+0x1a>
 800be96:	292d      	cmp	r1, #45	@ 0x2d
 800be98:	d1ca      	bne.n	800be30 <_strtod_l+0x30>
 800be9a:	2101      	movs	r1, #1
 800be9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be9e:	1c51      	adds	r1, r2, #1
 800bea0:	9119      	str	r1, [sp, #100]	@ 0x64
 800bea2:	7852      	ldrb	r2, [r2, #1]
 800bea4:	2a00      	cmp	r2, #0
 800bea6:	d1c5      	bne.n	800be34 <_strtod_l+0x34>
 800bea8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800beaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800beac:	2b00      	cmp	r3, #0
 800beae:	f040 8570 	bne.w	800c992 <_strtod_l+0xb92>
 800beb2:	4652      	mov	r2, sl
 800beb4:	465b      	mov	r3, fp
 800beb6:	e7e5      	b.n	800be84 <_strtod_l+0x84>
 800beb8:	2100      	movs	r1, #0
 800beba:	e7ef      	b.n	800be9c <_strtod_l+0x9c>
 800bebc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bebe:	b13a      	cbz	r2, 800bed0 <_strtod_l+0xd0>
 800bec0:	2135      	movs	r1, #53	@ 0x35
 800bec2:	a81c      	add	r0, sp, #112	@ 0x70
 800bec4:	f7ff ff3a 	bl	800bd3c <__copybits>
 800bec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beca:	9805      	ldr	r0, [sp, #20]
 800becc:	f7ff fb08 	bl	800b4e0 <_Bfree>
 800bed0:	3e01      	subs	r6, #1
 800bed2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bed4:	2e04      	cmp	r6, #4
 800bed6:	d806      	bhi.n	800bee6 <_strtod_l+0xe6>
 800bed8:	e8df f006 	tbb	[pc, r6]
 800bedc:	201d0314 	.word	0x201d0314
 800bee0:	14          	.byte	0x14
 800bee1:	00          	.byte	0x00
 800bee2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bee6:	05e1      	lsls	r1, r4, #23
 800bee8:	bf48      	it	mi
 800beea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800beee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bef2:	0d1b      	lsrs	r3, r3, #20
 800bef4:	051b      	lsls	r3, r3, #20
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1bb      	bne.n	800be72 <_strtod_l+0x72>
 800befa:	f7fe fb23 	bl	800a544 <__errno>
 800befe:	2322      	movs	r3, #34	@ 0x22
 800bf00:	6003      	str	r3, [r0, #0]
 800bf02:	e7b6      	b.n	800be72 <_strtod_l+0x72>
 800bf04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bf08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bf0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bf10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf14:	e7e7      	b.n	800bee6 <_strtod_l+0xe6>
 800bf16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c094 <_strtod_l+0x294>
 800bf1a:	e7e4      	b.n	800bee6 <_strtod_l+0xe6>
 800bf1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bf20:	f04f 3aff 	mov.w	sl, #4294967295
 800bf24:	e7df      	b.n	800bee6 <_strtod_l+0xe6>
 800bf26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	2b30      	cmp	r3, #48	@ 0x30
 800bf30:	d0f9      	beq.n	800bf26 <_strtod_l+0x126>
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d09d      	beq.n	800be72 <_strtod_l+0x72>
 800bf36:	2301      	movs	r3, #1
 800bf38:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9308      	str	r3, [sp, #32]
 800bf42:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf44:	461f      	mov	r7, r3
 800bf46:	220a      	movs	r2, #10
 800bf48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bf4a:	7805      	ldrb	r5, [r0, #0]
 800bf4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bf50:	b2d9      	uxtb	r1, r3
 800bf52:	2909      	cmp	r1, #9
 800bf54:	d928      	bls.n	800bfa8 <_strtod_l+0x1a8>
 800bf56:	494e      	ldr	r1, [pc, #312]	@ (800c090 <_strtod_l+0x290>)
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f000 ffd5 	bl	800cf08 <strncmp>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d032      	beq.n	800bfc8 <_strtod_l+0x1c8>
 800bf62:	2000      	movs	r0, #0
 800bf64:	462a      	mov	r2, r5
 800bf66:	4681      	mov	r9, r0
 800bf68:	463d      	mov	r5, r7
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2a65      	cmp	r2, #101	@ 0x65
 800bf6e:	d001      	beq.n	800bf74 <_strtod_l+0x174>
 800bf70:	2a45      	cmp	r2, #69	@ 0x45
 800bf72:	d114      	bne.n	800bf9e <_strtod_l+0x19e>
 800bf74:	b91d      	cbnz	r5, 800bf7e <_strtod_l+0x17e>
 800bf76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf78:	4302      	orrs	r2, r0
 800bf7a:	d095      	beq.n	800bea8 <_strtod_l+0xa8>
 800bf7c:	2500      	movs	r5, #0
 800bf7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bf80:	1c62      	adds	r2, r4, #1
 800bf82:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf84:	7862      	ldrb	r2, [r4, #1]
 800bf86:	2a2b      	cmp	r2, #43	@ 0x2b
 800bf88:	d077      	beq.n	800c07a <_strtod_l+0x27a>
 800bf8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800bf8c:	d07b      	beq.n	800c086 <_strtod_l+0x286>
 800bf8e:	f04f 0c00 	mov.w	ip, #0
 800bf92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bf96:	2909      	cmp	r1, #9
 800bf98:	f240 8082 	bls.w	800c0a0 <_strtod_l+0x2a0>
 800bf9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800bf9e:	f04f 0800 	mov.w	r8, #0
 800bfa2:	e0a2      	b.n	800c0ea <_strtod_l+0x2ea>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e7c7      	b.n	800bf38 <_strtod_l+0x138>
 800bfa8:	2f08      	cmp	r7, #8
 800bfaa:	bfd5      	itete	le
 800bfac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bfae:	9908      	ldrgt	r1, [sp, #32]
 800bfb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bfb8:	f100 0001 	add.w	r0, r0, #1
 800bfbc:	bfd4      	ite	le
 800bfbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bfc0:	9308      	strgt	r3, [sp, #32]
 800bfc2:	3701      	adds	r7, #1
 800bfc4:	9019      	str	r0, [sp, #100]	@ 0x64
 800bfc6:	e7bf      	b.n	800bf48 <_strtod_l+0x148>
 800bfc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	9219      	str	r2, [sp, #100]	@ 0x64
 800bfce:	785a      	ldrb	r2, [r3, #1]
 800bfd0:	b37f      	cbz	r7, 800c032 <_strtod_l+0x232>
 800bfd2:	4681      	mov	r9, r0
 800bfd4:	463d      	mov	r5, r7
 800bfd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bfda:	2b09      	cmp	r3, #9
 800bfdc:	d912      	bls.n	800c004 <_strtod_l+0x204>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e7c4      	b.n	800bf6c <_strtod_l+0x16c>
 800bfe2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	9219      	str	r2, [sp, #100]	@ 0x64
 800bfe8:	785a      	ldrb	r2, [r3, #1]
 800bfea:	3001      	adds	r0, #1
 800bfec:	2a30      	cmp	r2, #48	@ 0x30
 800bfee:	d0f8      	beq.n	800bfe2 <_strtod_l+0x1e2>
 800bff0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	f200 84d3 	bhi.w	800c9a0 <_strtod_l+0xba0>
 800bffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bffc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bffe:	4681      	mov	r9, r0
 800c000:	2000      	movs	r0, #0
 800c002:	4605      	mov	r5, r0
 800c004:	3a30      	subs	r2, #48	@ 0x30
 800c006:	f100 0301 	add.w	r3, r0, #1
 800c00a:	d02a      	beq.n	800c062 <_strtod_l+0x262>
 800c00c:	4499      	add	r9, r3
 800c00e:	eb00 0c05 	add.w	ip, r0, r5
 800c012:	462b      	mov	r3, r5
 800c014:	210a      	movs	r1, #10
 800c016:	4563      	cmp	r3, ip
 800c018:	d10d      	bne.n	800c036 <_strtod_l+0x236>
 800c01a:	1c69      	adds	r1, r5, #1
 800c01c:	4401      	add	r1, r0
 800c01e:	4428      	add	r0, r5
 800c020:	2808      	cmp	r0, #8
 800c022:	dc16      	bgt.n	800c052 <_strtod_l+0x252>
 800c024:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c026:	230a      	movs	r3, #10
 800c028:	fb03 2300 	mla	r3, r3, r0, r2
 800c02c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c02e:	2300      	movs	r3, #0
 800c030:	e018      	b.n	800c064 <_strtod_l+0x264>
 800c032:	4638      	mov	r0, r7
 800c034:	e7da      	b.n	800bfec <_strtod_l+0x1ec>
 800c036:	2b08      	cmp	r3, #8
 800c038:	f103 0301 	add.w	r3, r3, #1
 800c03c:	dc03      	bgt.n	800c046 <_strtod_l+0x246>
 800c03e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c040:	434e      	muls	r6, r1
 800c042:	960a      	str	r6, [sp, #40]	@ 0x28
 800c044:	e7e7      	b.n	800c016 <_strtod_l+0x216>
 800c046:	2b10      	cmp	r3, #16
 800c048:	bfde      	ittt	le
 800c04a:	9e08      	ldrle	r6, [sp, #32]
 800c04c:	434e      	mulle	r6, r1
 800c04e:	9608      	strle	r6, [sp, #32]
 800c050:	e7e1      	b.n	800c016 <_strtod_l+0x216>
 800c052:	280f      	cmp	r0, #15
 800c054:	dceb      	bgt.n	800c02e <_strtod_l+0x22e>
 800c056:	9808      	ldr	r0, [sp, #32]
 800c058:	230a      	movs	r3, #10
 800c05a:	fb03 2300 	mla	r3, r3, r0, r2
 800c05e:	9308      	str	r3, [sp, #32]
 800c060:	e7e5      	b.n	800c02e <_strtod_l+0x22e>
 800c062:	4629      	mov	r1, r5
 800c064:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c066:	1c50      	adds	r0, r2, #1
 800c068:	9019      	str	r0, [sp, #100]	@ 0x64
 800c06a:	7852      	ldrb	r2, [r2, #1]
 800c06c:	4618      	mov	r0, r3
 800c06e:	460d      	mov	r5, r1
 800c070:	e7b1      	b.n	800bfd6 <_strtod_l+0x1d6>
 800c072:	f04f 0900 	mov.w	r9, #0
 800c076:	2301      	movs	r3, #1
 800c078:	e77d      	b.n	800bf76 <_strtod_l+0x176>
 800c07a:	f04f 0c00 	mov.w	ip, #0
 800c07e:	1ca2      	adds	r2, r4, #2
 800c080:	9219      	str	r2, [sp, #100]	@ 0x64
 800c082:	78a2      	ldrb	r2, [r4, #2]
 800c084:	e785      	b.n	800bf92 <_strtod_l+0x192>
 800c086:	f04f 0c01 	mov.w	ip, #1
 800c08a:	e7f8      	b.n	800c07e <_strtod_l+0x27e>
 800c08c:	0800f4a8 	.word	0x0800f4a8
 800c090:	0800f490 	.word	0x0800f490
 800c094:	7ff00000 	.word	0x7ff00000
 800c098:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c09a:	1c51      	adds	r1, r2, #1
 800c09c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c09e:	7852      	ldrb	r2, [r2, #1]
 800c0a0:	2a30      	cmp	r2, #48	@ 0x30
 800c0a2:	d0f9      	beq.n	800c098 <_strtod_l+0x298>
 800c0a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c0a8:	2908      	cmp	r1, #8
 800c0aa:	f63f af78 	bhi.w	800bf9e <_strtod_l+0x19e>
 800c0ae:	3a30      	subs	r2, #48	@ 0x30
 800c0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c0b6:	f04f 080a 	mov.w	r8, #10
 800c0ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0bc:	1c56      	adds	r6, r2, #1
 800c0be:	9619      	str	r6, [sp, #100]	@ 0x64
 800c0c0:	7852      	ldrb	r2, [r2, #1]
 800c0c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c0c6:	f1be 0f09 	cmp.w	lr, #9
 800c0ca:	d939      	bls.n	800c140 <_strtod_l+0x340>
 800c0cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c0ce:	1a76      	subs	r6, r6, r1
 800c0d0:	2e08      	cmp	r6, #8
 800c0d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c0d6:	dc03      	bgt.n	800c0e0 <_strtod_l+0x2e0>
 800c0d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c0da:	4588      	cmp	r8, r1
 800c0dc:	bfa8      	it	ge
 800c0de:	4688      	movge	r8, r1
 800c0e0:	f1bc 0f00 	cmp.w	ip, #0
 800c0e4:	d001      	beq.n	800c0ea <_strtod_l+0x2ea>
 800c0e6:	f1c8 0800 	rsb	r8, r8, #0
 800c0ea:	2d00      	cmp	r5, #0
 800c0ec:	d14e      	bne.n	800c18c <_strtod_l+0x38c>
 800c0ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0f0:	4308      	orrs	r0, r1
 800c0f2:	f47f aebe 	bne.w	800be72 <_strtod_l+0x72>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f47f aed6 	bne.w	800bea8 <_strtod_l+0xa8>
 800c0fc:	2a69      	cmp	r2, #105	@ 0x69
 800c0fe:	d028      	beq.n	800c152 <_strtod_l+0x352>
 800c100:	dc25      	bgt.n	800c14e <_strtod_l+0x34e>
 800c102:	2a49      	cmp	r2, #73	@ 0x49
 800c104:	d025      	beq.n	800c152 <_strtod_l+0x352>
 800c106:	2a4e      	cmp	r2, #78	@ 0x4e
 800c108:	f47f aece 	bne.w	800bea8 <_strtod_l+0xa8>
 800c10c:	499b      	ldr	r1, [pc, #620]	@ (800c37c <_strtod_l+0x57c>)
 800c10e:	a819      	add	r0, sp, #100	@ 0x64
 800c110:	f001 f9e2 	bl	800d4d8 <__match>
 800c114:	2800      	cmp	r0, #0
 800c116:	f43f aec7 	beq.w	800bea8 <_strtod_l+0xa8>
 800c11a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b28      	cmp	r3, #40	@ 0x28
 800c120:	d12e      	bne.n	800c180 <_strtod_l+0x380>
 800c122:	4997      	ldr	r1, [pc, #604]	@ (800c380 <_strtod_l+0x580>)
 800c124:	aa1c      	add	r2, sp, #112	@ 0x70
 800c126:	a819      	add	r0, sp, #100	@ 0x64
 800c128:	f001 f9ea 	bl	800d500 <__hexnan>
 800c12c:	2805      	cmp	r0, #5
 800c12e:	d127      	bne.n	800c180 <_strtod_l+0x380>
 800c130:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c132:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c136:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c13a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c13e:	e698      	b.n	800be72 <_strtod_l+0x72>
 800c140:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c142:	fb08 2101 	mla	r1, r8, r1, r2
 800c146:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c14a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c14c:	e7b5      	b.n	800c0ba <_strtod_l+0x2ba>
 800c14e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c150:	e7da      	b.n	800c108 <_strtod_l+0x308>
 800c152:	498c      	ldr	r1, [pc, #560]	@ (800c384 <_strtod_l+0x584>)
 800c154:	a819      	add	r0, sp, #100	@ 0x64
 800c156:	f001 f9bf 	bl	800d4d8 <__match>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	f43f aea4 	beq.w	800bea8 <_strtod_l+0xa8>
 800c160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c162:	4989      	ldr	r1, [pc, #548]	@ (800c388 <_strtod_l+0x588>)
 800c164:	3b01      	subs	r3, #1
 800c166:	a819      	add	r0, sp, #100	@ 0x64
 800c168:	9319      	str	r3, [sp, #100]	@ 0x64
 800c16a:	f001 f9b5 	bl	800d4d8 <__match>
 800c16e:	b910      	cbnz	r0, 800c176 <_strtod_l+0x376>
 800c170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c172:	3301      	adds	r3, #1
 800c174:	9319      	str	r3, [sp, #100]	@ 0x64
 800c176:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c398 <_strtod_l+0x598>
 800c17a:	f04f 0a00 	mov.w	sl, #0
 800c17e:	e678      	b.n	800be72 <_strtod_l+0x72>
 800c180:	4882      	ldr	r0, [pc, #520]	@ (800c38c <_strtod_l+0x58c>)
 800c182:	f000 fee5 	bl	800cf50 <nan>
 800c186:	ec5b ab10 	vmov	sl, fp, d0
 800c18a:	e672      	b.n	800be72 <_strtod_l+0x72>
 800c18c:	eba8 0309 	sub.w	r3, r8, r9
 800c190:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c192:	9309      	str	r3, [sp, #36]	@ 0x24
 800c194:	2f00      	cmp	r7, #0
 800c196:	bf08      	it	eq
 800c198:	462f      	moveq	r7, r5
 800c19a:	2d10      	cmp	r5, #16
 800c19c:	462c      	mov	r4, r5
 800c19e:	bfa8      	it	ge
 800c1a0:	2410      	movge	r4, #16
 800c1a2:	f7f4 f9b7 	bl	8000514 <__aeabi_ui2d>
 800c1a6:	2d09      	cmp	r5, #9
 800c1a8:	4682      	mov	sl, r0
 800c1aa:	468b      	mov	fp, r1
 800c1ac:	dc13      	bgt.n	800c1d6 <_strtod_l+0x3d6>
 800c1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f43f ae5e 	beq.w	800be72 <_strtod_l+0x72>
 800c1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b8:	dd78      	ble.n	800c2ac <_strtod_l+0x4ac>
 800c1ba:	2b16      	cmp	r3, #22
 800c1bc:	dc5f      	bgt.n	800c27e <_strtod_l+0x47e>
 800c1be:	4974      	ldr	r1, [pc, #464]	@ (800c390 <_strtod_l+0x590>)
 800c1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1c8:	4652      	mov	r2, sl
 800c1ca:	465b      	mov	r3, fp
 800c1cc:	f7f4 fa1c 	bl	8000608 <__aeabi_dmul>
 800c1d0:	4682      	mov	sl, r0
 800c1d2:	468b      	mov	fp, r1
 800c1d4:	e64d      	b.n	800be72 <_strtod_l+0x72>
 800c1d6:	4b6e      	ldr	r3, [pc, #440]	@ (800c390 <_strtod_l+0x590>)
 800c1d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c1e0:	f7f4 fa12 	bl	8000608 <__aeabi_dmul>
 800c1e4:	4682      	mov	sl, r0
 800c1e6:	9808      	ldr	r0, [sp, #32]
 800c1e8:	468b      	mov	fp, r1
 800c1ea:	f7f4 f993 	bl	8000514 <__aeabi_ui2d>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4650      	mov	r0, sl
 800c1f4:	4659      	mov	r1, fp
 800c1f6:	f7f4 f851 	bl	800029c <__adddf3>
 800c1fa:	2d0f      	cmp	r5, #15
 800c1fc:	4682      	mov	sl, r0
 800c1fe:	468b      	mov	fp, r1
 800c200:	ddd5      	ble.n	800c1ae <_strtod_l+0x3ae>
 800c202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c204:	1b2c      	subs	r4, r5, r4
 800c206:	441c      	add	r4, r3
 800c208:	2c00      	cmp	r4, #0
 800c20a:	f340 8096 	ble.w	800c33a <_strtod_l+0x53a>
 800c20e:	f014 030f 	ands.w	r3, r4, #15
 800c212:	d00a      	beq.n	800c22a <_strtod_l+0x42a>
 800c214:	495e      	ldr	r1, [pc, #376]	@ (800c390 <_strtod_l+0x590>)
 800c216:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c21a:	4652      	mov	r2, sl
 800c21c:	465b      	mov	r3, fp
 800c21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c222:	f7f4 f9f1 	bl	8000608 <__aeabi_dmul>
 800c226:	4682      	mov	sl, r0
 800c228:	468b      	mov	fp, r1
 800c22a:	f034 040f 	bics.w	r4, r4, #15
 800c22e:	d073      	beq.n	800c318 <_strtod_l+0x518>
 800c230:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c234:	dd48      	ble.n	800c2c8 <_strtod_l+0x4c8>
 800c236:	2400      	movs	r4, #0
 800c238:	46a0      	mov	r8, r4
 800c23a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c23c:	46a1      	mov	r9, r4
 800c23e:	9a05      	ldr	r2, [sp, #20]
 800c240:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c398 <_strtod_l+0x598>
 800c244:	2322      	movs	r3, #34	@ 0x22
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	f04f 0a00 	mov.w	sl, #0
 800c24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f43f ae0f 	beq.w	800be72 <_strtod_l+0x72>
 800c254:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c256:	9805      	ldr	r0, [sp, #20]
 800c258:	f7ff f942 	bl	800b4e0 <_Bfree>
 800c25c:	9805      	ldr	r0, [sp, #20]
 800c25e:	4649      	mov	r1, r9
 800c260:	f7ff f93e 	bl	800b4e0 <_Bfree>
 800c264:	9805      	ldr	r0, [sp, #20]
 800c266:	4641      	mov	r1, r8
 800c268:	f7ff f93a 	bl	800b4e0 <_Bfree>
 800c26c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c26e:	9805      	ldr	r0, [sp, #20]
 800c270:	f7ff f936 	bl	800b4e0 <_Bfree>
 800c274:	9805      	ldr	r0, [sp, #20]
 800c276:	4621      	mov	r1, r4
 800c278:	f7ff f932 	bl	800b4e0 <_Bfree>
 800c27c:	e5f9      	b.n	800be72 <_strtod_l+0x72>
 800c27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c280:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c284:	4293      	cmp	r3, r2
 800c286:	dbbc      	blt.n	800c202 <_strtod_l+0x402>
 800c288:	4c41      	ldr	r4, [pc, #260]	@ (800c390 <_strtod_l+0x590>)
 800c28a:	f1c5 050f 	rsb	r5, r5, #15
 800c28e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c292:	4652      	mov	r2, sl
 800c294:	465b      	mov	r3, fp
 800c296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c29a:	f7f4 f9b5 	bl	8000608 <__aeabi_dmul>
 800c29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a0:	1b5d      	subs	r5, r3, r5
 800c2a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c2a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c2aa:	e78f      	b.n	800c1cc <_strtod_l+0x3cc>
 800c2ac:	3316      	adds	r3, #22
 800c2ae:	dba8      	blt.n	800c202 <_strtod_l+0x402>
 800c2b0:	4b37      	ldr	r3, [pc, #220]	@ (800c390 <_strtod_l+0x590>)
 800c2b2:	eba9 0808 	sub.w	r8, r9, r8
 800c2b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c2ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c2be:	4650      	mov	r0, sl
 800c2c0:	4659      	mov	r1, fp
 800c2c2:	f7f4 facb 	bl	800085c <__aeabi_ddiv>
 800c2c6:	e783      	b.n	800c1d0 <_strtod_l+0x3d0>
 800c2c8:	4b32      	ldr	r3, [pc, #200]	@ (800c394 <_strtod_l+0x594>)
 800c2ca:	9308      	str	r3, [sp, #32]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	1124      	asrs	r4, r4, #4
 800c2d0:	4650      	mov	r0, sl
 800c2d2:	4659      	mov	r1, fp
 800c2d4:	461e      	mov	r6, r3
 800c2d6:	2c01      	cmp	r4, #1
 800c2d8:	dc21      	bgt.n	800c31e <_strtod_l+0x51e>
 800c2da:	b10b      	cbz	r3, 800c2e0 <_strtod_l+0x4e0>
 800c2dc:	4682      	mov	sl, r0
 800c2de:	468b      	mov	fp, r1
 800c2e0:	492c      	ldr	r1, [pc, #176]	@ (800c394 <_strtod_l+0x594>)
 800c2e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c2e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c2ea:	4652      	mov	r2, sl
 800c2ec:	465b      	mov	r3, fp
 800c2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f2:	f7f4 f989 	bl	8000608 <__aeabi_dmul>
 800c2f6:	4b28      	ldr	r3, [pc, #160]	@ (800c398 <_strtod_l+0x598>)
 800c2f8:	460a      	mov	r2, r1
 800c2fa:	400b      	ands	r3, r1
 800c2fc:	4927      	ldr	r1, [pc, #156]	@ (800c39c <_strtod_l+0x59c>)
 800c2fe:	428b      	cmp	r3, r1
 800c300:	4682      	mov	sl, r0
 800c302:	d898      	bhi.n	800c236 <_strtod_l+0x436>
 800c304:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c308:	428b      	cmp	r3, r1
 800c30a:	bf86      	itte	hi
 800c30c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c3a0 <_strtod_l+0x5a0>
 800c310:	f04f 3aff 	movhi.w	sl, #4294967295
 800c314:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c318:	2300      	movs	r3, #0
 800c31a:	9308      	str	r3, [sp, #32]
 800c31c:	e07a      	b.n	800c414 <_strtod_l+0x614>
 800c31e:	07e2      	lsls	r2, r4, #31
 800c320:	d505      	bpl.n	800c32e <_strtod_l+0x52e>
 800c322:	9b08      	ldr	r3, [sp, #32]
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f4 f96e 	bl	8000608 <__aeabi_dmul>
 800c32c:	2301      	movs	r3, #1
 800c32e:	9a08      	ldr	r2, [sp, #32]
 800c330:	3208      	adds	r2, #8
 800c332:	3601      	adds	r6, #1
 800c334:	1064      	asrs	r4, r4, #1
 800c336:	9208      	str	r2, [sp, #32]
 800c338:	e7cd      	b.n	800c2d6 <_strtod_l+0x4d6>
 800c33a:	d0ed      	beq.n	800c318 <_strtod_l+0x518>
 800c33c:	4264      	negs	r4, r4
 800c33e:	f014 020f 	ands.w	r2, r4, #15
 800c342:	d00a      	beq.n	800c35a <_strtod_l+0x55a>
 800c344:	4b12      	ldr	r3, [pc, #72]	@ (800c390 <_strtod_l+0x590>)
 800c346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c34a:	4650      	mov	r0, sl
 800c34c:	4659      	mov	r1, fp
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f7f4 fa83 	bl	800085c <__aeabi_ddiv>
 800c356:	4682      	mov	sl, r0
 800c358:	468b      	mov	fp, r1
 800c35a:	1124      	asrs	r4, r4, #4
 800c35c:	d0dc      	beq.n	800c318 <_strtod_l+0x518>
 800c35e:	2c1f      	cmp	r4, #31
 800c360:	dd20      	ble.n	800c3a4 <_strtod_l+0x5a4>
 800c362:	2400      	movs	r4, #0
 800c364:	46a0      	mov	r8, r4
 800c366:	940a      	str	r4, [sp, #40]	@ 0x28
 800c368:	46a1      	mov	r9, r4
 800c36a:	9a05      	ldr	r2, [sp, #20]
 800c36c:	2322      	movs	r3, #34	@ 0x22
 800c36e:	f04f 0a00 	mov.w	sl, #0
 800c372:	f04f 0b00 	mov.w	fp, #0
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	e768      	b.n	800c24c <_strtod_l+0x44c>
 800c37a:	bf00      	nop
 800c37c:	0800f27d 	.word	0x0800f27d
 800c380:	0800f494 	.word	0x0800f494
 800c384:	0800f275 	.word	0x0800f275
 800c388:	0800f2ac 	.word	0x0800f2ac
 800c38c:	0800f63d 	.word	0x0800f63d
 800c390:	0800f3c8 	.word	0x0800f3c8
 800c394:	0800f3a0 	.word	0x0800f3a0
 800c398:	7ff00000 	.word	0x7ff00000
 800c39c:	7ca00000 	.word	0x7ca00000
 800c3a0:	7fefffff 	.word	0x7fefffff
 800c3a4:	f014 0310 	ands.w	r3, r4, #16
 800c3a8:	bf18      	it	ne
 800c3aa:	236a      	movne	r3, #106	@ 0x6a
 800c3ac:	4ea9      	ldr	r6, [pc, #676]	@ (800c654 <_strtod_l+0x854>)
 800c3ae:	9308      	str	r3, [sp, #32]
 800c3b0:	4650      	mov	r0, sl
 800c3b2:	4659      	mov	r1, fp
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	07e2      	lsls	r2, r4, #31
 800c3b8:	d504      	bpl.n	800c3c4 <_strtod_l+0x5c4>
 800c3ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3be:	f7f4 f923 	bl	8000608 <__aeabi_dmul>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	1064      	asrs	r4, r4, #1
 800c3c6:	f106 0608 	add.w	r6, r6, #8
 800c3ca:	d1f4      	bne.n	800c3b6 <_strtod_l+0x5b6>
 800c3cc:	b10b      	cbz	r3, 800c3d2 <_strtod_l+0x5d2>
 800c3ce:	4682      	mov	sl, r0
 800c3d0:	468b      	mov	fp, r1
 800c3d2:	9b08      	ldr	r3, [sp, #32]
 800c3d4:	b1b3      	cbz	r3, 800c404 <_strtod_l+0x604>
 800c3d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c3da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	4659      	mov	r1, fp
 800c3e2:	dd0f      	ble.n	800c404 <_strtod_l+0x604>
 800c3e4:	2b1f      	cmp	r3, #31
 800c3e6:	dd55      	ble.n	800c494 <_strtod_l+0x694>
 800c3e8:	2b34      	cmp	r3, #52	@ 0x34
 800c3ea:	bfde      	ittt	le
 800c3ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c3f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c3f4:	4093      	lslle	r3, r2
 800c3f6:	f04f 0a00 	mov.w	sl, #0
 800c3fa:	bfcc      	ite	gt
 800c3fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c400:	ea03 0b01 	andle.w	fp, r3, r1
 800c404:	2200      	movs	r2, #0
 800c406:	2300      	movs	r3, #0
 800c408:	4650      	mov	r0, sl
 800c40a:	4659      	mov	r1, fp
 800c40c:	f7f4 fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 800c410:	2800      	cmp	r0, #0
 800c412:	d1a6      	bne.n	800c362 <_strtod_l+0x562>
 800c414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c41a:	9805      	ldr	r0, [sp, #20]
 800c41c:	462b      	mov	r3, r5
 800c41e:	463a      	mov	r2, r7
 800c420:	f7ff f8c6 	bl	800b5b0 <__s2b>
 800c424:	900a      	str	r0, [sp, #40]	@ 0x28
 800c426:	2800      	cmp	r0, #0
 800c428:	f43f af05 	beq.w	800c236 <_strtod_l+0x436>
 800c42c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c42e:	2a00      	cmp	r2, #0
 800c430:	eba9 0308 	sub.w	r3, r9, r8
 800c434:	bfa8      	it	ge
 800c436:	2300      	movge	r3, #0
 800c438:	9312      	str	r3, [sp, #72]	@ 0x48
 800c43a:	2400      	movs	r4, #0
 800c43c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c440:	9316      	str	r3, [sp, #88]	@ 0x58
 800c442:	46a0      	mov	r8, r4
 800c444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c446:	9805      	ldr	r0, [sp, #20]
 800c448:	6859      	ldr	r1, [r3, #4]
 800c44a:	f7ff f809 	bl	800b460 <_Balloc>
 800c44e:	4681      	mov	r9, r0
 800c450:	2800      	cmp	r0, #0
 800c452:	f43f aef4 	beq.w	800c23e <_strtod_l+0x43e>
 800c456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c458:	691a      	ldr	r2, [r3, #16]
 800c45a:	3202      	adds	r2, #2
 800c45c:	f103 010c 	add.w	r1, r3, #12
 800c460:	0092      	lsls	r2, r2, #2
 800c462:	300c      	adds	r0, #12
 800c464:	f7fe f89b 	bl	800a59e <memcpy>
 800c468:	ec4b ab10 	vmov	d0, sl, fp
 800c46c:	9805      	ldr	r0, [sp, #20]
 800c46e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c470:	a91b      	add	r1, sp, #108	@ 0x6c
 800c472:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c476:	f7ff fbd7 	bl	800bc28 <__d2b>
 800c47a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c47c:	2800      	cmp	r0, #0
 800c47e:	f43f aede 	beq.w	800c23e <_strtod_l+0x43e>
 800c482:	9805      	ldr	r0, [sp, #20]
 800c484:	2101      	movs	r1, #1
 800c486:	f7ff f929 	bl	800b6dc <__i2b>
 800c48a:	4680      	mov	r8, r0
 800c48c:	b948      	cbnz	r0, 800c4a2 <_strtod_l+0x6a2>
 800c48e:	f04f 0800 	mov.w	r8, #0
 800c492:	e6d4      	b.n	800c23e <_strtod_l+0x43e>
 800c494:	f04f 32ff 	mov.w	r2, #4294967295
 800c498:	fa02 f303 	lsl.w	r3, r2, r3
 800c49c:	ea03 0a0a 	and.w	sl, r3, sl
 800c4a0:	e7b0      	b.n	800c404 <_strtod_l+0x604>
 800c4a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c4a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	bfab      	itete	ge
 800c4aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c4ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c4ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c4b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c4b2:	bfac      	ite	ge
 800c4b4:	18ef      	addge	r7, r5, r3
 800c4b6:	1b5e      	sublt	r6, r3, r5
 800c4b8:	9b08      	ldr	r3, [sp, #32]
 800c4ba:	1aed      	subs	r5, r5, r3
 800c4bc:	4415      	add	r5, r2
 800c4be:	4b66      	ldr	r3, [pc, #408]	@ (800c658 <_strtod_l+0x858>)
 800c4c0:	3d01      	subs	r5, #1
 800c4c2:	429d      	cmp	r5, r3
 800c4c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c4c8:	da50      	bge.n	800c56c <_strtod_l+0x76c>
 800c4ca:	1b5b      	subs	r3, r3, r5
 800c4cc:	2b1f      	cmp	r3, #31
 800c4ce:	eba2 0203 	sub.w	r2, r2, r3
 800c4d2:	f04f 0101 	mov.w	r1, #1
 800c4d6:	dc3d      	bgt.n	800c554 <_strtod_l+0x754>
 800c4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c4dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4e2:	18bd      	adds	r5, r7, r2
 800c4e4:	9b08      	ldr	r3, [sp, #32]
 800c4e6:	42af      	cmp	r7, r5
 800c4e8:	4416      	add	r6, r2
 800c4ea:	441e      	add	r6, r3
 800c4ec:	463b      	mov	r3, r7
 800c4ee:	bfa8      	it	ge
 800c4f0:	462b      	movge	r3, r5
 800c4f2:	42b3      	cmp	r3, r6
 800c4f4:	bfa8      	it	ge
 800c4f6:	4633      	movge	r3, r6
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	bfc2      	ittt	gt
 800c4fc:	1aed      	subgt	r5, r5, r3
 800c4fe:	1af6      	subgt	r6, r6, r3
 800c500:	1aff      	subgt	r7, r7, r3
 800c502:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c504:	2b00      	cmp	r3, #0
 800c506:	dd16      	ble.n	800c536 <_strtod_l+0x736>
 800c508:	4641      	mov	r1, r8
 800c50a:	9805      	ldr	r0, [sp, #20]
 800c50c:	461a      	mov	r2, r3
 800c50e:	f7ff f9a5 	bl	800b85c <__pow5mult>
 800c512:	4680      	mov	r8, r0
 800c514:	2800      	cmp	r0, #0
 800c516:	d0ba      	beq.n	800c48e <_strtod_l+0x68e>
 800c518:	4601      	mov	r1, r0
 800c51a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c51c:	9805      	ldr	r0, [sp, #20]
 800c51e:	f7ff f8f3 	bl	800b708 <__multiply>
 800c522:	900e      	str	r0, [sp, #56]	@ 0x38
 800c524:	2800      	cmp	r0, #0
 800c526:	f43f ae8a 	beq.w	800c23e <_strtod_l+0x43e>
 800c52a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c52c:	9805      	ldr	r0, [sp, #20]
 800c52e:	f7fe ffd7 	bl	800b4e0 <_Bfree>
 800c532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c534:	931a      	str	r3, [sp, #104]	@ 0x68
 800c536:	2d00      	cmp	r5, #0
 800c538:	dc1d      	bgt.n	800c576 <_strtod_l+0x776>
 800c53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	dd23      	ble.n	800c588 <_strtod_l+0x788>
 800c540:	4649      	mov	r1, r9
 800c542:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c544:	9805      	ldr	r0, [sp, #20]
 800c546:	f7ff f989 	bl	800b85c <__pow5mult>
 800c54a:	4681      	mov	r9, r0
 800c54c:	b9e0      	cbnz	r0, 800c588 <_strtod_l+0x788>
 800c54e:	f04f 0900 	mov.w	r9, #0
 800c552:	e674      	b.n	800c23e <_strtod_l+0x43e>
 800c554:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c558:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c55c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c560:	35e2      	adds	r5, #226	@ 0xe2
 800c562:	fa01 f305 	lsl.w	r3, r1, r5
 800c566:	9310      	str	r3, [sp, #64]	@ 0x40
 800c568:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c56a:	e7ba      	b.n	800c4e2 <_strtod_l+0x6e2>
 800c56c:	2300      	movs	r3, #0
 800c56e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c570:	2301      	movs	r3, #1
 800c572:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c574:	e7b5      	b.n	800c4e2 <_strtod_l+0x6e2>
 800c576:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c578:	9805      	ldr	r0, [sp, #20]
 800c57a:	462a      	mov	r2, r5
 800c57c:	f7ff f9c8 	bl	800b910 <__lshift>
 800c580:	901a      	str	r0, [sp, #104]	@ 0x68
 800c582:	2800      	cmp	r0, #0
 800c584:	d1d9      	bne.n	800c53a <_strtod_l+0x73a>
 800c586:	e65a      	b.n	800c23e <_strtod_l+0x43e>
 800c588:	2e00      	cmp	r6, #0
 800c58a:	dd07      	ble.n	800c59c <_strtod_l+0x79c>
 800c58c:	4649      	mov	r1, r9
 800c58e:	9805      	ldr	r0, [sp, #20]
 800c590:	4632      	mov	r2, r6
 800c592:	f7ff f9bd 	bl	800b910 <__lshift>
 800c596:	4681      	mov	r9, r0
 800c598:	2800      	cmp	r0, #0
 800c59a:	d0d8      	beq.n	800c54e <_strtod_l+0x74e>
 800c59c:	2f00      	cmp	r7, #0
 800c59e:	dd08      	ble.n	800c5b2 <_strtod_l+0x7b2>
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	9805      	ldr	r0, [sp, #20]
 800c5a4:	463a      	mov	r2, r7
 800c5a6:	f7ff f9b3 	bl	800b910 <__lshift>
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f43f ae46 	beq.w	800c23e <_strtod_l+0x43e>
 800c5b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5b4:	9805      	ldr	r0, [sp, #20]
 800c5b6:	464a      	mov	r2, r9
 800c5b8:	f7ff fa32 	bl	800ba20 <__mdiff>
 800c5bc:	4604      	mov	r4, r0
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f43f ae3d 	beq.w	800c23e <_strtod_l+0x43e>
 800c5c4:	68c3      	ldr	r3, [r0, #12]
 800c5c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60c3      	str	r3, [r0, #12]
 800c5cc:	4641      	mov	r1, r8
 800c5ce:	f7ff fa0b 	bl	800b9e8 <__mcmp>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	da46      	bge.n	800c664 <_strtod_l+0x864>
 800c5d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5d8:	ea53 030a 	orrs.w	r3, r3, sl
 800c5dc:	d16c      	bne.n	800c6b8 <_strtod_l+0x8b8>
 800c5de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d168      	bne.n	800c6b8 <_strtod_l+0x8b8>
 800c5e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5ea:	0d1b      	lsrs	r3, r3, #20
 800c5ec:	051b      	lsls	r3, r3, #20
 800c5ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c5f2:	d961      	bls.n	800c6b8 <_strtod_l+0x8b8>
 800c5f4:	6963      	ldr	r3, [r4, #20]
 800c5f6:	b913      	cbnz	r3, 800c5fe <_strtod_l+0x7fe>
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	dd5c      	ble.n	800c6b8 <_strtod_l+0x8b8>
 800c5fe:	4621      	mov	r1, r4
 800c600:	2201      	movs	r2, #1
 800c602:	9805      	ldr	r0, [sp, #20]
 800c604:	f7ff f984 	bl	800b910 <__lshift>
 800c608:	4641      	mov	r1, r8
 800c60a:	4604      	mov	r4, r0
 800c60c:	f7ff f9ec 	bl	800b9e8 <__mcmp>
 800c610:	2800      	cmp	r0, #0
 800c612:	dd51      	ble.n	800c6b8 <_strtod_l+0x8b8>
 800c614:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c618:	9a08      	ldr	r2, [sp, #32]
 800c61a:	0d1b      	lsrs	r3, r3, #20
 800c61c:	051b      	lsls	r3, r3, #20
 800c61e:	2a00      	cmp	r2, #0
 800c620:	d06b      	beq.n	800c6fa <_strtod_l+0x8fa>
 800c622:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c626:	d868      	bhi.n	800c6fa <_strtod_l+0x8fa>
 800c628:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c62c:	f67f ae9d 	bls.w	800c36a <_strtod_l+0x56a>
 800c630:	4b0a      	ldr	r3, [pc, #40]	@ (800c65c <_strtod_l+0x85c>)
 800c632:	4650      	mov	r0, sl
 800c634:	4659      	mov	r1, fp
 800c636:	2200      	movs	r2, #0
 800c638:	f7f3 ffe6 	bl	8000608 <__aeabi_dmul>
 800c63c:	4b08      	ldr	r3, [pc, #32]	@ (800c660 <_strtod_l+0x860>)
 800c63e:	400b      	ands	r3, r1
 800c640:	4682      	mov	sl, r0
 800c642:	468b      	mov	fp, r1
 800c644:	2b00      	cmp	r3, #0
 800c646:	f47f ae05 	bne.w	800c254 <_strtod_l+0x454>
 800c64a:	9a05      	ldr	r2, [sp, #20]
 800c64c:	2322      	movs	r3, #34	@ 0x22
 800c64e:	6013      	str	r3, [r2, #0]
 800c650:	e600      	b.n	800c254 <_strtod_l+0x454>
 800c652:	bf00      	nop
 800c654:	0800f4c0 	.word	0x0800f4c0
 800c658:	fffffc02 	.word	0xfffffc02
 800c65c:	39500000 	.word	0x39500000
 800c660:	7ff00000 	.word	0x7ff00000
 800c664:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c668:	d165      	bne.n	800c736 <_strtod_l+0x936>
 800c66a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c66c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c670:	b35a      	cbz	r2, 800c6ca <_strtod_l+0x8ca>
 800c672:	4a9f      	ldr	r2, [pc, #636]	@ (800c8f0 <_strtod_l+0xaf0>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d12b      	bne.n	800c6d0 <_strtod_l+0x8d0>
 800c678:	9b08      	ldr	r3, [sp, #32]
 800c67a:	4651      	mov	r1, sl
 800c67c:	b303      	cbz	r3, 800c6c0 <_strtod_l+0x8c0>
 800c67e:	4b9d      	ldr	r3, [pc, #628]	@ (800c8f4 <_strtod_l+0xaf4>)
 800c680:	465a      	mov	r2, fp
 800c682:	4013      	ands	r3, r2
 800c684:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c688:	f04f 32ff 	mov.w	r2, #4294967295
 800c68c:	d81b      	bhi.n	800c6c6 <_strtod_l+0x8c6>
 800c68e:	0d1b      	lsrs	r3, r3, #20
 800c690:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c694:	fa02 f303 	lsl.w	r3, r2, r3
 800c698:	4299      	cmp	r1, r3
 800c69a:	d119      	bne.n	800c6d0 <_strtod_l+0x8d0>
 800c69c:	4b96      	ldr	r3, [pc, #600]	@ (800c8f8 <_strtod_l+0xaf8>)
 800c69e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d102      	bne.n	800c6aa <_strtod_l+0x8aa>
 800c6a4:	3101      	adds	r1, #1
 800c6a6:	f43f adca 	beq.w	800c23e <_strtod_l+0x43e>
 800c6aa:	4b92      	ldr	r3, [pc, #584]	@ (800c8f4 <_strtod_l+0xaf4>)
 800c6ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6ae:	401a      	ands	r2, r3
 800c6b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c6b4:	f04f 0a00 	mov.w	sl, #0
 800c6b8:	9b08      	ldr	r3, [sp, #32]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1b8      	bne.n	800c630 <_strtod_l+0x830>
 800c6be:	e5c9      	b.n	800c254 <_strtod_l+0x454>
 800c6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c4:	e7e8      	b.n	800c698 <_strtod_l+0x898>
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	e7e6      	b.n	800c698 <_strtod_l+0x898>
 800c6ca:	ea53 030a 	orrs.w	r3, r3, sl
 800c6ce:	d0a1      	beq.n	800c614 <_strtod_l+0x814>
 800c6d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6d2:	b1db      	cbz	r3, 800c70c <_strtod_l+0x90c>
 800c6d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6d6:	4213      	tst	r3, r2
 800c6d8:	d0ee      	beq.n	800c6b8 <_strtod_l+0x8b8>
 800c6da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6dc:	9a08      	ldr	r2, [sp, #32]
 800c6de:	4650      	mov	r0, sl
 800c6e0:	4659      	mov	r1, fp
 800c6e2:	b1bb      	cbz	r3, 800c714 <_strtod_l+0x914>
 800c6e4:	f7ff fb6e 	bl	800bdc4 <sulp>
 800c6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6ec:	ec53 2b10 	vmov	r2, r3, d0
 800c6f0:	f7f3 fdd4 	bl	800029c <__adddf3>
 800c6f4:	4682      	mov	sl, r0
 800c6f6:	468b      	mov	fp, r1
 800c6f8:	e7de      	b.n	800c6b8 <_strtod_l+0x8b8>
 800c6fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c6fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c702:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c706:	f04f 3aff 	mov.w	sl, #4294967295
 800c70a:	e7d5      	b.n	800c6b8 <_strtod_l+0x8b8>
 800c70c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c70e:	ea13 0f0a 	tst.w	r3, sl
 800c712:	e7e1      	b.n	800c6d8 <_strtod_l+0x8d8>
 800c714:	f7ff fb56 	bl	800bdc4 <sulp>
 800c718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c71c:	ec53 2b10 	vmov	r2, r3, d0
 800c720:	f7f3 fdba 	bl	8000298 <__aeabi_dsub>
 800c724:	2200      	movs	r2, #0
 800c726:	2300      	movs	r3, #0
 800c728:	4682      	mov	sl, r0
 800c72a:	468b      	mov	fp, r1
 800c72c:	f7f4 f9d4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c730:	2800      	cmp	r0, #0
 800c732:	d0c1      	beq.n	800c6b8 <_strtod_l+0x8b8>
 800c734:	e619      	b.n	800c36a <_strtod_l+0x56a>
 800c736:	4641      	mov	r1, r8
 800c738:	4620      	mov	r0, r4
 800c73a:	f7ff facd 	bl	800bcd8 <__ratio>
 800c73e:	ec57 6b10 	vmov	r6, r7, d0
 800c742:	2200      	movs	r2, #0
 800c744:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c748:	4630      	mov	r0, r6
 800c74a:	4639      	mov	r1, r7
 800c74c:	f7f4 f9d8 	bl	8000b00 <__aeabi_dcmple>
 800c750:	2800      	cmp	r0, #0
 800c752:	d06f      	beq.n	800c834 <_strtod_l+0xa34>
 800c754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d17a      	bne.n	800c850 <_strtod_l+0xa50>
 800c75a:	f1ba 0f00 	cmp.w	sl, #0
 800c75e:	d158      	bne.n	800c812 <_strtod_l+0xa12>
 800c760:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c766:	2b00      	cmp	r3, #0
 800c768:	d15a      	bne.n	800c820 <_strtod_l+0xa20>
 800c76a:	4b64      	ldr	r3, [pc, #400]	@ (800c8fc <_strtod_l+0xafc>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	4630      	mov	r0, r6
 800c770:	4639      	mov	r1, r7
 800c772:	f7f4 f9bb 	bl	8000aec <__aeabi_dcmplt>
 800c776:	2800      	cmp	r0, #0
 800c778:	d159      	bne.n	800c82e <_strtod_l+0xa2e>
 800c77a:	4630      	mov	r0, r6
 800c77c:	4639      	mov	r1, r7
 800c77e:	4b60      	ldr	r3, [pc, #384]	@ (800c900 <_strtod_l+0xb00>)
 800c780:	2200      	movs	r2, #0
 800c782:	f7f3 ff41 	bl	8000608 <__aeabi_dmul>
 800c786:	4606      	mov	r6, r0
 800c788:	460f      	mov	r7, r1
 800c78a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c78e:	9606      	str	r6, [sp, #24]
 800c790:	9307      	str	r3, [sp, #28]
 800c792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c796:	4d57      	ldr	r5, [pc, #348]	@ (800c8f4 <_strtod_l+0xaf4>)
 800c798:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c79c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c79e:	401d      	ands	r5, r3
 800c7a0:	4b58      	ldr	r3, [pc, #352]	@ (800c904 <_strtod_l+0xb04>)
 800c7a2:	429d      	cmp	r5, r3
 800c7a4:	f040 80b2 	bne.w	800c90c <_strtod_l+0xb0c>
 800c7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c7ae:	ec4b ab10 	vmov	d0, sl, fp
 800c7b2:	f7ff f9c9 	bl	800bb48 <__ulp>
 800c7b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7ba:	ec51 0b10 	vmov	r0, r1, d0
 800c7be:	f7f3 ff23 	bl	8000608 <__aeabi_dmul>
 800c7c2:	4652      	mov	r2, sl
 800c7c4:	465b      	mov	r3, fp
 800c7c6:	f7f3 fd69 	bl	800029c <__adddf3>
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4949      	ldr	r1, [pc, #292]	@ (800c8f4 <_strtod_l+0xaf4>)
 800c7ce:	4a4e      	ldr	r2, [pc, #312]	@ (800c908 <_strtod_l+0xb08>)
 800c7d0:	4019      	ands	r1, r3
 800c7d2:	4291      	cmp	r1, r2
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	d942      	bls.n	800c85e <_strtod_l+0xa5e>
 800c7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7da:	4b47      	ldr	r3, [pc, #284]	@ (800c8f8 <_strtod_l+0xaf8>)
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d103      	bne.n	800c7e8 <_strtod_l+0x9e8>
 800c7e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	f43f ad2b 	beq.w	800c23e <_strtod_l+0x43e>
 800c7e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c8f8 <_strtod_l+0xaf8>
 800c7ec:	f04f 3aff 	mov.w	sl, #4294967295
 800c7f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7f2:	9805      	ldr	r0, [sp, #20]
 800c7f4:	f7fe fe74 	bl	800b4e0 <_Bfree>
 800c7f8:	9805      	ldr	r0, [sp, #20]
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	f7fe fe70 	bl	800b4e0 <_Bfree>
 800c800:	9805      	ldr	r0, [sp, #20]
 800c802:	4641      	mov	r1, r8
 800c804:	f7fe fe6c 	bl	800b4e0 <_Bfree>
 800c808:	9805      	ldr	r0, [sp, #20]
 800c80a:	4621      	mov	r1, r4
 800c80c:	f7fe fe68 	bl	800b4e0 <_Bfree>
 800c810:	e618      	b.n	800c444 <_strtod_l+0x644>
 800c812:	f1ba 0f01 	cmp.w	sl, #1
 800c816:	d103      	bne.n	800c820 <_strtod_l+0xa20>
 800c818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f43f ada5 	beq.w	800c36a <_strtod_l+0x56a>
 800c820:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c8d0 <_strtod_l+0xad0>
 800c824:	4f35      	ldr	r7, [pc, #212]	@ (800c8fc <_strtod_l+0xafc>)
 800c826:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c82a:	2600      	movs	r6, #0
 800c82c:	e7b1      	b.n	800c792 <_strtod_l+0x992>
 800c82e:	4f34      	ldr	r7, [pc, #208]	@ (800c900 <_strtod_l+0xb00>)
 800c830:	2600      	movs	r6, #0
 800c832:	e7aa      	b.n	800c78a <_strtod_l+0x98a>
 800c834:	4b32      	ldr	r3, [pc, #200]	@ (800c900 <_strtod_l+0xb00>)
 800c836:	4630      	mov	r0, r6
 800c838:	4639      	mov	r1, r7
 800c83a:	2200      	movs	r2, #0
 800c83c:	f7f3 fee4 	bl	8000608 <__aeabi_dmul>
 800c840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c842:	4606      	mov	r6, r0
 800c844:	460f      	mov	r7, r1
 800c846:	2b00      	cmp	r3, #0
 800c848:	d09f      	beq.n	800c78a <_strtod_l+0x98a>
 800c84a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c84e:	e7a0      	b.n	800c792 <_strtod_l+0x992>
 800c850:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c8d8 <_strtod_l+0xad8>
 800c854:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c858:	ec57 6b17 	vmov	r6, r7, d7
 800c85c:	e799      	b.n	800c792 <_strtod_l+0x992>
 800c85e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c862:	9b08      	ldr	r3, [sp, #32]
 800c864:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1c1      	bne.n	800c7f0 <_strtod_l+0x9f0>
 800c86c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c870:	0d1b      	lsrs	r3, r3, #20
 800c872:	051b      	lsls	r3, r3, #20
 800c874:	429d      	cmp	r5, r3
 800c876:	d1bb      	bne.n	800c7f0 <_strtod_l+0x9f0>
 800c878:	4630      	mov	r0, r6
 800c87a:	4639      	mov	r1, r7
 800c87c:	f7f4 fa24 	bl	8000cc8 <__aeabi_d2lz>
 800c880:	f7f3 fe94 	bl	80005ac <__aeabi_l2d>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4630      	mov	r0, r6
 800c88a:	4639      	mov	r1, r7
 800c88c:	f7f3 fd04 	bl	8000298 <__aeabi_dsub>
 800c890:	460b      	mov	r3, r1
 800c892:	4602      	mov	r2, r0
 800c894:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c898:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c89e:	ea46 060a 	orr.w	r6, r6, sl
 800c8a2:	431e      	orrs	r6, r3
 800c8a4:	d06f      	beq.n	800c986 <_strtod_l+0xb86>
 800c8a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8e0 <_strtod_l+0xae0>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f4 f91e 	bl	8000aec <__aeabi_dcmplt>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f47f accf 	bne.w	800c254 <_strtod_l+0x454>
 800c8b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c8e8 <_strtod_l+0xae8>)
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8c0:	f7f4 f932 	bl	8000b28 <__aeabi_dcmpgt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d093      	beq.n	800c7f0 <_strtod_l+0x9f0>
 800c8c8:	e4c4      	b.n	800c254 <_strtod_l+0x454>
 800c8ca:	bf00      	nop
 800c8cc:	f3af 8000 	nop.w
 800c8d0:	00000000 	.word	0x00000000
 800c8d4:	bff00000 	.word	0xbff00000
 800c8d8:	00000000 	.word	0x00000000
 800c8dc:	3ff00000 	.word	0x3ff00000
 800c8e0:	94a03595 	.word	0x94a03595
 800c8e4:	3fdfffff 	.word	0x3fdfffff
 800c8e8:	35afe535 	.word	0x35afe535
 800c8ec:	3fe00000 	.word	0x3fe00000
 800c8f0:	000fffff 	.word	0x000fffff
 800c8f4:	7ff00000 	.word	0x7ff00000
 800c8f8:	7fefffff 	.word	0x7fefffff
 800c8fc:	3ff00000 	.word	0x3ff00000
 800c900:	3fe00000 	.word	0x3fe00000
 800c904:	7fe00000 	.word	0x7fe00000
 800c908:	7c9fffff 	.word	0x7c9fffff
 800c90c:	9b08      	ldr	r3, [sp, #32]
 800c90e:	b323      	cbz	r3, 800c95a <_strtod_l+0xb5a>
 800c910:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c914:	d821      	bhi.n	800c95a <_strtod_l+0xb5a>
 800c916:	a328      	add	r3, pc, #160	@ (adr r3, 800c9b8 <_strtod_l+0xbb8>)
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	4630      	mov	r0, r6
 800c91e:	4639      	mov	r1, r7
 800c920:	f7f4 f8ee 	bl	8000b00 <__aeabi_dcmple>
 800c924:	b1a0      	cbz	r0, 800c950 <_strtod_l+0xb50>
 800c926:	4639      	mov	r1, r7
 800c928:	4630      	mov	r0, r6
 800c92a:	f7f4 f945 	bl	8000bb8 <__aeabi_d2uiz>
 800c92e:	2801      	cmp	r0, #1
 800c930:	bf38      	it	cc
 800c932:	2001      	movcc	r0, #1
 800c934:	f7f3 fdee 	bl	8000514 <__aeabi_ui2d>
 800c938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c93a:	4606      	mov	r6, r0
 800c93c:	460f      	mov	r7, r1
 800c93e:	b9fb      	cbnz	r3, 800c980 <_strtod_l+0xb80>
 800c940:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c944:	9014      	str	r0, [sp, #80]	@ 0x50
 800c946:	9315      	str	r3, [sp, #84]	@ 0x54
 800c948:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c94c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c950:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c952:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c956:	1b5b      	subs	r3, r3, r5
 800c958:	9311      	str	r3, [sp, #68]	@ 0x44
 800c95a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c95e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c962:	f7ff f8f1 	bl	800bb48 <__ulp>
 800c966:	4650      	mov	r0, sl
 800c968:	ec53 2b10 	vmov	r2, r3, d0
 800c96c:	4659      	mov	r1, fp
 800c96e:	f7f3 fe4b 	bl	8000608 <__aeabi_dmul>
 800c972:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c976:	f7f3 fc91 	bl	800029c <__adddf3>
 800c97a:	4682      	mov	sl, r0
 800c97c:	468b      	mov	fp, r1
 800c97e:	e770      	b.n	800c862 <_strtod_l+0xa62>
 800c980:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c984:	e7e0      	b.n	800c948 <_strtod_l+0xb48>
 800c986:	a30e      	add	r3, pc, #56	@ (adr r3, 800c9c0 <_strtod_l+0xbc0>)
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	f7f4 f8ae 	bl	8000aec <__aeabi_dcmplt>
 800c990:	e798      	b.n	800c8c4 <_strtod_l+0xac4>
 800c992:	2300      	movs	r3, #0
 800c994:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c996:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c99a:	6013      	str	r3, [r2, #0]
 800c99c:	f7ff ba6d 	b.w	800be7a <_strtod_l+0x7a>
 800c9a0:	2a65      	cmp	r2, #101	@ 0x65
 800c9a2:	f43f ab66 	beq.w	800c072 <_strtod_l+0x272>
 800c9a6:	2a45      	cmp	r2, #69	@ 0x45
 800c9a8:	f43f ab63 	beq.w	800c072 <_strtod_l+0x272>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f7ff bb9e 	b.w	800c0ee <_strtod_l+0x2ee>
 800c9b2:	bf00      	nop
 800c9b4:	f3af 8000 	nop.w
 800c9b8:	ffc00000 	.word	0xffc00000
 800c9bc:	41dfffff 	.word	0x41dfffff
 800c9c0:	94a03595 	.word	0x94a03595
 800c9c4:	3fcfffff 	.word	0x3fcfffff

0800c9c8 <_strtod_r>:
 800c9c8:	4b01      	ldr	r3, [pc, #4]	@ (800c9d0 <_strtod_r+0x8>)
 800c9ca:	f7ff ba19 	b.w	800be00 <_strtod_l>
 800c9ce:	bf00      	nop
 800c9d0:	2000007c 	.word	0x2000007c

0800c9d4 <_strtol_l.constprop.0>:
 800c9d4:	2b24      	cmp	r3, #36	@ 0x24
 800c9d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9da:	4686      	mov	lr, r0
 800c9dc:	4690      	mov	r8, r2
 800c9de:	d801      	bhi.n	800c9e4 <_strtol_l.constprop.0+0x10>
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d106      	bne.n	800c9f2 <_strtol_l.constprop.0+0x1e>
 800c9e4:	f7fd fdae 	bl	800a544 <__errno>
 800c9e8:	2316      	movs	r3, #22
 800c9ea:	6003      	str	r3, [r0, #0]
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f2:	4834      	ldr	r0, [pc, #208]	@ (800cac4 <_strtol_l.constprop.0+0xf0>)
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9fc:	5d06      	ldrb	r6, [r0, r4]
 800c9fe:	f016 0608 	ands.w	r6, r6, #8
 800ca02:	d1f8      	bne.n	800c9f6 <_strtol_l.constprop.0+0x22>
 800ca04:	2c2d      	cmp	r4, #45	@ 0x2d
 800ca06:	d12d      	bne.n	800ca64 <_strtol_l.constprop.0+0x90>
 800ca08:	782c      	ldrb	r4, [r5, #0]
 800ca0a:	2601      	movs	r6, #1
 800ca0c:	1c95      	adds	r5, r2, #2
 800ca0e:	f033 0210 	bics.w	r2, r3, #16
 800ca12:	d109      	bne.n	800ca28 <_strtol_l.constprop.0+0x54>
 800ca14:	2c30      	cmp	r4, #48	@ 0x30
 800ca16:	d12a      	bne.n	800ca6e <_strtol_l.constprop.0+0x9a>
 800ca18:	782a      	ldrb	r2, [r5, #0]
 800ca1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca1e:	2a58      	cmp	r2, #88	@ 0x58
 800ca20:	d125      	bne.n	800ca6e <_strtol_l.constprop.0+0x9a>
 800ca22:	786c      	ldrb	r4, [r5, #1]
 800ca24:	2310      	movs	r3, #16
 800ca26:	3502      	adds	r5, #2
 800ca28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ca2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ca30:	2200      	movs	r2, #0
 800ca32:	fbbc f9f3 	udiv	r9, ip, r3
 800ca36:	4610      	mov	r0, r2
 800ca38:	fb03 ca19 	mls	sl, r3, r9, ip
 800ca3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ca40:	2f09      	cmp	r7, #9
 800ca42:	d81b      	bhi.n	800ca7c <_strtol_l.constprop.0+0xa8>
 800ca44:	463c      	mov	r4, r7
 800ca46:	42a3      	cmp	r3, r4
 800ca48:	dd27      	ble.n	800ca9a <_strtol_l.constprop.0+0xc6>
 800ca4a:	1c57      	adds	r7, r2, #1
 800ca4c:	d007      	beq.n	800ca5e <_strtol_l.constprop.0+0x8a>
 800ca4e:	4581      	cmp	r9, r0
 800ca50:	d320      	bcc.n	800ca94 <_strtol_l.constprop.0+0xc0>
 800ca52:	d101      	bne.n	800ca58 <_strtol_l.constprop.0+0x84>
 800ca54:	45a2      	cmp	sl, r4
 800ca56:	db1d      	blt.n	800ca94 <_strtol_l.constprop.0+0xc0>
 800ca58:	fb00 4003 	mla	r0, r0, r3, r4
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca62:	e7eb      	b.n	800ca3c <_strtol_l.constprop.0+0x68>
 800ca64:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca66:	bf04      	itt	eq
 800ca68:	782c      	ldrbeq	r4, [r5, #0]
 800ca6a:	1c95      	addeq	r5, r2, #2
 800ca6c:	e7cf      	b.n	800ca0e <_strtol_l.constprop.0+0x3a>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1da      	bne.n	800ca28 <_strtol_l.constprop.0+0x54>
 800ca72:	2c30      	cmp	r4, #48	@ 0x30
 800ca74:	bf0c      	ite	eq
 800ca76:	2308      	moveq	r3, #8
 800ca78:	230a      	movne	r3, #10
 800ca7a:	e7d5      	b.n	800ca28 <_strtol_l.constprop.0+0x54>
 800ca7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ca80:	2f19      	cmp	r7, #25
 800ca82:	d801      	bhi.n	800ca88 <_strtol_l.constprop.0+0xb4>
 800ca84:	3c37      	subs	r4, #55	@ 0x37
 800ca86:	e7de      	b.n	800ca46 <_strtol_l.constprop.0+0x72>
 800ca88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ca8c:	2f19      	cmp	r7, #25
 800ca8e:	d804      	bhi.n	800ca9a <_strtol_l.constprop.0+0xc6>
 800ca90:	3c57      	subs	r4, #87	@ 0x57
 800ca92:	e7d8      	b.n	800ca46 <_strtol_l.constprop.0+0x72>
 800ca94:	f04f 32ff 	mov.w	r2, #4294967295
 800ca98:	e7e1      	b.n	800ca5e <_strtol_l.constprop.0+0x8a>
 800ca9a:	1c53      	adds	r3, r2, #1
 800ca9c:	d108      	bne.n	800cab0 <_strtol_l.constprop.0+0xdc>
 800ca9e:	2322      	movs	r3, #34	@ 0x22
 800caa0:	f8ce 3000 	str.w	r3, [lr]
 800caa4:	4660      	mov	r0, ip
 800caa6:	f1b8 0f00 	cmp.w	r8, #0
 800caaa:	d0a0      	beq.n	800c9ee <_strtol_l.constprop.0+0x1a>
 800caac:	1e69      	subs	r1, r5, #1
 800caae:	e006      	b.n	800cabe <_strtol_l.constprop.0+0xea>
 800cab0:	b106      	cbz	r6, 800cab4 <_strtol_l.constprop.0+0xe0>
 800cab2:	4240      	negs	r0, r0
 800cab4:	f1b8 0f00 	cmp.w	r8, #0
 800cab8:	d099      	beq.n	800c9ee <_strtol_l.constprop.0+0x1a>
 800caba:	2a00      	cmp	r2, #0
 800cabc:	d1f6      	bne.n	800caac <_strtol_l.constprop.0+0xd8>
 800cabe:	f8c8 1000 	str.w	r1, [r8]
 800cac2:	e794      	b.n	800c9ee <_strtol_l.constprop.0+0x1a>
 800cac4:	0800f4e9 	.word	0x0800f4e9

0800cac8 <_strtol_r>:
 800cac8:	f7ff bf84 	b.w	800c9d4 <_strtol_l.constprop.0>

0800cacc <__ssputs_r>:
 800cacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad0:	688e      	ldr	r6, [r1, #8]
 800cad2:	461f      	mov	r7, r3
 800cad4:	42be      	cmp	r6, r7
 800cad6:	680b      	ldr	r3, [r1, #0]
 800cad8:	4682      	mov	sl, r0
 800cada:	460c      	mov	r4, r1
 800cadc:	4690      	mov	r8, r2
 800cade:	d82d      	bhi.n	800cb3c <__ssputs_r+0x70>
 800cae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cae4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cae8:	d026      	beq.n	800cb38 <__ssputs_r+0x6c>
 800caea:	6965      	ldr	r5, [r4, #20]
 800caec:	6909      	ldr	r1, [r1, #16]
 800caee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800caf2:	eba3 0901 	sub.w	r9, r3, r1
 800caf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cafa:	1c7b      	adds	r3, r7, #1
 800cafc:	444b      	add	r3, r9
 800cafe:	106d      	asrs	r5, r5, #1
 800cb00:	429d      	cmp	r5, r3
 800cb02:	bf38      	it	cc
 800cb04:	461d      	movcc	r5, r3
 800cb06:	0553      	lsls	r3, r2, #21
 800cb08:	d527      	bpl.n	800cb5a <__ssputs_r+0x8e>
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f7fe fc1c 	bl	800b348 <_malloc_r>
 800cb10:	4606      	mov	r6, r0
 800cb12:	b360      	cbz	r0, 800cb6e <__ssputs_r+0xa2>
 800cb14:	6921      	ldr	r1, [r4, #16]
 800cb16:	464a      	mov	r2, r9
 800cb18:	f7fd fd41 	bl	800a59e <memcpy>
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	6126      	str	r6, [r4, #16]
 800cb2a:	6165      	str	r5, [r4, #20]
 800cb2c:	444e      	add	r6, r9
 800cb2e:	eba5 0509 	sub.w	r5, r5, r9
 800cb32:	6026      	str	r6, [r4, #0]
 800cb34:	60a5      	str	r5, [r4, #8]
 800cb36:	463e      	mov	r6, r7
 800cb38:	42be      	cmp	r6, r7
 800cb3a:	d900      	bls.n	800cb3e <__ssputs_r+0x72>
 800cb3c:	463e      	mov	r6, r7
 800cb3e:	6820      	ldr	r0, [r4, #0]
 800cb40:	4632      	mov	r2, r6
 800cb42:	4641      	mov	r1, r8
 800cb44:	f000 f9c6 	bl	800ced4 <memmove>
 800cb48:	68a3      	ldr	r3, [r4, #8]
 800cb4a:	1b9b      	subs	r3, r3, r6
 800cb4c:	60a3      	str	r3, [r4, #8]
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	4433      	add	r3, r6
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	2000      	movs	r0, #0
 800cb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5a:	462a      	mov	r2, r5
 800cb5c:	f000 fd7d 	bl	800d65a <_realloc_r>
 800cb60:	4606      	mov	r6, r0
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d1e0      	bne.n	800cb28 <__ssputs_r+0x5c>
 800cb66:	6921      	ldr	r1, [r4, #16]
 800cb68:	4650      	mov	r0, sl
 800cb6a:	f7fe fb79 	bl	800b260 <_free_r>
 800cb6e:	230c      	movs	r3, #12
 800cb70:	f8ca 3000 	str.w	r3, [sl]
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb80:	e7e9      	b.n	800cb56 <__ssputs_r+0x8a>
	...

0800cb84 <_svfiprintf_r>:
 800cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	4698      	mov	r8, r3
 800cb8a:	898b      	ldrh	r3, [r1, #12]
 800cb8c:	061b      	lsls	r3, r3, #24
 800cb8e:	b09d      	sub	sp, #116	@ 0x74
 800cb90:	4607      	mov	r7, r0
 800cb92:	460d      	mov	r5, r1
 800cb94:	4614      	mov	r4, r2
 800cb96:	d510      	bpl.n	800cbba <_svfiprintf_r+0x36>
 800cb98:	690b      	ldr	r3, [r1, #16]
 800cb9a:	b973      	cbnz	r3, 800cbba <_svfiprintf_r+0x36>
 800cb9c:	2140      	movs	r1, #64	@ 0x40
 800cb9e:	f7fe fbd3 	bl	800b348 <_malloc_r>
 800cba2:	6028      	str	r0, [r5, #0]
 800cba4:	6128      	str	r0, [r5, #16]
 800cba6:	b930      	cbnz	r0, 800cbb6 <_svfiprintf_r+0x32>
 800cba8:	230c      	movs	r3, #12
 800cbaa:	603b      	str	r3, [r7, #0]
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb0:	b01d      	add	sp, #116	@ 0x74
 800cbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb6:	2340      	movs	r3, #64	@ 0x40
 800cbb8:	616b      	str	r3, [r5, #20]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbbe:	2320      	movs	r3, #32
 800cbc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbc8:	2330      	movs	r3, #48	@ 0x30
 800cbca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd68 <_svfiprintf_r+0x1e4>
 800cbce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbd2:	f04f 0901 	mov.w	r9, #1
 800cbd6:	4623      	mov	r3, r4
 800cbd8:	469a      	mov	sl, r3
 800cbda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbde:	b10a      	cbz	r2, 800cbe4 <_svfiprintf_r+0x60>
 800cbe0:	2a25      	cmp	r2, #37	@ 0x25
 800cbe2:	d1f9      	bne.n	800cbd8 <_svfiprintf_r+0x54>
 800cbe4:	ebba 0b04 	subs.w	fp, sl, r4
 800cbe8:	d00b      	beq.n	800cc02 <_svfiprintf_r+0x7e>
 800cbea:	465b      	mov	r3, fp
 800cbec:	4622      	mov	r2, r4
 800cbee:	4629      	mov	r1, r5
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f7ff ff6b 	bl	800cacc <__ssputs_r>
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	f000 80a7 	beq.w	800cd4a <_svfiprintf_r+0x1c6>
 800cbfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbfe:	445a      	add	r2, fp
 800cc00:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc02:	f89a 3000 	ldrb.w	r3, [sl]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f000 809f 	beq.w	800cd4a <_svfiprintf_r+0x1c6>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc16:	f10a 0a01 	add.w	sl, sl, #1
 800cc1a:	9304      	str	r3, [sp, #16]
 800cc1c:	9307      	str	r3, [sp, #28]
 800cc1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc22:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc24:	4654      	mov	r4, sl
 800cc26:	2205      	movs	r2, #5
 800cc28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc2c:	484e      	ldr	r0, [pc, #312]	@ (800cd68 <_svfiprintf_r+0x1e4>)
 800cc2e:	f7f3 fad7 	bl	80001e0 <memchr>
 800cc32:	9a04      	ldr	r2, [sp, #16]
 800cc34:	b9d8      	cbnz	r0, 800cc6e <_svfiprintf_r+0xea>
 800cc36:	06d0      	lsls	r0, r2, #27
 800cc38:	bf44      	itt	mi
 800cc3a:	2320      	movmi	r3, #32
 800cc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc40:	0711      	lsls	r1, r2, #28
 800cc42:	bf44      	itt	mi
 800cc44:	232b      	movmi	r3, #43	@ 0x2b
 800cc46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc4a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc50:	d015      	beq.n	800cc7e <_svfiprintf_r+0xfa>
 800cc52:	9a07      	ldr	r2, [sp, #28]
 800cc54:	4654      	mov	r4, sl
 800cc56:	2000      	movs	r0, #0
 800cc58:	f04f 0c0a 	mov.w	ip, #10
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc62:	3b30      	subs	r3, #48	@ 0x30
 800cc64:	2b09      	cmp	r3, #9
 800cc66:	d94b      	bls.n	800cd00 <_svfiprintf_r+0x17c>
 800cc68:	b1b0      	cbz	r0, 800cc98 <_svfiprintf_r+0x114>
 800cc6a:	9207      	str	r2, [sp, #28]
 800cc6c:	e014      	b.n	800cc98 <_svfiprintf_r+0x114>
 800cc6e:	eba0 0308 	sub.w	r3, r0, r8
 800cc72:	fa09 f303 	lsl.w	r3, r9, r3
 800cc76:	4313      	orrs	r3, r2
 800cc78:	9304      	str	r3, [sp, #16]
 800cc7a:	46a2      	mov	sl, r4
 800cc7c:	e7d2      	b.n	800cc24 <_svfiprintf_r+0xa0>
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	1d19      	adds	r1, r3, #4
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	9103      	str	r1, [sp, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	bfbb      	ittet	lt
 800cc8a:	425b      	neglt	r3, r3
 800cc8c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc90:	9307      	strge	r3, [sp, #28]
 800cc92:	9307      	strlt	r3, [sp, #28]
 800cc94:	bfb8      	it	lt
 800cc96:	9204      	strlt	r2, [sp, #16]
 800cc98:	7823      	ldrb	r3, [r4, #0]
 800cc9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc9c:	d10a      	bne.n	800ccb4 <_svfiprintf_r+0x130>
 800cc9e:	7863      	ldrb	r3, [r4, #1]
 800cca0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cca2:	d132      	bne.n	800cd0a <_svfiprintf_r+0x186>
 800cca4:	9b03      	ldr	r3, [sp, #12]
 800cca6:	1d1a      	adds	r2, r3, #4
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	9203      	str	r2, [sp, #12]
 800ccac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccb0:	3402      	adds	r4, #2
 800ccb2:	9305      	str	r3, [sp, #20]
 800ccb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd78 <_svfiprintf_r+0x1f4>
 800ccb8:	7821      	ldrb	r1, [r4, #0]
 800ccba:	2203      	movs	r2, #3
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	f7f3 fa8f 	bl	80001e0 <memchr>
 800ccc2:	b138      	cbz	r0, 800ccd4 <_svfiprintf_r+0x150>
 800ccc4:	9b04      	ldr	r3, [sp, #16]
 800ccc6:	eba0 000a 	sub.w	r0, r0, sl
 800ccca:	2240      	movs	r2, #64	@ 0x40
 800cccc:	4082      	lsls	r2, r0
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	3401      	adds	r4, #1
 800ccd2:	9304      	str	r3, [sp, #16]
 800ccd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd8:	4824      	ldr	r0, [pc, #144]	@ (800cd6c <_svfiprintf_r+0x1e8>)
 800ccda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccde:	2206      	movs	r2, #6
 800cce0:	f7f3 fa7e 	bl	80001e0 <memchr>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	d036      	beq.n	800cd56 <_svfiprintf_r+0x1d2>
 800cce8:	4b21      	ldr	r3, [pc, #132]	@ (800cd70 <_svfiprintf_r+0x1ec>)
 800ccea:	bb1b      	cbnz	r3, 800cd34 <_svfiprintf_r+0x1b0>
 800ccec:	9b03      	ldr	r3, [sp, #12]
 800ccee:	3307      	adds	r3, #7
 800ccf0:	f023 0307 	bic.w	r3, r3, #7
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	9303      	str	r3, [sp, #12]
 800ccf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccfa:	4433      	add	r3, r6
 800ccfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccfe:	e76a      	b.n	800cbd6 <_svfiprintf_r+0x52>
 800cd00:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd04:	460c      	mov	r4, r1
 800cd06:	2001      	movs	r0, #1
 800cd08:	e7a8      	b.n	800cc5c <_svfiprintf_r+0xd8>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	3401      	adds	r4, #1
 800cd0e:	9305      	str	r3, [sp, #20]
 800cd10:	4619      	mov	r1, r3
 800cd12:	f04f 0c0a 	mov.w	ip, #10
 800cd16:	4620      	mov	r0, r4
 800cd18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd1c:	3a30      	subs	r2, #48	@ 0x30
 800cd1e:	2a09      	cmp	r2, #9
 800cd20:	d903      	bls.n	800cd2a <_svfiprintf_r+0x1a6>
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d0c6      	beq.n	800ccb4 <_svfiprintf_r+0x130>
 800cd26:	9105      	str	r1, [sp, #20]
 800cd28:	e7c4      	b.n	800ccb4 <_svfiprintf_r+0x130>
 800cd2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd2e:	4604      	mov	r4, r0
 800cd30:	2301      	movs	r3, #1
 800cd32:	e7f0      	b.n	800cd16 <_svfiprintf_r+0x192>
 800cd34:	ab03      	add	r3, sp, #12
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	462a      	mov	r2, r5
 800cd3a:	4b0e      	ldr	r3, [pc, #56]	@ (800cd74 <_svfiprintf_r+0x1f0>)
 800cd3c:	a904      	add	r1, sp, #16
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7fc fcaa 	bl	8009698 <_printf_float>
 800cd44:	1c42      	adds	r2, r0, #1
 800cd46:	4606      	mov	r6, r0
 800cd48:	d1d6      	bne.n	800ccf8 <_svfiprintf_r+0x174>
 800cd4a:	89ab      	ldrh	r3, [r5, #12]
 800cd4c:	065b      	lsls	r3, r3, #25
 800cd4e:	f53f af2d 	bmi.w	800cbac <_svfiprintf_r+0x28>
 800cd52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd54:	e72c      	b.n	800cbb0 <_svfiprintf_r+0x2c>
 800cd56:	ab03      	add	r3, sp, #12
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	462a      	mov	r2, r5
 800cd5c:	4b05      	ldr	r3, [pc, #20]	@ (800cd74 <_svfiprintf_r+0x1f0>)
 800cd5e:	a904      	add	r1, sp, #16
 800cd60:	4638      	mov	r0, r7
 800cd62:	f7fc ff31 	bl	8009bc8 <_printf_i>
 800cd66:	e7ed      	b.n	800cd44 <_svfiprintf_r+0x1c0>
 800cd68:	0800f5e9 	.word	0x0800f5e9
 800cd6c:	0800f5f3 	.word	0x0800f5f3
 800cd70:	08009699 	.word	0x08009699
 800cd74:	0800cacd 	.word	0x0800cacd
 800cd78:	0800f5ef 	.word	0x0800f5ef

0800cd7c <__sflush_r>:
 800cd7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd84:	0716      	lsls	r6, r2, #28
 800cd86:	4605      	mov	r5, r0
 800cd88:	460c      	mov	r4, r1
 800cd8a:	d454      	bmi.n	800ce36 <__sflush_r+0xba>
 800cd8c:	684b      	ldr	r3, [r1, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	dc02      	bgt.n	800cd98 <__sflush_r+0x1c>
 800cd92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	dd48      	ble.n	800ce2a <__sflush_r+0xae>
 800cd98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd9a:	2e00      	cmp	r6, #0
 800cd9c:	d045      	beq.n	800ce2a <__sflush_r+0xae>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cda4:	682f      	ldr	r7, [r5, #0]
 800cda6:	6a21      	ldr	r1, [r4, #32]
 800cda8:	602b      	str	r3, [r5, #0]
 800cdaa:	d030      	beq.n	800ce0e <__sflush_r+0x92>
 800cdac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	0759      	lsls	r1, r3, #29
 800cdb2:	d505      	bpl.n	800cdc0 <__sflush_r+0x44>
 800cdb4:	6863      	ldr	r3, [r4, #4]
 800cdb6:	1ad2      	subs	r2, r2, r3
 800cdb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cdba:	b10b      	cbz	r3, 800cdc0 <__sflush_r+0x44>
 800cdbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdbe:	1ad2      	subs	r2, r2, r3
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdc4:	6a21      	ldr	r1, [r4, #32]
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	47b0      	blx	r6
 800cdca:	1c43      	adds	r3, r0, #1
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	d106      	bne.n	800cdde <__sflush_r+0x62>
 800cdd0:	6829      	ldr	r1, [r5, #0]
 800cdd2:	291d      	cmp	r1, #29
 800cdd4:	d82b      	bhi.n	800ce2e <__sflush_r+0xb2>
 800cdd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ce80 <__sflush_r+0x104>)
 800cdd8:	410a      	asrs	r2, r1
 800cdda:	07d6      	lsls	r6, r2, #31
 800cddc:	d427      	bmi.n	800ce2e <__sflush_r+0xb2>
 800cdde:	2200      	movs	r2, #0
 800cde0:	6062      	str	r2, [r4, #4]
 800cde2:	04d9      	lsls	r1, r3, #19
 800cde4:	6922      	ldr	r2, [r4, #16]
 800cde6:	6022      	str	r2, [r4, #0]
 800cde8:	d504      	bpl.n	800cdf4 <__sflush_r+0x78>
 800cdea:	1c42      	adds	r2, r0, #1
 800cdec:	d101      	bne.n	800cdf2 <__sflush_r+0x76>
 800cdee:	682b      	ldr	r3, [r5, #0]
 800cdf0:	b903      	cbnz	r3, 800cdf4 <__sflush_r+0x78>
 800cdf2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cdf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdf6:	602f      	str	r7, [r5, #0]
 800cdf8:	b1b9      	cbz	r1, 800ce2a <__sflush_r+0xae>
 800cdfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdfe:	4299      	cmp	r1, r3
 800ce00:	d002      	beq.n	800ce08 <__sflush_r+0x8c>
 800ce02:	4628      	mov	r0, r5
 800ce04:	f7fe fa2c 	bl	800b260 <_free_r>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce0c:	e00d      	b.n	800ce2a <__sflush_r+0xae>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4628      	mov	r0, r5
 800ce12:	47b0      	blx	r6
 800ce14:	4602      	mov	r2, r0
 800ce16:	1c50      	adds	r0, r2, #1
 800ce18:	d1c9      	bne.n	800cdae <__sflush_r+0x32>
 800ce1a:	682b      	ldr	r3, [r5, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0c6      	beq.n	800cdae <__sflush_r+0x32>
 800ce20:	2b1d      	cmp	r3, #29
 800ce22:	d001      	beq.n	800ce28 <__sflush_r+0xac>
 800ce24:	2b16      	cmp	r3, #22
 800ce26:	d11e      	bne.n	800ce66 <__sflush_r+0xea>
 800ce28:	602f      	str	r7, [r5, #0]
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e022      	b.n	800ce74 <__sflush_r+0xf8>
 800ce2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce32:	b21b      	sxth	r3, r3
 800ce34:	e01b      	b.n	800ce6e <__sflush_r+0xf2>
 800ce36:	690f      	ldr	r7, [r1, #16]
 800ce38:	2f00      	cmp	r7, #0
 800ce3a:	d0f6      	beq.n	800ce2a <__sflush_r+0xae>
 800ce3c:	0793      	lsls	r3, r2, #30
 800ce3e:	680e      	ldr	r6, [r1, #0]
 800ce40:	bf08      	it	eq
 800ce42:	694b      	ldreq	r3, [r1, #20]
 800ce44:	600f      	str	r7, [r1, #0]
 800ce46:	bf18      	it	ne
 800ce48:	2300      	movne	r3, #0
 800ce4a:	eba6 0807 	sub.w	r8, r6, r7
 800ce4e:	608b      	str	r3, [r1, #8]
 800ce50:	f1b8 0f00 	cmp.w	r8, #0
 800ce54:	dde9      	ble.n	800ce2a <__sflush_r+0xae>
 800ce56:	6a21      	ldr	r1, [r4, #32]
 800ce58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce5a:	4643      	mov	r3, r8
 800ce5c:	463a      	mov	r2, r7
 800ce5e:	4628      	mov	r0, r5
 800ce60:	47b0      	blx	r6
 800ce62:	2800      	cmp	r0, #0
 800ce64:	dc08      	bgt.n	800ce78 <__sflush_r+0xfc>
 800ce66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce6e:	81a3      	strh	r3, [r4, #12]
 800ce70:	f04f 30ff 	mov.w	r0, #4294967295
 800ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce78:	4407      	add	r7, r0
 800ce7a:	eba8 0800 	sub.w	r8, r8, r0
 800ce7e:	e7e7      	b.n	800ce50 <__sflush_r+0xd4>
 800ce80:	dfbffffe 	.word	0xdfbffffe

0800ce84 <_fflush_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	690b      	ldr	r3, [r1, #16]
 800ce88:	4605      	mov	r5, r0
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	b913      	cbnz	r3, 800ce94 <_fflush_r+0x10>
 800ce8e:	2500      	movs	r5, #0
 800ce90:	4628      	mov	r0, r5
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	b118      	cbz	r0, 800ce9e <_fflush_r+0x1a>
 800ce96:	6a03      	ldr	r3, [r0, #32]
 800ce98:	b90b      	cbnz	r3, 800ce9e <_fflush_r+0x1a>
 800ce9a:	f7fd fa55 	bl	800a348 <__sinit>
 800ce9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d0f3      	beq.n	800ce8e <_fflush_r+0xa>
 800cea6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cea8:	07d0      	lsls	r0, r2, #31
 800ceaa:	d404      	bmi.n	800ceb6 <_fflush_r+0x32>
 800ceac:	0599      	lsls	r1, r3, #22
 800ceae:	d402      	bmi.n	800ceb6 <_fflush_r+0x32>
 800ceb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceb2:	f7fd fb72 	bl	800a59a <__retarget_lock_acquire_recursive>
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	4621      	mov	r1, r4
 800ceba:	f7ff ff5f 	bl	800cd7c <__sflush_r>
 800cebe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cec0:	07da      	lsls	r2, r3, #31
 800cec2:	4605      	mov	r5, r0
 800cec4:	d4e4      	bmi.n	800ce90 <_fflush_r+0xc>
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	059b      	lsls	r3, r3, #22
 800ceca:	d4e1      	bmi.n	800ce90 <_fflush_r+0xc>
 800cecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cece:	f7fd fb65 	bl	800a59c <__retarget_lock_release_recursive>
 800ced2:	e7dd      	b.n	800ce90 <_fflush_r+0xc>

0800ced4 <memmove>:
 800ced4:	4288      	cmp	r0, r1
 800ced6:	b510      	push	{r4, lr}
 800ced8:	eb01 0402 	add.w	r4, r1, r2
 800cedc:	d902      	bls.n	800cee4 <memmove+0x10>
 800cede:	4284      	cmp	r4, r0
 800cee0:	4623      	mov	r3, r4
 800cee2:	d807      	bhi.n	800cef4 <memmove+0x20>
 800cee4:	1e43      	subs	r3, r0, #1
 800cee6:	42a1      	cmp	r1, r4
 800cee8:	d008      	beq.n	800cefc <memmove+0x28>
 800ceea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cef2:	e7f8      	b.n	800cee6 <memmove+0x12>
 800cef4:	4402      	add	r2, r0
 800cef6:	4601      	mov	r1, r0
 800cef8:	428a      	cmp	r2, r1
 800cefa:	d100      	bne.n	800cefe <memmove+0x2a>
 800cefc:	bd10      	pop	{r4, pc}
 800cefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf06:	e7f7      	b.n	800cef8 <memmove+0x24>

0800cf08 <strncmp>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	b16a      	cbz	r2, 800cf28 <strncmp+0x20>
 800cf0c:	3901      	subs	r1, #1
 800cf0e:	1884      	adds	r4, r0, r2
 800cf10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d103      	bne.n	800cf24 <strncmp+0x1c>
 800cf1c:	42a0      	cmp	r0, r4
 800cf1e:	d001      	beq.n	800cf24 <strncmp+0x1c>
 800cf20:	2a00      	cmp	r2, #0
 800cf22:	d1f5      	bne.n	800cf10 <strncmp+0x8>
 800cf24:	1ad0      	subs	r0, r2, r3
 800cf26:	bd10      	pop	{r4, pc}
 800cf28:	4610      	mov	r0, r2
 800cf2a:	e7fc      	b.n	800cf26 <strncmp+0x1e>

0800cf2c <_sbrk_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d06      	ldr	r5, [pc, #24]	@ (800cf48 <_sbrk_r+0x1c>)
 800cf30:	2300      	movs	r3, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	602b      	str	r3, [r5, #0]
 800cf38:	f7f5 fc3a 	bl	80027b0 <_sbrk>
 800cf3c:	1c43      	adds	r3, r0, #1
 800cf3e:	d102      	bne.n	800cf46 <_sbrk_r+0x1a>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	b103      	cbz	r3, 800cf46 <_sbrk_r+0x1a>
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	bd38      	pop	{r3, r4, r5, pc}
 800cf48:	20004f3c 	.word	0x20004f3c
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <nan>:
 800cf50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cf58 <nan+0x8>
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	00000000 	.word	0x00000000
 800cf5c:	7ff80000 	.word	0x7ff80000

0800cf60 <__assert_func>:
 800cf60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf62:	4614      	mov	r4, r2
 800cf64:	461a      	mov	r2, r3
 800cf66:	4b09      	ldr	r3, [pc, #36]	@ (800cf8c <__assert_func+0x2c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	68d8      	ldr	r0, [r3, #12]
 800cf6e:	b954      	cbnz	r4, 800cf86 <__assert_func+0x26>
 800cf70:	4b07      	ldr	r3, [pc, #28]	@ (800cf90 <__assert_func+0x30>)
 800cf72:	461c      	mov	r4, r3
 800cf74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf78:	9100      	str	r1, [sp, #0]
 800cf7a:	462b      	mov	r3, r5
 800cf7c:	4905      	ldr	r1, [pc, #20]	@ (800cf94 <__assert_func+0x34>)
 800cf7e:	f000 fba7 	bl	800d6d0 <fiprintf>
 800cf82:	f000 fbb7 	bl	800d6f4 <abort>
 800cf86:	4b04      	ldr	r3, [pc, #16]	@ (800cf98 <__assert_func+0x38>)
 800cf88:	e7f4      	b.n	800cf74 <__assert_func+0x14>
 800cf8a:	bf00      	nop
 800cf8c:	2000002c 	.word	0x2000002c
 800cf90:	0800f63d 	.word	0x0800f63d
 800cf94:	0800f60f 	.word	0x0800f60f
 800cf98:	0800f602 	.word	0x0800f602

0800cf9c <_calloc_r>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	fba1 5402 	umull	r5, r4, r1, r2
 800cfa2:	b93c      	cbnz	r4, 800cfb4 <_calloc_r+0x18>
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7fe f9cf 	bl	800b348 <_malloc_r>
 800cfaa:	4606      	mov	r6, r0
 800cfac:	b928      	cbnz	r0, 800cfba <_calloc_r+0x1e>
 800cfae:	2600      	movs	r6, #0
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	220c      	movs	r2, #12
 800cfb6:	6002      	str	r2, [r0, #0]
 800cfb8:	e7f9      	b.n	800cfae <_calloc_r+0x12>
 800cfba:	462a      	mov	r2, r5
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	f7fd fa5c 	bl	800a47a <memset>
 800cfc2:	e7f5      	b.n	800cfb0 <_calloc_r+0x14>

0800cfc4 <rshift>:
 800cfc4:	6903      	ldr	r3, [r0, #16]
 800cfc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cfca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cfd2:	f100 0414 	add.w	r4, r0, #20
 800cfd6:	dd45      	ble.n	800d064 <rshift+0xa0>
 800cfd8:	f011 011f 	ands.w	r1, r1, #31
 800cfdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cfe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cfe4:	d10c      	bne.n	800d000 <rshift+0x3c>
 800cfe6:	f100 0710 	add.w	r7, r0, #16
 800cfea:	4629      	mov	r1, r5
 800cfec:	42b1      	cmp	r1, r6
 800cfee:	d334      	bcc.n	800d05a <rshift+0x96>
 800cff0:	1a9b      	subs	r3, r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	1eea      	subs	r2, r5, #3
 800cff6:	4296      	cmp	r6, r2
 800cff8:	bf38      	it	cc
 800cffa:	2300      	movcc	r3, #0
 800cffc:	4423      	add	r3, r4
 800cffe:	e015      	b.n	800d02c <rshift+0x68>
 800d000:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d004:	f1c1 0820 	rsb	r8, r1, #32
 800d008:	40cf      	lsrs	r7, r1
 800d00a:	f105 0e04 	add.w	lr, r5, #4
 800d00e:	46a1      	mov	r9, r4
 800d010:	4576      	cmp	r6, lr
 800d012:	46f4      	mov	ip, lr
 800d014:	d815      	bhi.n	800d042 <rshift+0x7e>
 800d016:	1a9a      	subs	r2, r3, r2
 800d018:	0092      	lsls	r2, r2, #2
 800d01a:	3a04      	subs	r2, #4
 800d01c:	3501      	adds	r5, #1
 800d01e:	42ae      	cmp	r6, r5
 800d020:	bf38      	it	cc
 800d022:	2200      	movcc	r2, #0
 800d024:	18a3      	adds	r3, r4, r2
 800d026:	50a7      	str	r7, [r4, r2]
 800d028:	b107      	cbz	r7, 800d02c <rshift+0x68>
 800d02a:	3304      	adds	r3, #4
 800d02c:	1b1a      	subs	r2, r3, r4
 800d02e:	42a3      	cmp	r3, r4
 800d030:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d034:	bf08      	it	eq
 800d036:	2300      	moveq	r3, #0
 800d038:	6102      	str	r2, [r0, #16]
 800d03a:	bf08      	it	eq
 800d03c:	6143      	streq	r3, [r0, #20]
 800d03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d042:	f8dc c000 	ldr.w	ip, [ip]
 800d046:	fa0c fc08 	lsl.w	ip, ip, r8
 800d04a:	ea4c 0707 	orr.w	r7, ip, r7
 800d04e:	f849 7b04 	str.w	r7, [r9], #4
 800d052:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d056:	40cf      	lsrs	r7, r1
 800d058:	e7da      	b.n	800d010 <rshift+0x4c>
 800d05a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d05e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d062:	e7c3      	b.n	800cfec <rshift+0x28>
 800d064:	4623      	mov	r3, r4
 800d066:	e7e1      	b.n	800d02c <rshift+0x68>

0800d068 <__hexdig_fun>:
 800d068:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d06c:	2b09      	cmp	r3, #9
 800d06e:	d802      	bhi.n	800d076 <__hexdig_fun+0xe>
 800d070:	3820      	subs	r0, #32
 800d072:	b2c0      	uxtb	r0, r0
 800d074:	4770      	bx	lr
 800d076:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d07a:	2b05      	cmp	r3, #5
 800d07c:	d801      	bhi.n	800d082 <__hexdig_fun+0x1a>
 800d07e:	3847      	subs	r0, #71	@ 0x47
 800d080:	e7f7      	b.n	800d072 <__hexdig_fun+0xa>
 800d082:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d086:	2b05      	cmp	r3, #5
 800d088:	d801      	bhi.n	800d08e <__hexdig_fun+0x26>
 800d08a:	3827      	subs	r0, #39	@ 0x27
 800d08c:	e7f1      	b.n	800d072 <__hexdig_fun+0xa>
 800d08e:	2000      	movs	r0, #0
 800d090:	4770      	bx	lr
	...

0800d094 <__gethex>:
 800d094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d098:	b085      	sub	sp, #20
 800d09a:	468a      	mov	sl, r1
 800d09c:	9302      	str	r3, [sp, #8]
 800d09e:	680b      	ldr	r3, [r1, #0]
 800d0a0:	9001      	str	r0, [sp, #4]
 800d0a2:	4690      	mov	r8, r2
 800d0a4:	1c9c      	adds	r4, r3, #2
 800d0a6:	46a1      	mov	r9, r4
 800d0a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d0ac:	2830      	cmp	r0, #48	@ 0x30
 800d0ae:	d0fa      	beq.n	800d0a6 <__gethex+0x12>
 800d0b0:	eba9 0303 	sub.w	r3, r9, r3
 800d0b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d0b8:	f7ff ffd6 	bl	800d068 <__hexdig_fun>
 800d0bc:	4605      	mov	r5, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d168      	bne.n	800d194 <__gethex+0x100>
 800d0c2:	49a0      	ldr	r1, [pc, #640]	@ (800d344 <__gethex+0x2b0>)
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	4648      	mov	r0, r9
 800d0c8:	f7ff ff1e 	bl	800cf08 <strncmp>
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d167      	bne.n	800d1a2 <__gethex+0x10e>
 800d0d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d0d6:	4626      	mov	r6, r4
 800d0d8:	f7ff ffc6 	bl	800d068 <__hexdig_fun>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d062      	beq.n	800d1a6 <__gethex+0x112>
 800d0e0:	4623      	mov	r3, r4
 800d0e2:	7818      	ldrb	r0, [r3, #0]
 800d0e4:	2830      	cmp	r0, #48	@ 0x30
 800d0e6:	4699      	mov	r9, r3
 800d0e8:	f103 0301 	add.w	r3, r3, #1
 800d0ec:	d0f9      	beq.n	800d0e2 <__gethex+0x4e>
 800d0ee:	f7ff ffbb 	bl	800d068 <__hexdig_fun>
 800d0f2:	fab0 f580 	clz	r5, r0
 800d0f6:	096d      	lsrs	r5, r5, #5
 800d0f8:	f04f 0b01 	mov.w	fp, #1
 800d0fc:	464a      	mov	r2, r9
 800d0fe:	4616      	mov	r6, r2
 800d100:	3201      	adds	r2, #1
 800d102:	7830      	ldrb	r0, [r6, #0]
 800d104:	f7ff ffb0 	bl	800d068 <__hexdig_fun>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d1f8      	bne.n	800d0fe <__gethex+0x6a>
 800d10c:	498d      	ldr	r1, [pc, #564]	@ (800d344 <__gethex+0x2b0>)
 800d10e:	2201      	movs	r2, #1
 800d110:	4630      	mov	r0, r6
 800d112:	f7ff fef9 	bl	800cf08 <strncmp>
 800d116:	2800      	cmp	r0, #0
 800d118:	d13f      	bne.n	800d19a <__gethex+0x106>
 800d11a:	b944      	cbnz	r4, 800d12e <__gethex+0x9a>
 800d11c:	1c74      	adds	r4, r6, #1
 800d11e:	4622      	mov	r2, r4
 800d120:	4616      	mov	r6, r2
 800d122:	3201      	adds	r2, #1
 800d124:	7830      	ldrb	r0, [r6, #0]
 800d126:	f7ff ff9f 	bl	800d068 <__hexdig_fun>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d1f8      	bne.n	800d120 <__gethex+0x8c>
 800d12e:	1ba4      	subs	r4, r4, r6
 800d130:	00a7      	lsls	r7, r4, #2
 800d132:	7833      	ldrb	r3, [r6, #0]
 800d134:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d138:	2b50      	cmp	r3, #80	@ 0x50
 800d13a:	d13e      	bne.n	800d1ba <__gethex+0x126>
 800d13c:	7873      	ldrb	r3, [r6, #1]
 800d13e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d140:	d033      	beq.n	800d1aa <__gethex+0x116>
 800d142:	2b2d      	cmp	r3, #45	@ 0x2d
 800d144:	d034      	beq.n	800d1b0 <__gethex+0x11c>
 800d146:	1c71      	adds	r1, r6, #1
 800d148:	2400      	movs	r4, #0
 800d14a:	7808      	ldrb	r0, [r1, #0]
 800d14c:	f7ff ff8c 	bl	800d068 <__hexdig_fun>
 800d150:	1e43      	subs	r3, r0, #1
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b18      	cmp	r3, #24
 800d156:	d830      	bhi.n	800d1ba <__gethex+0x126>
 800d158:	f1a0 0210 	sub.w	r2, r0, #16
 800d15c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d160:	f7ff ff82 	bl	800d068 <__hexdig_fun>
 800d164:	f100 3cff 	add.w	ip, r0, #4294967295
 800d168:	fa5f fc8c 	uxtb.w	ip, ip
 800d16c:	f1bc 0f18 	cmp.w	ip, #24
 800d170:	f04f 030a 	mov.w	r3, #10
 800d174:	d91e      	bls.n	800d1b4 <__gethex+0x120>
 800d176:	b104      	cbz	r4, 800d17a <__gethex+0xe6>
 800d178:	4252      	negs	r2, r2
 800d17a:	4417      	add	r7, r2
 800d17c:	f8ca 1000 	str.w	r1, [sl]
 800d180:	b1ed      	cbz	r5, 800d1be <__gethex+0x12a>
 800d182:	f1bb 0f00 	cmp.w	fp, #0
 800d186:	bf0c      	ite	eq
 800d188:	2506      	moveq	r5, #6
 800d18a:	2500      	movne	r5, #0
 800d18c:	4628      	mov	r0, r5
 800d18e:	b005      	add	sp, #20
 800d190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d194:	2500      	movs	r5, #0
 800d196:	462c      	mov	r4, r5
 800d198:	e7b0      	b.n	800d0fc <__gethex+0x68>
 800d19a:	2c00      	cmp	r4, #0
 800d19c:	d1c7      	bne.n	800d12e <__gethex+0x9a>
 800d19e:	4627      	mov	r7, r4
 800d1a0:	e7c7      	b.n	800d132 <__gethex+0x9e>
 800d1a2:	464e      	mov	r6, r9
 800d1a4:	462f      	mov	r7, r5
 800d1a6:	2501      	movs	r5, #1
 800d1a8:	e7c3      	b.n	800d132 <__gethex+0x9e>
 800d1aa:	2400      	movs	r4, #0
 800d1ac:	1cb1      	adds	r1, r6, #2
 800d1ae:	e7cc      	b.n	800d14a <__gethex+0xb6>
 800d1b0:	2401      	movs	r4, #1
 800d1b2:	e7fb      	b.n	800d1ac <__gethex+0x118>
 800d1b4:	fb03 0002 	mla	r0, r3, r2, r0
 800d1b8:	e7ce      	b.n	800d158 <__gethex+0xc4>
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	e7de      	b.n	800d17c <__gethex+0xe8>
 800d1be:	eba6 0309 	sub.w	r3, r6, r9
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	2b07      	cmp	r3, #7
 800d1c8:	dc0a      	bgt.n	800d1e0 <__gethex+0x14c>
 800d1ca:	9801      	ldr	r0, [sp, #4]
 800d1cc:	f7fe f948 	bl	800b460 <_Balloc>
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	b940      	cbnz	r0, 800d1e6 <__gethex+0x152>
 800d1d4:	4b5c      	ldr	r3, [pc, #368]	@ (800d348 <__gethex+0x2b4>)
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	21e4      	movs	r1, #228	@ 0xe4
 800d1da:	485c      	ldr	r0, [pc, #368]	@ (800d34c <__gethex+0x2b8>)
 800d1dc:	f7ff fec0 	bl	800cf60 <__assert_func>
 800d1e0:	3101      	adds	r1, #1
 800d1e2:	105b      	asrs	r3, r3, #1
 800d1e4:	e7ef      	b.n	800d1c6 <__gethex+0x132>
 800d1e6:	f100 0a14 	add.w	sl, r0, #20
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4655      	mov	r5, sl
 800d1ee:	469b      	mov	fp, r3
 800d1f0:	45b1      	cmp	r9, r6
 800d1f2:	d337      	bcc.n	800d264 <__gethex+0x1d0>
 800d1f4:	f845 bb04 	str.w	fp, [r5], #4
 800d1f8:	eba5 050a 	sub.w	r5, r5, sl
 800d1fc:	10ad      	asrs	r5, r5, #2
 800d1fe:	6125      	str	r5, [r4, #16]
 800d200:	4658      	mov	r0, fp
 800d202:	f7fe fa1f 	bl	800b644 <__hi0bits>
 800d206:	016d      	lsls	r5, r5, #5
 800d208:	f8d8 6000 	ldr.w	r6, [r8]
 800d20c:	1a2d      	subs	r5, r5, r0
 800d20e:	42b5      	cmp	r5, r6
 800d210:	dd54      	ble.n	800d2bc <__gethex+0x228>
 800d212:	1bad      	subs	r5, r5, r6
 800d214:	4629      	mov	r1, r5
 800d216:	4620      	mov	r0, r4
 800d218:	f7fe fdb3 	bl	800bd82 <__any_on>
 800d21c:	4681      	mov	r9, r0
 800d21e:	b178      	cbz	r0, 800d240 <__gethex+0x1ac>
 800d220:	1e6b      	subs	r3, r5, #1
 800d222:	1159      	asrs	r1, r3, #5
 800d224:	f003 021f 	and.w	r2, r3, #31
 800d228:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d22c:	f04f 0901 	mov.w	r9, #1
 800d230:	fa09 f202 	lsl.w	r2, r9, r2
 800d234:	420a      	tst	r2, r1
 800d236:	d003      	beq.n	800d240 <__gethex+0x1ac>
 800d238:	454b      	cmp	r3, r9
 800d23a:	dc36      	bgt.n	800d2aa <__gethex+0x216>
 800d23c:	f04f 0902 	mov.w	r9, #2
 800d240:	4629      	mov	r1, r5
 800d242:	4620      	mov	r0, r4
 800d244:	f7ff febe 	bl	800cfc4 <rshift>
 800d248:	442f      	add	r7, r5
 800d24a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d24e:	42bb      	cmp	r3, r7
 800d250:	da42      	bge.n	800d2d8 <__gethex+0x244>
 800d252:	9801      	ldr	r0, [sp, #4]
 800d254:	4621      	mov	r1, r4
 800d256:	f7fe f943 	bl	800b4e0 <_Bfree>
 800d25a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d25c:	2300      	movs	r3, #0
 800d25e:	6013      	str	r3, [r2, #0]
 800d260:	25a3      	movs	r5, #163	@ 0xa3
 800d262:	e793      	b.n	800d18c <__gethex+0xf8>
 800d264:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d268:	2a2e      	cmp	r2, #46	@ 0x2e
 800d26a:	d012      	beq.n	800d292 <__gethex+0x1fe>
 800d26c:	2b20      	cmp	r3, #32
 800d26e:	d104      	bne.n	800d27a <__gethex+0x1e6>
 800d270:	f845 bb04 	str.w	fp, [r5], #4
 800d274:	f04f 0b00 	mov.w	fp, #0
 800d278:	465b      	mov	r3, fp
 800d27a:	7830      	ldrb	r0, [r6, #0]
 800d27c:	9303      	str	r3, [sp, #12]
 800d27e:	f7ff fef3 	bl	800d068 <__hexdig_fun>
 800d282:	9b03      	ldr	r3, [sp, #12]
 800d284:	f000 000f 	and.w	r0, r0, #15
 800d288:	4098      	lsls	r0, r3
 800d28a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d28e:	3304      	adds	r3, #4
 800d290:	e7ae      	b.n	800d1f0 <__gethex+0x15c>
 800d292:	45b1      	cmp	r9, r6
 800d294:	d8ea      	bhi.n	800d26c <__gethex+0x1d8>
 800d296:	492b      	ldr	r1, [pc, #172]	@ (800d344 <__gethex+0x2b0>)
 800d298:	9303      	str	r3, [sp, #12]
 800d29a:	2201      	movs	r2, #1
 800d29c:	4630      	mov	r0, r6
 800d29e:	f7ff fe33 	bl	800cf08 <strncmp>
 800d2a2:	9b03      	ldr	r3, [sp, #12]
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d1e1      	bne.n	800d26c <__gethex+0x1d8>
 800d2a8:	e7a2      	b.n	800d1f0 <__gethex+0x15c>
 800d2aa:	1ea9      	subs	r1, r5, #2
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f7fe fd68 	bl	800bd82 <__any_on>
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	d0c2      	beq.n	800d23c <__gethex+0x1a8>
 800d2b6:	f04f 0903 	mov.w	r9, #3
 800d2ba:	e7c1      	b.n	800d240 <__gethex+0x1ac>
 800d2bc:	da09      	bge.n	800d2d2 <__gethex+0x23e>
 800d2be:	1b75      	subs	r5, r6, r5
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	9801      	ldr	r0, [sp, #4]
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	f7fe fb23 	bl	800b910 <__lshift>
 800d2ca:	1b7f      	subs	r7, r7, r5
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	f100 0a14 	add.w	sl, r0, #20
 800d2d2:	f04f 0900 	mov.w	r9, #0
 800d2d6:	e7b8      	b.n	800d24a <__gethex+0x1b6>
 800d2d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d2dc:	42bd      	cmp	r5, r7
 800d2de:	dd6f      	ble.n	800d3c0 <__gethex+0x32c>
 800d2e0:	1bed      	subs	r5, r5, r7
 800d2e2:	42ae      	cmp	r6, r5
 800d2e4:	dc34      	bgt.n	800d350 <__gethex+0x2bc>
 800d2e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d022      	beq.n	800d334 <__gethex+0x2a0>
 800d2ee:	2b03      	cmp	r3, #3
 800d2f0:	d024      	beq.n	800d33c <__gethex+0x2a8>
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d115      	bne.n	800d322 <__gethex+0x28e>
 800d2f6:	42ae      	cmp	r6, r5
 800d2f8:	d113      	bne.n	800d322 <__gethex+0x28e>
 800d2fa:	2e01      	cmp	r6, #1
 800d2fc:	d10b      	bne.n	800d316 <__gethex+0x282>
 800d2fe:	9a02      	ldr	r2, [sp, #8]
 800d300:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d304:	6013      	str	r3, [r2, #0]
 800d306:	2301      	movs	r3, #1
 800d308:	6123      	str	r3, [r4, #16]
 800d30a:	f8ca 3000 	str.w	r3, [sl]
 800d30e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d310:	2562      	movs	r5, #98	@ 0x62
 800d312:	601c      	str	r4, [r3, #0]
 800d314:	e73a      	b.n	800d18c <__gethex+0xf8>
 800d316:	1e71      	subs	r1, r6, #1
 800d318:	4620      	mov	r0, r4
 800d31a:	f7fe fd32 	bl	800bd82 <__any_on>
 800d31e:	2800      	cmp	r0, #0
 800d320:	d1ed      	bne.n	800d2fe <__gethex+0x26a>
 800d322:	9801      	ldr	r0, [sp, #4]
 800d324:	4621      	mov	r1, r4
 800d326:	f7fe f8db 	bl	800b4e0 <_Bfree>
 800d32a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d32c:	2300      	movs	r3, #0
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	2550      	movs	r5, #80	@ 0x50
 800d332:	e72b      	b.n	800d18c <__gethex+0xf8>
 800d334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1f3      	bne.n	800d322 <__gethex+0x28e>
 800d33a:	e7e0      	b.n	800d2fe <__gethex+0x26a>
 800d33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1dd      	bne.n	800d2fe <__gethex+0x26a>
 800d342:	e7ee      	b.n	800d322 <__gethex+0x28e>
 800d344:	0800f490 	.word	0x0800f490
 800d348:	0800f325 	.word	0x0800f325
 800d34c:	0800f63e 	.word	0x0800f63e
 800d350:	1e6f      	subs	r7, r5, #1
 800d352:	f1b9 0f00 	cmp.w	r9, #0
 800d356:	d130      	bne.n	800d3ba <__gethex+0x326>
 800d358:	b127      	cbz	r7, 800d364 <__gethex+0x2d0>
 800d35a:	4639      	mov	r1, r7
 800d35c:	4620      	mov	r0, r4
 800d35e:	f7fe fd10 	bl	800bd82 <__any_on>
 800d362:	4681      	mov	r9, r0
 800d364:	117a      	asrs	r2, r7, #5
 800d366:	2301      	movs	r3, #1
 800d368:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d36c:	f007 071f 	and.w	r7, r7, #31
 800d370:	40bb      	lsls	r3, r7
 800d372:	4213      	tst	r3, r2
 800d374:	4629      	mov	r1, r5
 800d376:	4620      	mov	r0, r4
 800d378:	bf18      	it	ne
 800d37a:	f049 0902 	orrne.w	r9, r9, #2
 800d37e:	f7ff fe21 	bl	800cfc4 <rshift>
 800d382:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d386:	1b76      	subs	r6, r6, r5
 800d388:	2502      	movs	r5, #2
 800d38a:	f1b9 0f00 	cmp.w	r9, #0
 800d38e:	d047      	beq.n	800d420 <__gethex+0x38c>
 800d390:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d015      	beq.n	800d3c4 <__gethex+0x330>
 800d398:	2b03      	cmp	r3, #3
 800d39a:	d017      	beq.n	800d3cc <__gethex+0x338>
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d109      	bne.n	800d3b4 <__gethex+0x320>
 800d3a0:	f019 0f02 	tst.w	r9, #2
 800d3a4:	d006      	beq.n	800d3b4 <__gethex+0x320>
 800d3a6:	f8da 3000 	ldr.w	r3, [sl]
 800d3aa:	ea49 0903 	orr.w	r9, r9, r3
 800d3ae:	f019 0f01 	tst.w	r9, #1
 800d3b2:	d10e      	bne.n	800d3d2 <__gethex+0x33e>
 800d3b4:	f045 0510 	orr.w	r5, r5, #16
 800d3b8:	e032      	b.n	800d420 <__gethex+0x38c>
 800d3ba:	f04f 0901 	mov.w	r9, #1
 800d3be:	e7d1      	b.n	800d364 <__gethex+0x2d0>
 800d3c0:	2501      	movs	r5, #1
 800d3c2:	e7e2      	b.n	800d38a <__gethex+0x2f6>
 800d3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3c6:	f1c3 0301 	rsb	r3, r3, #1
 800d3ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d0f0      	beq.n	800d3b4 <__gethex+0x320>
 800d3d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3d6:	f104 0314 	add.w	r3, r4, #20
 800d3da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d3de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d3e2:	f04f 0c00 	mov.w	ip, #0
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d3f0:	d01b      	beq.n	800d42a <__gethex+0x396>
 800d3f2:	3201      	adds	r2, #1
 800d3f4:	6002      	str	r2, [r0, #0]
 800d3f6:	2d02      	cmp	r5, #2
 800d3f8:	f104 0314 	add.w	r3, r4, #20
 800d3fc:	d13c      	bne.n	800d478 <__gethex+0x3e4>
 800d3fe:	f8d8 2000 	ldr.w	r2, [r8]
 800d402:	3a01      	subs	r2, #1
 800d404:	42b2      	cmp	r2, r6
 800d406:	d109      	bne.n	800d41c <__gethex+0x388>
 800d408:	1171      	asrs	r1, r6, #5
 800d40a:	2201      	movs	r2, #1
 800d40c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d410:	f006 061f 	and.w	r6, r6, #31
 800d414:	fa02 f606 	lsl.w	r6, r2, r6
 800d418:	421e      	tst	r6, r3
 800d41a:	d13a      	bne.n	800d492 <__gethex+0x3fe>
 800d41c:	f045 0520 	orr.w	r5, r5, #32
 800d420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d422:	601c      	str	r4, [r3, #0]
 800d424:	9b02      	ldr	r3, [sp, #8]
 800d426:	601f      	str	r7, [r3, #0]
 800d428:	e6b0      	b.n	800d18c <__gethex+0xf8>
 800d42a:	4299      	cmp	r1, r3
 800d42c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d430:	d8d9      	bhi.n	800d3e6 <__gethex+0x352>
 800d432:	68a3      	ldr	r3, [r4, #8]
 800d434:	459b      	cmp	fp, r3
 800d436:	db17      	blt.n	800d468 <__gethex+0x3d4>
 800d438:	6861      	ldr	r1, [r4, #4]
 800d43a:	9801      	ldr	r0, [sp, #4]
 800d43c:	3101      	adds	r1, #1
 800d43e:	f7fe f80f 	bl	800b460 <_Balloc>
 800d442:	4681      	mov	r9, r0
 800d444:	b918      	cbnz	r0, 800d44e <__gethex+0x3ba>
 800d446:	4b1a      	ldr	r3, [pc, #104]	@ (800d4b0 <__gethex+0x41c>)
 800d448:	4602      	mov	r2, r0
 800d44a:	2184      	movs	r1, #132	@ 0x84
 800d44c:	e6c5      	b.n	800d1da <__gethex+0x146>
 800d44e:	6922      	ldr	r2, [r4, #16]
 800d450:	3202      	adds	r2, #2
 800d452:	f104 010c 	add.w	r1, r4, #12
 800d456:	0092      	lsls	r2, r2, #2
 800d458:	300c      	adds	r0, #12
 800d45a:	f7fd f8a0 	bl	800a59e <memcpy>
 800d45e:	4621      	mov	r1, r4
 800d460:	9801      	ldr	r0, [sp, #4]
 800d462:	f7fe f83d 	bl	800b4e0 <_Bfree>
 800d466:	464c      	mov	r4, r9
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d470:	6122      	str	r2, [r4, #16]
 800d472:	2201      	movs	r2, #1
 800d474:	615a      	str	r2, [r3, #20]
 800d476:	e7be      	b.n	800d3f6 <__gethex+0x362>
 800d478:	6922      	ldr	r2, [r4, #16]
 800d47a:	455a      	cmp	r2, fp
 800d47c:	dd0b      	ble.n	800d496 <__gethex+0x402>
 800d47e:	2101      	movs	r1, #1
 800d480:	4620      	mov	r0, r4
 800d482:	f7ff fd9f 	bl	800cfc4 <rshift>
 800d486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d48a:	3701      	adds	r7, #1
 800d48c:	42bb      	cmp	r3, r7
 800d48e:	f6ff aee0 	blt.w	800d252 <__gethex+0x1be>
 800d492:	2501      	movs	r5, #1
 800d494:	e7c2      	b.n	800d41c <__gethex+0x388>
 800d496:	f016 061f 	ands.w	r6, r6, #31
 800d49a:	d0fa      	beq.n	800d492 <__gethex+0x3fe>
 800d49c:	4453      	add	r3, sl
 800d49e:	f1c6 0620 	rsb	r6, r6, #32
 800d4a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d4a6:	f7fe f8cd 	bl	800b644 <__hi0bits>
 800d4aa:	42b0      	cmp	r0, r6
 800d4ac:	dbe7      	blt.n	800d47e <__gethex+0x3ea>
 800d4ae:	e7f0      	b.n	800d492 <__gethex+0x3fe>
 800d4b0:	0800f325 	.word	0x0800f325

0800d4b4 <L_shift>:
 800d4b4:	f1c2 0208 	rsb	r2, r2, #8
 800d4b8:	0092      	lsls	r2, r2, #2
 800d4ba:	b570      	push	{r4, r5, r6, lr}
 800d4bc:	f1c2 0620 	rsb	r6, r2, #32
 800d4c0:	6843      	ldr	r3, [r0, #4]
 800d4c2:	6804      	ldr	r4, [r0, #0]
 800d4c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d4c8:	432c      	orrs	r4, r5
 800d4ca:	40d3      	lsrs	r3, r2
 800d4cc:	6004      	str	r4, [r0, #0]
 800d4ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4d2:	4288      	cmp	r0, r1
 800d4d4:	d3f4      	bcc.n	800d4c0 <L_shift+0xc>
 800d4d6:	bd70      	pop	{r4, r5, r6, pc}

0800d4d8 <__match>:
 800d4d8:	b530      	push	{r4, r5, lr}
 800d4da:	6803      	ldr	r3, [r0, #0]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4e2:	b914      	cbnz	r4, 800d4ea <__match+0x12>
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	bd30      	pop	{r4, r5, pc}
 800d4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d4f2:	2d19      	cmp	r5, #25
 800d4f4:	bf98      	it	ls
 800d4f6:	3220      	addls	r2, #32
 800d4f8:	42a2      	cmp	r2, r4
 800d4fa:	d0f0      	beq.n	800d4de <__match+0x6>
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	e7f3      	b.n	800d4e8 <__match+0x10>

0800d500 <__hexnan>:
 800d500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d504:	680b      	ldr	r3, [r1, #0]
 800d506:	6801      	ldr	r1, [r0, #0]
 800d508:	115e      	asrs	r6, r3, #5
 800d50a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d50e:	f013 031f 	ands.w	r3, r3, #31
 800d512:	b087      	sub	sp, #28
 800d514:	bf18      	it	ne
 800d516:	3604      	addne	r6, #4
 800d518:	2500      	movs	r5, #0
 800d51a:	1f37      	subs	r7, r6, #4
 800d51c:	4682      	mov	sl, r0
 800d51e:	4690      	mov	r8, r2
 800d520:	9301      	str	r3, [sp, #4]
 800d522:	f846 5c04 	str.w	r5, [r6, #-4]
 800d526:	46b9      	mov	r9, r7
 800d528:	463c      	mov	r4, r7
 800d52a:	9502      	str	r5, [sp, #8]
 800d52c:	46ab      	mov	fp, r5
 800d52e:	784a      	ldrb	r2, [r1, #1]
 800d530:	1c4b      	adds	r3, r1, #1
 800d532:	9303      	str	r3, [sp, #12]
 800d534:	b342      	cbz	r2, 800d588 <__hexnan+0x88>
 800d536:	4610      	mov	r0, r2
 800d538:	9105      	str	r1, [sp, #20]
 800d53a:	9204      	str	r2, [sp, #16]
 800d53c:	f7ff fd94 	bl	800d068 <__hexdig_fun>
 800d540:	2800      	cmp	r0, #0
 800d542:	d151      	bne.n	800d5e8 <__hexnan+0xe8>
 800d544:	9a04      	ldr	r2, [sp, #16]
 800d546:	9905      	ldr	r1, [sp, #20]
 800d548:	2a20      	cmp	r2, #32
 800d54a:	d818      	bhi.n	800d57e <__hexnan+0x7e>
 800d54c:	9b02      	ldr	r3, [sp, #8]
 800d54e:	459b      	cmp	fp, r3
 800d550:	dd13      	ble.n	800d57a <__hexnan+0x7a>
 800d552:	454c      	cmp	r4, r9
 800d554:	d206      	bcs.n	800d564 <__hexnan+0x64>
 800d556:	2d07      	cmp	r5, #7
 800d558:	dc04      	bgt.n	800d564 <__hexnan+0x64>
 800d55a:	462a      	mov	r2, r5
 800d55c:	4649      	mov	r1, r9
 800d55e:	4620      	mov	r0, r4
 800d560:	f7ff ffa8 	bl	800d4b4 <L_shift>
 800d564:	4544      	cmp	r4, r8
 800d566:	d952      	bls.n	800d60e <__hexnan+0x10e>
 800d568:	2300      	movs	r3, #0
 800d56a:	f1a4 0904 	sub.w	r9, r4, #4
 800d56e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d572:	f8cd b008 	str.w	fp, [sp, #8]
 800d576:	464c      	mov	r4, r9
 800d578:	461d      	mov	r5, r3
 800d57a:	9903      	ldr	r1, [sp, #12]
 800d57c:	e7d7      	b.n	800d52e <__hexnan+0x2e>
 800d57e:	2a29      	cmp	r2, #41	@ 0x29
 800d580:	d157      	bne.n	800d632 <__hexnan+0x132>
 800d582:	3102      	adds	r1, #2
 800d584:	f8ca 1000 	str.w	r1, [sl]
 800d588:	f1bb 0f00 	cmp.w	fp, #0
 800d58c:	d051      	beq.n	800d632 <__hexnan+0x132>
 800d58e:	454c      	cmp	r4, r9
 800d590:	d206      	bcs.n	800d5a0 <__hexnan+0xa0>
 800d592:	2d07      	cmp	r5, #7
 800d594:	dc04      	bgt.n	800d5a0 <__hexnan+0xa0>
 800d596:	462a      	mov	r2, r5
 800d598:	4649      	mov	r1, r9
 800d59a:	4620      	mov	r0, r4
 800d59c:	f7ff ff8a 	bl	800d4b4 <L_shift>
 800d5a0:	4544      	cmp	r4, r8
 800d5a2:	d936      	bls.n	800d612 <__hexnan+0x112>
 800d5a4:	f1a8 0204 	sub.w	r2, r8, #4
 800d5a8:	4623      	mov	r3, r4
 800d5aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d5ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800d5b2:	429f      	cmp	r7, r3
 800d5b4:	d2f9      	bcs.n	800d5aa <__hexnan+0xaa>
 800d5b6:	1b3b      	subs	r3, r7, r4
 800d5b8:	f023 0303 	bic.w	r3, r3, #3
 800d5bc:	3304      	adds	r3, #4
 800d5be:	3401      	adds	r4, #1
 800d5c0:	3e03      	subs	r6, #3
 800d5c2:	42b4      	cmp	r4, r6
 800d5c4:	bf88      	it	hi
 800d5c6:	2304      	movhi	r3, #4
 800d5c8:	4443      	add	r3, r8
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f843 2b04 	str.w	r2, [r3], #4
 800d5d0:	429f      	cmp	r7, r3
 800d5d2:	d2fb      	bcs.n	800d5cc <__hexnan+0xcc>
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	b91b      	cbnz	r3, 800d5e0 <__hexnan+0xe0>
 800d5d8:	4547      	cmp	r7, r8
 800d5da:	d128      	bne.n	800d62e <__hexnan+0x12e>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	603b      	str	r3, [r7, #0]
 800d5e0:	2005      	movs	r0, #5
 800d5e2:	b007      	add	sp, #28
 800d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e8:	3501      	adds	r5, #1
 800d5ea:	2d08      	cmp	r5, #8
 800d5ec:	f10b 0b01 	add.w	fp, fp, #1
 800d5f0:	dd06      	ble.n	800d600 <__hexnan+0x100>
 800d5f2:	4544      	cmp	r4, r8
 800d5f4:	d9c1      	bls.n	800d57a <__hexnan+0x7a>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5fc:	2501      	movs	r5, #1
 800d5fe:	3c04      	subs	r4, #4
 800d600:	6822      	ldr	r2, [r4, #0]
 800d602:	f000 000f 	and.w	r0, r0, #15
 800d606:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d60a:	6020      	str	r0, [r4, #0]
 800d60c:	e7b5      	b.n	800d57a <__hexnan+0x7a>
 800d60e:	2508      	movs	r5, #8
 800d610:	e7b3      	b.n	800d57a <__hexnan+0x7a>
 800d612:	9b01      	ldr	r3, [sp, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0dd      	beq.n	800d5d4 <__hexnan+0xd4>
 800d618:	f1c3 0320 	rsb	r3, r3, #32
 800d61c:	f04f 32ff 	mov.w	r2, #4294967295
 800d620:	40da      	lsrs	r2, r3
 800d622:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d626:	4013      	ands	r3, r2
 800d628:	f846 3c04 	str.w	r3, [r6, #-4]
 800d62c:	e7d2      	b.n	800d5d4 <__hexnan+0xd4>
 800d62e:	3f04      	subs	r7, #4
 800d630:	e7d0      	b.n	800d5d4 <__hexnan+0xd4>
 800d632:	2004      	movs	r0, #4
 800d634:	e7d5      	b.n	800d5e2 <__hexnan+0xe2>

0800d636 <__ascii_mbtowc>:
 800d636:	b082      	sub	sp, #8
 800d638:	b901      	cbnz	r1, 800d63c <__ascii_mbtowc+0x6>
 800d63a:	a901      	add	r1, sp, #4
 800d63c:	b142      	cbz	r2, 800d650 <__ascii_mbtowc+0x1a>
 800d63e:	b14b      	cbz	r3, 800d654 <__ascii_mbtowc+0x1e>
 800d640:	7813      	ldrb	r3, [r2, #0]
 800d642:	600b      	str	r3, [r1, #0]
 800d644:	7812      	ldrb	r2, [r2, #0]
 800d646:	1e10      	subs	r0, r2, #0
 800d648:	bf18      	it	ne
 800d64a:	2001      	movne	r0, #1
 800d64c:	b002      	add	sp, #8
 800d64e:	4770      	bx	lr
 800d650:	4610      	mov	r0, r2
 800d652:	e7fb      	b.n	800d64c <__ascii_mbtowc+0x16>
 800d654:	f06f 0001 	mvn.w	r0, #1
 800d658:	e7f8      	b.n	800d64c <__ascii_mbtowc+0x16>

0800d65a <_realloc_r>:
 800d65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d65e:	4680      	mov	r8, r0
 800d660:	4615      	mov	r5, r2
 800d662:	460c      	mov	r4, r1
 800d664:	b921      	cbnz	r1, 800d670 <_realloc_r+0x16>
 800d666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d66a:	4611      	mov	r1, r2
 800d66c:	f7fd be6c 	b.w	800b348 <_malloc_r>
 800d670:	b92a      	cbnz	r2, 800d67e <_realloc_r+0x24>
 800d672:	f7fd fdf5 	bl	800b260 <_free_r>
 800d676:	2400      	movs	r4, #0
 800d678:	4620      	mov	r0, r4
 800d67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67e:	f000 f840 	bl	800d702 <_malloc_usable_size_r>
 800d682:	4285      	cmp	r5, r0
 800d684:	4606      	mov	r6, r0
 800d686:	d802      	bhi.n	800d68e <_realloc_r+0x34>
 800d688:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d68c:	d8f4      	bhi.n	800d678 <_realloc_r+0x1e>
 800d68e:	4629      	mov	r1, r5
 800d690:	4640      	mov	r0, r8
 800d692:	f7fd fe59 	bl	800b348 <_malloc_r>
 800d696:	4607      	mov	r7, r0
 800d698:	2800      	cmp	r0, #0
 800d69a:	d0ec      	beq.n	800d676 <_realloc_r+0x1c>
 800d69c:	42b5      	cmp	r5, r6
 800d69e:	462a      	mov	r2, r5
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	bf28      	it	cs
 800d6a4:	4632      	movcs	r2, r6
 800d6a6:	f7fc ff7a 	bl	800a59e <memcpy>
 800d6aa:	4621      	mov	r1, r4
 800d6ac:	4640      	mov	r0, r8
 800d6ae:	f7fd fdd7 	bl	800b260 <_free_r>
 800d6b2:	463c      	mov	r4, r7
 800d6b4:	e7e0      	b.n	800d678 <_realloc_r+0x1e>

0800d6b6 <__ascii_wctomb>:
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	b141      	cbz	r1, 800d6ce <__ascii_wctomb+0x18>
 800d6bc:	2aff      	cmp	r2, #255	@ 0xff
 800d6be:	d904      	bls.n	800d6ca <__ascii_wctomb+0x14>
 800d6c0:	228a      	movs	r2, #138	@ 0x8a
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	4770      	bx	lr
 800d6ca:	700a      	strb	r2, [r1, #0]
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	4770      	bx	lr

0800d6d0 <fiprintf>:
 800d6d0:	b40e      	push	{r1, r2, r3}
 800d6d2:	b503      	push	{r0, r1, lr}
 800d6d4:	4601      	mov	r1, r0
 800d6d6:	ab03      	add	r3, sp, #12
 800d6d8:	4805      	ldr	r0, [pc, #20]	@ (800d6f0 <fiprintf+0x20>)
 800d6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6de:	6800      	ldr	r0, [r0, #0]
 800d6e0:	9301      	str	r3, [sp, #4]
 800d6e2:	f000 f83f 	bl	800d764 <_vfiprintf_r>
 800d6e6:	b002      	add	sp, #8
 800d6e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6ec:	b003      	add	sp, #12
 800d6ee:	4770      	bx	lr
 800d6f0:	2000002c 	.word	0x2000002c

0800d6f4 <abort>:
 800d6f4:	b508      	push	{r3, lr}
 800d6f6:	2006      	movs	r0, #6
 800d6f8:	f000 fa08 	bl	800db0c <raise>
 800d6fc:	2001      	movs	r0, #1
 800d6fe:	f7f4 ffdf 	bl	80026c0 <_exit>

0800d702 <_malloc_usable_size_r>:
 800d702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d706:	1f18      	subs	r0, r3, #4
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfbc      	itt	lt
 800d70c:	580b      	ldrlt	r3, [r1, r0]
 800d70e:	18c0      	addlt	r0, r0, r3
 800d710:	4770      	bx	lr

0800d712 <__sfputc_r>:
 800d712:	6893      	ldr	r3, [r2, #8]
 800d714:	3b01      	subs	r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	b410      	push	{r4}
 800d71a:	6093      	str	r3, [r2, #8]
 800d71c:	da08      	bge.n	800d730 <__sfputc_r+0x1e>
 800d71e:	6994      	ldr	r4, [r2, #24]
 800d720:	42a3      	cmp	r3, r4
 800d722:	db01      	blt.n	800d728 <__sfputc_r+0x16>
 800d724:	290a      	cmp	r1, #10
 800d726:	d103      	bne.n	800d730 <__sfputc_r+0x1e>
 800d728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d72c:	f000 b932 	b.w	800d994 <__swbuf_r>
 800d730:	6813      	ldr	r3, [r2, #0]
 800d732:	1c58      	adds	r0, r3, #1
 800d734:	6010      	str	r0, [r2, #0]
 800d736:	7019      	strb	r1, [r3, #0]
 800d738:	4608      	mov	r0, r1
 800d73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <__sfputs_r>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	4606      	mov	r6, r0
 800d744:	460f      	mov	r7, r1
 800d746:	4614      	mov	r4, r2
 800d748:	18d5      	adds	r5, r2, r3
 800d74a:	42ac      	cmp	r4, r5
 800d74c:	d101      	bne.n	800d752 <__sfputs_r+0x12>
 800d74e:	2000      	movs	r0, #0
 800d750:	e007      	b.n	800d762 <__sfputs_r+0x22>
 800d752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d756:	463a      	mov	r2, r7
 800d758:	4630      	mov	r0, r6
 800d75a:	f7ff ffda 	bl	800d712 <__sfputc_r>
 800d75e:	1c43      	adds	r3, r0, #1
 800d760:	d1f3      	bne.n	800d74a <__sfputs_r+0xa>
 800d762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d764 <_vfiprintf_r>:
 800d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	460d      	mov	r5, r1
 800d76a:	b09d      	sub	sp, #116	@ 0x74
 800d76c:	4614      	mov	r4, r2
 800d76e:	4698      	mov	r8, r3
 800d770:	4606      	mov	r6, r0
 800d772:	b118      	cbz	r0, 800d77c <_vfiprintf_r+0x18>
 800d774:	6a03      	ldr	r3, [r0, #32]
 800d776:	b90b      	cbnz	r3, 800d77c <_vfiprintf_r+0x18>
 800d778:	f7fc fde6 	bl	800a348 <__sinit>
 800d77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d77e:	07d9      	lsls	r1, r3, #31
 800d780:	d405      	bmi.n	800d78e <_vfiprintf_r+0x2a>
 800d782:	89ab      	ldrh	r3, [r5, #12]
 800d784:	059a      	lsls	r2, r3, #22
 800d786:	d402      	bmi.n	800d78e <_vfiprintf_r+0x2a>
 800d788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d78a:	f7fc ff06 	bl	800a59a <__retarget_lock_acquire_recursive>
 800d78e:	89ab      	ldrh	r3, [r5, #12]
 800d790:	071b      	lsls	r3, r3, #28
 800d792:	d501      	bpl.n	800d798 <_vfiprintf_r+0x34>
 800d794:	692b      	ldr	r3, [r5, #16]
 800d796:	b99b      	cbnz	r3, 800d7c0 <_vfiprintf_r+0x5c>
 800d798:	4629      	mov	r1, r5
 800d79a:	4630      	mov	r0, r6
 800d79c:	f000 f938 	bl	800da10 <__swsetup_r>
 800d7a0:	b170      	cbz	r0, 800d7c0 <_vfiprintf_r+0x5c>
 800d7a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7a4:	07dc      	lsls	r4, r3, #31
 800d7a6:	d504      	bpl.n	800d7b2 <_vfiprintf_r+0x4e>
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ac:	b01d      	add	sp, #116	@ 0x74
 800d7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b2:	89ab      	ldrh	r3, [r5, #12]
 800d7b4:	0598      	lsls	r0, r3, #22
 800d7b6:	d4f7      	bmi.n	800d7a8 <_vfiprintf_r+0x44>
 800d7b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7ba:	f7fc feef 	bl	800a59c <__retarget_lock_release_recursive>
 800d7be:	e7f3      	b.n	800d7a8 <_vfiprintf_r+0x44>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7c4:	2320      	movs	r3, #32
 800d7c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7ce:	2330      	movs	r3, #48	@ 0x30
 800d7d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d980 <_vfiprintf_r+0x21c>
 800d7d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7d8:	f04f 0901 	mov.w	r9, #1
 800d7dc:	4623      	mov	r3, r4
 800d7de:	469a      	mov	sl, r3
 800d7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7e4:	b10a      	cbz	r2, 800d7ea <_vfiprintf_r+0x86>
 800d7e6:	2a25      	cmp	r2, #37	@ 0x25
 800d7e8:	d1f9      	bne.n	800d7de <_vfiprintf_r+0x7a>
 800d7ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d7ee:	d00b      	beq.n	800d808 <_vfiprintf_r+0xa4>
 800d7f0:	465b      	mov	r3, fp
 800d7f2:	4622      	mov	r2, r4
 800d7f4:	4629      	mov	r1, r5
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f7ff ffa2 	bl	800d740 <__sfputs_r>
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	f000 80a7 	beq.w	800d950 <_vfiprintf_r+0x1ec>
 800d802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d804:	445a      	add	r2, fp
 800d806:	9209      	str	r2, [sp, #36]	@ 0x24
 800d808:	f89a 3000 	ldrb.w	r3, [sl]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 809f 	beq.w	800d950 <_vfiprintf_r+0x1ec>
 800d812:	2300      	movs	r3, #0
 800d814:	f04f 32ff 	mov.w	r2, #4294967295
 800d818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d81c:	f10a 0a01 	add.w	sl, sl, #1
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	9307      	str	r3, [sp, #28]
 800d824:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d828:	931a      	str	r3, [sp, #104]	@ 0x68
 800d82a:	4654      	mov	r4, sl
 800d82c:	2205      	movs	r2, #5
 800d82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d832:	4853      	ldr	r0, [pc, #332]	@ (800d980 <_vfiprintf_r+0x21c>)
 800d834:	f7f2 fcd4 	bl	80001e0 <memchr>
 800d838:	9a04      	ldr	r2, [sp, #16]
 800d83a:	b9d8      	cbnz	r0, 800d874 <_vfiprintf_r+0x110>
 800d83c:	06d1      	lsls	r1, r2, #27
 800d83e:	bf44      	itt	mi
 800d840:	2320      	movmi	r3, #32
 800d842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d846:	0713      	lsls	r3, r2, #28
 800d848:	bf44      	itt	mi
 800d84a:	232b      	movmi	r3, #43	@ 0x2b
 800d84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d850:	f89a 3000 	ldrb.w	r3, [sl]
 800d854:	2b2a      	cmp	r3, #42	@ 0x2a
 800d856:	d015      	beq.n	800d884 <_vfiprintf_r+0x120>
 800d858:	9a07      	ldr	r2, [sp, #28]
 800d85a:	4654      	mov	r4, sl
 800d85c:	2000      	movs	r0, #0
 800d85e:	f04f 0c0a 	mov.w	ip, #10
 800d862:	4621      	mov	r1, r4
 800d864:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d868:	3b30      	subs	r3, #48	@ 0x30
 800d86a:	2b09      	cmp	r3, #9
 800d86c:	d94b      	bls.n	800d906 <_vfiprintf_r+0x1a2>
 800d86e:	b1b0      	cbz	r0, 800d89e <_vfiprintf_r+0x13a>
 800d870:	9207      	str	r2, [sp, #28]
 800d872:	e014      	b.n	800d89e <_vfiprintf_r+0x13a>
 800d874:	eba0 0308 	sub.w	r3, r0, r8
 800d878:	fa09 f303 	lsl.w	r3, r9, r3
 800d87c:	4313      	orrs	r3, r2
 800d87e:	9304      	str	r3, [sp, #16]
 800d880:	46a2      	mov	sl, r4
 800d882:	e7d2      	b.n	800d82a <_vfiprintf_r+0xc6>
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	1d19      	adds	r1, r3, #4
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	9103      	str	r1, [sp, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	bfbb      	ittet	lt
 800d890:	425b      	neglt	r3, r3
 800d892:	f042 0202 	orrlt.w	r2, r2, #2
 800d896:	9307      	strge	r3, [sp, #28]
 800d898:	9307      	strlt	r3, [sp, #28]
 800d89a:	bfb8      	it	lt
 800d89c:	9204      	strlt	r2, [sp, #16]
 800d89e:	7823      	ldrb	r3, [r4, #0]
 800d8a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8a2:	d10a      	bne.n	800d8ba <_vfiprintf_r+0x156>
 800d8a4:	7863      	ldrb	r3, [r4, #1]
 800d8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8a8:	d132      	bne.n	800d910 <_vfiprintf_r+0x1ac>
 800d8aa:	9b03      	ldr	r3, [sp, #12]
 800d8ac:	1d1a      	adds	r2, r3, #4
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	9203      	str	r2, [sp, #12]
 800d8b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8b6:	3402      	adds	r4, #2
 800d8b8:	9305      	str	r3, [sp, #20]
 800d8ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d990 <_vfiprintf_r+0x22c>
 800d8be:	7821      	ldrb	r1, [r4, #0]
 800d8c0:	2203      	movs	r2, #3
 800d8c2:	4650      	mov	r0, sl
 800d8c4:	f7f2 fc8c 	bl	80001e0 <memchr>
 800d8c8:	b138      	cbz	r0, 800d8da <_vfiprintf_r+0x176>
 800d8ca:	9b04      	ldr	r3, [sp, #16]
 800d8cc:	eba0 000a 	sub.w	r0, r0, sl
 800d8d0:	2240      	movs	r2, #64	@ 0x40
 800d8d2:	4082      	lsls	r2, r0
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	3401      	adds	r4, #1
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8de:	4829      	ldr	r0, [pc, #164]	@ (800d984 <_vfiprintf_r+0x220>)
 800d8e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8e4:	2206      	movs	r2, #6
 800d8e6:	f7f2 fc7b 	bl	80001e0 <memchr>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d03f      	beq.n	800d96e <_vfiprintf_r+0x20a>
 800d8ee:	4b26      	ldr	r3, [pc, #152]	@ (800d988 <_vfiprintf_r+0x224>)
 800d8f0:	bb1b      	cbnz	r3, 800d93a <_vfiprintf_r+0x1d6>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	3307      	adds	r3, #7
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	9303      	str	r3, [sp, #12]
 800d8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d900:	443b      	add	r3, r7
 800d902:	9309      	str	r3, [sp, #36]	@ 0x24
 800d904:	e76a      	b.n	800d7dc <_vfiprintf_r+0x78>
 800d906:	fb0c 3202 	mla	r2, ip, r2, r3
 800d90a:	460c      	mov	r4, r1
 800d90c:	2001      	movs	r0, #1
 800d90e:	e7a8      	b.n	800d862 <_vfiprintf_r+0xfe>
 800d910:	2300      	movs	r3, #0
 800d912:	3401      	adds	r4, #1
 800d914:	9305      	str	r3, [sp, #20]
 800d916:	4619      	mov	r1, r3
 800d918:	f04f 0c0a 	mov.w	ip, #10
 800d91c:	4620      	mov	r0, r4
 800d91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d922:	3a30      	subs	r2, #48	@ 0x30
 800d924:	2a09      	cmp	r2, #9
 800d926:	d903      	bls.n	800d930 <_vfiprintf_r+0x1cc>
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0c6      	beq.n	800d8ba <_vfiprintf_r+0x156>
 800d92c:	9105      	str	r1, [sp, #20]
 800d92e:	e7c4      	b.n	800d8ba <_vfiprintf_r+0x156>
 800d930:	fb0c 2101 	mla	r1, ip, r1, r2
 800d934:	4604      	mov	r4, r0
 800d936:	2301      	movs	r3, #1
 800d938:	e7f0      	b.n	800d91c <_vfiprintf_r+0x1b8>
 800d93a:	ab03      	add	r3, sp, #12
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	462a      	mov	r2, r5
 800d940:	4b12      	ldr	r3, [pc, #72]	@ (800d98c <_vfiprintf_r+0x228>)
 800d942:	a904      	add	r1, sp, #16
 800d944:	4630      	mov	r0, r6
 800d946:	f7fb fea7 	bl	8009698 <_printf_float>
 800d94a:	4607      	mov	r7, r0
 800d94c:	1c78      	adds	r0, r7, #1
 800d94e:	d1d6      	bne.n	800d8fe <_vfiprintf_r+0x19a>
 800d950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d952:	07d9      	lsls	r1, r3, #31
 800d954:	d405      	bmi.n	800d962 <_vfiprintf_r+0x1fe>
 800d956:	89ab      	ldrh	r3, [r5, #12]
 800d958:	059a      	lsls	r2, r3, #22
 800d95a:	d402      	bmi.n	800d962 <_vfiprintf_r+0x1fe>
 800d95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d95e:	f7fc fe1d 	bl	800a59c <__retarget_lock_release_recursive>
 800d962:	89ab      	ldrh	r3, [r5, #12]
 800d964:	065b      	lsls	r3, r3, #25
 800d966:	f53f af1f 	bmi.w	800d7a8 <_vfiprintf_r+0x44>
 800d96a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d96c:	e71e      	b.n	800d7ac <_vfiprintf_r+0x48>
 800d96e:	ab03      	add	r3, sp, #12
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	462a      	mov	r2, r5
 800d974:	4b05      	ldr	r3, [pc, #20]	@ (800d98c <_vfiprintf_r+0x228>)
 800d976:	a904      	add	r1, sp, #16
 800d978:	4630      	mov	r0, r6
 800d97a:	f7fc f925 	bl	8009bc8 <_printf_i>
 800d97e:	e7e4      	b.n	800d94a <_vfiprintf_r+0x1e6>
 800d980:	0800f5e9 	.word	0x0800f5e9
 800d984:	0800f5f3 	.word	0x0800f5f3
 800d988:	08009699 	.word	0x08009699
 800d98c:	0800d741 	.word	0x0800d741
 800d990:	0800f5ef 	.word	0x0800f5ef

0800d994 <__swbuf_r>:
 800d994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d996:	460e      	mov	r6, r1
 800d998:	4614      	mov	r4, r2
 800d99a:	4605      	mov	r5, r0
 800d99c:	b118      	cbz	r0, 800d9a6 <__swbuf_r+0x12>
 800d99e:	6a03      	ldr	r3, [r0, #32]
 800d9a0:	b90b      	cbnz	r3, 800d9a6 <__swbuf_r+0x12>
 800d9a2:	f7fc fcd1 	bl	800a348 <__sinit>
 800d9a6:	69a3      	ldr	r3, [r4, #24]
 800d9a8:	60a3      	str	r3, [r4, #8]
 800d9aa:	89a3      	ldrh	r3, [r4, #12]
 800d9ac:	071a      	lsls	r2, r3, #28
 800d9ae:	d501      	bpl.n	800d9b4 <__swbuf_r+0x20>
 800d9b0:	6923      	ldr	r3, [r4, #16]
 800d9b2:	b943      	cbnz	r3, 800d9c6 <__swbuf_r+0x32>
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f000 f82a 	bl	800da10 <__swsetup_r>
 800d9bc:	b118      	cbz	r0, 800d9c6 <__swbuf_r+0x32>
 800d9be:	f04f 37ff 	mov.w	r7, #4294967295
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	6922      	ldr	r2, [r4, #16]
 800d9ca:	1a98      	subs	r0, r3, r2
 800d9cc:	6963      	ldr	r3, [r4, #20]
 800d9ce:	b2f6      	uxtb	r6, r6
 800d9d0:	4283      	cmp	r3, r0
 800d9d2:	4637      	mov	r7, r6
 800d9d4:	dc05      	bgt.n	800d9e2 <__swbuf_r+0x4e>
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	4628      	mov	r0, r5
 800d9da:	f7ff fa53 	bl	800ce84 <_fflush_r>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d1ed      	bne.n	800d9be <__swbuf_r+0x2a>
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	60a3      	str	r3, [r4, #8]
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	6022      	str	r2, [r4, #0]
 800d9ee:	701e      	strb	r6, [r3, #0]
 800d9f0:	6962      	ldr	r2, [r4, #20]
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d004      	beq.n	800da02 <__swbuf_r+0x6e>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	07db      	lsls	r3, r3, #31
 800d9fc:	d5e1      	bpl.n	800d9c2 <__swbuf_r+0x2e>
 800d9fe:	2e0a      	cmp	r6, #10
 800da00:	d1df      	bne.n	800d9c2 <__swbuf_r+0x2e>
 800da02:	4621      	mov	r1, r4
 800da04:	4628      	mov	r0, r5
 800da06:	f7ff fa3d 	bl	800ce84 <_fflush_r>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d0d9      	beq.n	800d9c2 <__swbuf_r+0x2e>
 800da0e:	e7d6      	b.n	800d9be <__swbuf_r+0x2a>

0800da10 <__swsetup_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4b29      	ldr	r3, [pc, #164]	@ (800dab8 <__swsetup_r+0xa8>)
 800da14:	4605      	mov	r5, r0
 800da16:	6818      	ldr	r0, [r3, #0]
 800da18:	460c      	mov	r4, r1
 800da1a:	b118      	cbz	r0, 800da24 <__swsetup_r+0x14>
 800da1c:	6a03      	ldr	r3, [r0, #32]
 800da1e:	b90b      	cbnz	r3, 800da24 <__swsetup_r+0x14>
 800da20:	f7fc fc92 	bl	800a348 <__sinit>
 800da24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da28:	0719      	lsls	r1, r3, #28
 800da2a:	d422      	bmi.n	800da72 <__swsetup_r+0x62>
 800da2c:	06da      	lsls	r2, r3, #27
 800da2e:	d407      	bmi.n	800da40 <__swsetup_r+0x30>
 800da30:	2209      	movs	r2, #9
 800da32:	602a      	str	r2, [r5, #0]
 800da34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	f04f 30ff 	mov.w	r0, #4294967295
 800da3e:	e033      	b.n	800daa8 <__swsetup_r+0x98>
 800da40:	0758      	lsls	r0, r3, #29
 800da42:	d512      	bpl.n	800da6a <__swsetup_r+0x5a>
 800da44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da46:	b141      	cbz	r1, 800da5a <__swsetup_r+0x4a>
 800da48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da4c:	4299      	cmp	r1, r3
 800da4e:	d002      	beq.n	800da56 <__swsetup_r+0x46>
 800da50:	4628      	mov	r0, r5
 800da52:	f7fd fc05 	bl	800b260 <_free_r>
 800da56:	2300      	movs	r3, #0
 800da58:	6363      	str	r3, [r4, #52]	@ 0x34
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da60:	81a3      	strh	r3, [r4, #12]
 800da62:	2300      	movs	r3, #0
 800da64:	6063      	str	r3, [r4, #4]
 800da66:	6923      	ldr	r3, [r4, #16]
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	89a3      	ldrh	r3, [r4, #12]
 800da6c:	f043 0308 	orr.w	r3, r3, #8
 800da70:	81a3      	strh	r3, [r4, #12]
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	b94b      	cbnz	r3, 800da8a <__swsetup_r+0x7a>
 800da76:	89a3      	ldrh	r3, [r4, #12]
 800da78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da80:	d003      	beq.n	800da8a <__swsetup_r+0x7a>
 800da82:	4621      	mov	r1, r4
 800da84:	4628      	mov	r0, r5
 800da86:	f000 f883 	bl	800db90 <__smakebuf_r>
 800da8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da8e:	f013 0201 	ands.w	r2, r3, #1
 800da92:	d00a      	beq.n	800daaa <__swsetup_r+0x9a>
 800da94:	2200      	movs	r2, #0
 800da96:	60a2      	str	r2, [r4, #8]
 800da98:	6962      	ldr	r2, [r4, #20]
 800da9a:	4252      	negs	r2, r2
 800da9c:	61a2      	str	r2, [r4, #24]
 800da9e:	6922      	ldr	r2, [r4, #16]
 800daa0:	b942      	cbnz	r2, 800dab4 <__swsetup_r+0xa4>
 800daa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800daa6:	d1c5      	bne.n	800da34 <__swsetup_r+0x24>
 800daa8:	bd38      	pop	{r3, r4, r5, pc}
 800daaa:	0799      	lsls	r1, r3, #30
 800daac:	bf58      	it	pl
 800daae:	6962      	ldrpl	r2, [r4, #20]
 800dab0:	60a2      	str	r2, [r4, #8]
 800dab2:	e7f4      	b.n	800da9e <__swsetup_r+0x8e>
 800dab4:	2000      	movs	r0, #0
 800dab6:	e7f7      	b.n	800daa8 <__swsetup_r+0x98>
 800dab8:	2000002c 	.word	0x2000002c

0800dabc <_raise_r>:
 800dabc:	291f      	cmp	r1, #31
 800dabe:	b538      	push	{r3, r4, r5, lr}
 800dac0:	4605      	mov	r5, r0
 800dac2:	460c      	mov	r4, r1
 800dac4:	d904      	bls.n	800dad0 <_raise_r+0x14>
 800dac6:	2316      	movs	r3, #22
 800dac8:	6003      	str	r3, [r0, #0]
 800daca:	f04f 30ff 	mov.w	r0, #4294967295
 800dace:	bd38      	pop	{r3, r4, r5, pc}
 800dad0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dad2:	b112      	cbz	r2, 800dada <_raise_r+0x1e>
 800dad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dad8:	b94b      	cbnz	r3, 800daee <_raise_r+0x32>
 800dada:	4628      	mov	r0, r5
 800dadc:	f000 f830 	bl	800db40 <_getpid_r>
 800dae0:	4622      	mov	r2, r4
 800dae2:	4601      	mov	r1, r0
 800dae4:	4628      	mov	r0, r5
 800dae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daea:	f000 b817 	b.w	800db1c <_kill_r>
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d00a      	beq.n	800db08 <_raise_r+0x4c>
 800daf2:	1c59      	adds	r1, r3, #1
 800daf4:	d103      	bne.n	800dafe <_raise_r+0x42>
 800daf6:	2316      	movs	r3, #22
 800daf8:	6003      	str	r3, [r0, #0]
 800dafa:	2001      	movs	r0, #1
 800dafc:	e7e7      	b.n	800dace <_raise_r+0x12>
 800dafe:	2100      	movs	r1, #0
 800db00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800db04:	4620      	mov	r0, r4
 800db06:	4798      	blx	r3
 800db08:	2000      	movs	r0, #0
 800db0a:	e7e0      	b.n	800dace <_raise_r+0x12>

0800db0c <raise>:
 800db0c:	4b02      	ldr	r3, [pc, #8]	@ (800db18 <raise+0xc>)
 800db0e:	4601      	mov	r1, r0
 800db10:	6818      	ldr	r0, [r3, #0]
 800db12:	f7ff bfd3 	b.w	800dabc <_raise_r>
 800db16:	bf00      	nop
 800db18:	2000002c 	.word	0x2000002c

0800db1c <_kill_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d07      	ldr	r5, [pc, #28]	@ (800db3c <_kill_r+0x20>)
 800db20:	2300      	movs	r3, #0
 800db22:	4604      	mov	r4, r0
 800db24:	4608      	mov	r0, r1
 800db26:	4611      	mov	r1, r2
 800db28:	602b      	str	r3, [r5, #0]
 800db2a:	f7f4 fdb9 	bl	80026a0 <_kill>
 800db2e:	1c43      	adds	r3, r0, #1
 800db30:	d102      	bne.n	800db38 <_kill_r+0x1c>
 800db32:	682b      	ldr	r3, [r5, #0]
 800db34:	b103      	cbz	r3, 800db38 <_kill_r+0x1c>
 800db36:	6023      	str	r3, [r4, #0]
 800db38:	bd38      	pop	{r3, r4, r5, pc}
 800db3a:	bf00      	nop
 800db3c:	20004f3c 	.word	0x20004f3c

0800db40 <_getpid_r>:
 800db40:	f7f4 bda6 	b.w	8002690 <_getpid>

0800db44 <__swhatbuf_r>:
 800db44:	b570      	push	{r4, r5, r6, lr}
 800db46:	460c      	mov	r4, r1
 800db48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db4c:	2900      	cmp	r1, #0
 800db4e:	b096      	sub	sp, #88	@ 0x58
 800db50:	4615      	mov	r5, r2
 800db52:	461e      	mov	r6, r3
 800db54:	da0d      	bge.n	800db72 <__swhatbuf_r+0x2e>
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db5c:	f04f 0100 	mov.w	r1, #0
 800db60:	bf14      	ite	ne
 800db62:	2340      	movne	r3, #64	@ 0x40
 800db64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db68:	2000      	movs	r0, #0
 800db6a:	6031      	str	r1, [r6, #0]
 800db6c:	602b      	str	r3, [r5, #0]
 800db6e:	b016      	add	sp, #88	@ 0x58
 800db70:	bd70      	pop	{r4, r5, r6, pc}
 800db72:	466a      	mov	r2, sp
 800db74:	f000 f848 	bl	800dc08 <_fstat_r>
 800db78:	2800      	cmp	r0, #0
 800db7a:	dbec      	blt.n	800db56 <__swhatbuf_r+0x12>
 800db7c:	9901      	ldr	r1, [sp, #4]
 800db7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db86:	4259      	negs	r1, r3
 800db88:	4159      	adcs	r1, r3
 800db8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db8e:	e7eb      	b.n	800db68 <__swhatbuf_r+0x24>

0800db90 <__smakebuf_r>:
 800db90:	898b      	ldrh	r3, [r1, #12]
 800db92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db94:	079d      	lsls	r5, r3, #30
 800db96:	4606      	mov	r6, r0
 800db98:	460c      	mov	r4, r1
 800db9a:	d507      	bpl.n	800dbac <__smakebuf_r+0x1c>
 800db9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	6123      	str	r3, [r4, #16]
 800dba4:	2301      	movs	r3, #1
 800dba6:	6163      	str	r3, [r4, #20]
 800dba8:	b003      	add	sp, #12
 800dbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbac:	ab01      	add	r3, sp, #4
 800dbae:	466a      	mov	r2, sp
 800dbb0:	f7ff ffc8 	bl	800db44 <__swhatbuf_r>
 800dbb4:	9f00      	ldr	r7, [sp, #0]
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	4639      	mov	r1, r7
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f7fd fbc4 	bl	800b348 <_malloc_r>
 800dbc0:	b948      	cbnz	r0, 800dbd6 <__smakebuf_r+0x46>
 800dbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbc6:	059a      	lsls	r2, r3, #22
 800dbc8:	d4ee      	bmi.n	800dba8 <__smakebuf_r+0x18>
 800dbca:	f023 0303 	bic.w	r3, r3, #3
 800dbce:	f043 0302 	orr.w	r3, r3, #2
 800dbd2:	81a3      	strh	r3, [r4, #12]
 800dbd4:	e7e2      	b.n	800db9c <__smakebuf_r+0xc>
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	6020      	str	r0, [r4, #0]
 800dbda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbde:	81a3      	strh	r3, [r4, #12]
 800dbe0:	9b01      	ldr	r3, [sp, #4]
 800dbe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dbe6:	b15b      	cbz	r3, 800dc00 <__smakebuf_r+0x70>
 800dbe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbec:	4630      	mov	r0, r6
 800dbee:	f000 f81d 	bl	800dc2c <_isatty_r>
 800dbf2:	b128      	cbz	r0, 800dc00 <__smakebuf_r+0x70>
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	f023 0303 	bic.w	r3, r3, #3
 800dbfa:	f043 0301 	orr.w	r3, r3, #1
 800dbfe:	81a3      	strh	r3, [r4, #12]
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	431d      	orrs	r5, r3
 800dc04:	81a5      	strh	r5, [r4, #12]
 800dc06:	e7cf      	b.n	800dba8 <__smakebuf_r+0x18>

0800dc08 <_fstat_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4d07      	ldr	r5, [pc, #28]	@ (800dc28 <_fstat_r+0x20>)
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	4604      	mov	r4, r0
 800dc10:	4608      	mov	r0, r1
 800dc12:	4611      	mov	r1, r2
 800dc14:	602b      	str	r3, [r5, #0]
 800dc16:	f7f4 fda3 	bl	8002760 <_fstat>
 800dc1a:	1c43      	adds	r3, r0, #1
 800dc1c:	d102      	bne.n	800dc24 <_fstat_r+0x1c>
 800dc1e:	682b      	ldr	r3, [r5, #0]
 800dc20:	b103      	cbz	r3, 800dc24 <_fstat_r+0x1c>
 800dc22:	6023      	str	r3, [r4, #0]
 800dc24:	bd38      	pop	{r3, r4, r5, pc}
 800dc26:	bf00      	nop
 800dc28:	20004f3c 	.word	0x20004f3c

0800dc2c <_isatty_r>:
 800dc2c:	b538      	push	{r3, r4, r5, lr}
 800dc2e:	4d06      	ldr	r5, [pc, #24]	@ (800dc48 <_isatty_r+0x1c>)
 800dc30:	2300      	movs	r3, #0
 800dc32:	4604      	mov	r4, r0
 800dc34:	4608      	mov	r0, r1
 800dc36:	602b      	str	r3, [r5, #0]
 800dc38:	f7f4 fda2 	bl	8002780 <_isatty>
 800dc3c:	1c43      	adds	r3, r0, #1
 800dc3e:	d102      	bne.n	800dc46 <_isatty_r+0x1a>
 800dc40:	682b      	ldr	r3, [r5, #0]
 800dc42:	b103      	cbz	r3, 800dc46 <_isatty_r+0x1a>
 800dc44:	6023      	str	r3, [r4, #0]
 800dc46:	bd38      	pop	{r3, r4, r5, pc}
 800dc48:	20004f3c 	.word	0x20004f3c

0800dc4c <_init>:
 800dc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4e:	bf00      	nop
 800dc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc52:	bc08      	pop	{r3}
 800dc54:	469e      	mov	lr, r3
 800dc56:	4770      	bx	lr

0800dc58 <_fini>:
 800dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5a:	bf00      	nop
 800dc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc5e:	bc08      	pop	{r3}
 800dc60:	469e      	mov	lr, r3
 800dc62:	4770      	bx	lr
